<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.io/"/>
  <updated>2014-06-06T14:58:10+03:00</updated>
  <id>http://mishadoff.github.io/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming Digest 5]]></title>
    <link href="http://mishadoff.github.io/blog/programming-digest-5/"/>
    <updated>2014-06-06T13:31:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/programming-digest-5</id>
    <content type="html"><![CDATA[<p>Programming Sucks.</p>

<!-- more -->

<h3 id="programming-suckshttpstilldrinkingorgprogramming-sucks">1. <a href="http://stilldrinking.org/programming-sucks">Programming Sucks</a></h3>

<blockquote>
  <p>…many of the programs you depend on are written by dicks and idiots</p>
</blockquote>

<p>Funny ranting about crazy programming life.</p>

<blockquote>
  <p>Every programmer occasionally, when nobody’s home, turns off the lights, pours a glass of scotch, puts on some light German electronica, and opens up a file on their computer…This file is Good Code.</p>
</blockquote>

<h3 id="functional-programming-for-the-rest-of-ushttpwwwdefmacroorgramblingsfphtml">2. <a href="http://www.defmacro.org/ramblings/fp.html">Functional Programming For The Rest Of Us</a></h3>

<p>There are two types of people in functional programming world:
those who use monads and those who don’t know they use monads.</p>

<p>This is a good overview that helps to convince your colleague to use fp without monads, applicative functors and other theoretical shit.</p>

<h3 id="game-programming-patternshttpgameprogrammingpatternscom">3. <a href="http://gameprogrammingpatterns.com/">Game Programming Patterns</a></h3>

<p>A set of patterns and techniques applicable to game development. Probably some of them you’ve already used. Unfortunately, examples in C++. </p>

<h3 id="a-hackers-guide-to-githttpwildlyinaccuratecoma-hackers-guide-to-git">4. <a href="http://wildlyinaccurate.com/a-hackers-guide-to-git">A Hacker’s Guide to Git</a></h3>

<p>Pour some light on git internals. Seems like almost everything in git is just a hashcode.</p>

<h3 id="is-tdd-deadhttpmartinfowlercomarticlesis-tdd-dead">5. <a href="http://martinfowler.com/articles/is-tdd-dead/">Is TDD Dead?</a></h3>

<p>Hangouts with Martin Fowler, Kent Beck and David Heinemeier Hansson about TDD. Do not test everything.</p>

<h3 id="character-encodingshttpbloggatunkacom20140425character-encodings-for-modern-programmers">6. <a href="http://blog.gatunka.com/2014/04/25/character-encodings-for-modern-programmers/">Character Encodings</a></h3>

<p>A history and caveats of encodings. Windows sucks.</p>

<h3 id="principles-of-high-performance-programshttpbloglibtorrentorg201212principles-of-high-performance-programs">7. <a href="http://blog.libtorrent.org/2012/12/principles-of-high-performance-programs/">Principles Of High Performance Programs</a></h3>

<p>Generic useful rules you may consider when building high-performance applications. Memory latency, context switch, granularity and other things explained.</p>

<h3 id="software-talks-for-the-ageshttppchristensencomblogarticlessoftware-talks-for-the-ages">8. <a href="http://pchristensen.com/blog/articles/software-talks-for-the-ages/">Software Talks for the Ages</a></h3>

<p>Meta one. Good set of programming talks.
<a href="http://vimeo.com/25958308">50 in 50</a> is a pure gold.</p>

<h3 id="how-the-cpu-workshttpswwwyoutubecomwatchvcnnttxabua">9. <a href="https://www.youtube.com/watch?v=cNN_tTXABUA">How the CPU works</a></h3>

<p>This is quite interesting.</p>

<h3 id="httpcodegolfstackexchangecomquestions28786write-a-program-that-makes-2-2-5">10. <a href="http://codegolf.stackexchange.com/questions/28786/write-a-program-that-makes-2-2-5">2 + 2 = 5</a></h3>

<p>Stackoverflow discussion with examples how to write a program that makes <code>2+2=5</code>.</p>

<blockquote>
  <p>That. Is. Evil.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Pitfalls: Part 1]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-pitfalls-part-1/"/>
    <updated>2014-05-22T01:48:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-pitfalls-part-1</id>
    <content type="html"><![CDATA[<p>Clojure is a great language, and as every language,
it has some unobvious and strange things, which seem confusing.</p>

<p>Some of such things are gathered here.
Most of them encountered by stupidity, docs misunderstanding,
clojure specifics and procrastination.</p>

<!-- more -->

<h3 id="anybody-home">1. Anybody home?</h3>

<p><code>clojure
(contains? [10 20 30] 20) =&gt; false
</code></p>

<p>Surprised?</p>

<p>The issue here is <code>contains?</code> function
checks if <em>key</em> (not a value!) is present in collection.
For vector - key is index, and obviously there is no 20th element.</p>

<p>If you need to check if <em>value</em> is present in collection,
use <code>some</code> predicate:</p>

<p><code>clojure
(some #(= % 20) [10 20 30]) =&gt; true
</code></p>

<p>Keep in mind this function works in linear time.
If you need to call it often, build a set and use
it as a function.</p>

<p><code>clojure
(def numbers (set [10 20 30]))
(numbers 20) =&gt; 20 ;; treated as true
(numbers 1) =&gt; nil ;; treated as false
</code></p>

<p>Note: if set contains <code>nil</code> or <code>false</code>, it won’t work.
More discussion <a href="http://stackoverflow.com/questions/3249334/test-whether-a-list-contains-a-specific-value-in-clojure">here</a>.</p>

<h3 id="breaking-the-law">2. Breaking the Law</h3>

<p>You need stack. In clojure you can treat <code>list</code> like a stack.</p>

<p>``` clojure
;; take stack head
(peek ‘(1 2 3)) =&gt; 1</p>

<p>;; pop stack
(pop ‘(1 2 3)) =&gt; (2 3)</p>

<p>;; push item into stack
(cons 0 ‘(1 2 3)) =&gt; (0 1 2 3)
```</p>

<p>Everything is fine. But if you call <code>pop</code> after <code>cons</code>…</p>

<blockquote>
  <p>ClassCastException clojure.lang.Cons cannot be cast to clojure.lang.IPersistentStack</p>
</blockquote>

<p>The problem is <code>cons</code> is type destructive operation.</p>

<p><code>clojure
(type '(1 2 3))            =&gt; clojure.lang.PersistentList
(type (cons 0 '(1 2 3)))   =&gt; clojure.lang.Cons
</code></p>

<p>And clearly, there is no <code>pop</code> defined for <code>Cons</code> type.</p>

<p>To preserve collection type, use <code>conj</code> function.</p>

<p><code>clojure
(type '(1 2 3))            =&gt; clojure.lang.PersistentList
(type (conj '(1 2 3) 0))   =&gt; clojure.lang.PersistentList
</code></p>

<h3 id="apples-or-oranges-part-i">3. Apples or Oranges? Part I</h3>

<p>What’s the difference between
<code>(last [1 2 3])</code> and <code>(last '(1 2 3))</code>?</p>

<p>Functionally there is no difference, both snippets return <code>3</code></p>

<p>Moreover, from performance view there is no difference as well.
Both snippets work in linear time. Linear. O(n). Even for vector.</p>

<p>What’s the difference between
<code>(count [1 2 3])</code> and <code>(count '(1 2 3))</code>?</p>

<p>Much better here, <code>count</code> works in constant time for vector
and linear for list. So, if you really need fast <code>last</code> for vector,
use <code>count</code>.</p>

<p>``` clojure
;; 10M size vector
(def v (vec (range 1e7)))</p>

<p>(time (last v)) =&gt; 9999999
;; “Elapsed time: 1704.172859 msecs”</p>

<p>(time (get v (dec (count v)))) =&gt; 9999999
;; “Elapsed time: 0.087302 msecs”
```</p>

<p><em>Huge difference</em>.</p>

<p>Do not use vector specific functions
to list. Also, consider using <code>mapv</code>
instead of <code>map</code> when processing vectors.</p>

<h3 id="apples-or-oranges-part-ii">4. Apples or Oranges? Part II</h3>

<p>Everybody knows <code>reduce</code> and <code>apply</code> functions.
Sometimes using choosing between them does not make any difference.</p>

<p>``` clojure
;; 100K numbers
(def N (repeatedly 1e6 #(rand-int 100)))</p>

<p>(time (reduce + N)) =&gt; 49503683
;; “Elapsed time: 311.496332 msecs”</p>

<p>(time (apply + N)) =&gt; 49503683
;; “Elapsed time: 339.624222 msecs”
```</p>

<p>Sometimes it does.</p>

<p>``` clojure
;; 10K strings
(def S (repeatedly 1e5 (fn [] “1”)))</p>

<p>(time (count(apply str S))) =&gt; 100000
;; “Elapsed time: 35.027218 msecs”</p>

<p>(time (count(reduce str S))) =&gt; 100000
;; “Elapsed time: 24249.845948 msecs”
```</p>

<h3 id="refactor">5. Refactor</h3>

<p>Conditionals are horses of programming language.</p>

<p><code>clojure
(def status 500)
(cond (= status 403)    "login.html"
      (= status 404)    "not_found.html"
      (= status 500)    "server_fault.html"
      (= status 200)    "index.html"
      :else             "something_wrong.html")
</code></p>

<p>Pretty straightforward, but a piece <code>(= status %)</code> look ugly.
Let’s refactor it a bit and avoid repetition with <code>condp</code></p>

<p><code>clojure
(def status 500)
(condp = status
       403    "login.html"
       404    "not_found.html"
       500    "server_fault.html"
       200    "index.html"
       :else  "something_wrong.html")
</code></p>

<p>Much better. Except we broke previous functionality.
If pass invalid status (let’s say 201) we get an exception:</p>

<blockquote>
  <p>IllegalArgumentException No matching clause: 201</p>
</blockquote>

<p>And that’s right: sugared keyword <code>:else</code> in <code>cond</code> behaves like regular clause in <code>condp</code>
To make working solution, just remove <code>:else</code>.</p>

<p><code>clojure
(condp = status
       403    "login.html"
       404    "not_found.html"
       500    "server_fault.html"
       200    "index.html"
       "something_wrong.html")
</code></p>

<h3 id="dont-trust-your-eyes">6. Don’t trust your eyes</h3>

<p>Get this portable, pure, thread-safe, well-documented,
so beatiful and very awesome function:</p>

<p><code>clojure
(defn add [a b]
  "Performs addition operation.
   More about addition here: http://en.wikipedia.org/wiki/Addition"
  (+ a b))
</code></p>

<p>What’s wrong here? Is it really <em>well-documented</em>? </p>

<p>If you have sources, then yes, you see all documentation.
But if you are library user you have no idea what function <code>add</code> might do. </p>

<p><code>clojure
(doc add)
; -------------------------
; user/add
; ([a b])
;   nil
</code></p>

<p>Misplaced docstring. Transpose it with arglist.</p>

<p>``` clojure
(defn add 
  “Performs addition operation.
  More about addition here: http://en.wikipedia.org/wiki/Addition”
  [a b]
  (+ a b))</p>

<p>(doc add)
; ————————-
; user/add
; ([a b])
;   Performs addition operation.
;   More about addition here: http://en.wikipedia.org/wiki/Addition
```</p>

<p>Note: clojure lint tool <a href="https://github.com/jonase/eastwood">eastwood</a>
is able to find this mistake.</p>

<h3 id="it-depends">7. It depends</h3>

<p>There is less known, but useful feature <em>dynamic binding</em></p>

<p><code>clojure
(def ^:dynamic *DEBUG* false)
</code></p>

<p>If your code depends on <code>*DEBUG*</code> binding,
its behaviour can be modified without changing
function definition</p>

<p>``` clojure
(defn square [a]
  (when <em>DEBUG</em> (println “call square”))
  (* a a))</p>

<p>(square 10) =&gt; 100</p>

<p>(binding [<em>DEBUG</em> true]
  (square 10))
;; call square
=&gt; 100
```</p>

<p>If you have another value, that depends on dynamic binding, it is not dynamic.</p>

<p>``` clojure
(def ^:dynamic <em>DEBUG_PREFIX</em>
  (if <em>DEBUG</em> “DEBUG=TRUE” “DEBUG=FALSE”))</p>

<p>(binding [<em>DEBUG</em> true]
  <em>DEBUG_PREFIX</em>)
=&gt; “DEBUG=FALSE”
```</p>

<p>To fix that make it as a no-arg function. It will obtain
dynamic binding right after the call.</p>

<p>``` clojure
(defn- debug-prefix []
  (if <em>DEBUG</em> “DEBUG=TRUE” “DEBUG=FALSE”))</p>

<p>(binding [<em>DEBUG</em> true]
  (debug-prefix))
=&gt; “DEBUG=TRUE”
```</p>

<h3 id="map-access-denied">8. MAP: Access Denied</h3>

<p>There are three ways to access map value</p>

<p>``` clojure
(def m {:name “Quentin Tarantino”})</p>

<p>;; 1. By keyword
(:name m) =&gt; “Quentin Tarantino”</p>

<p>;; 2. By map as a function
(m :name) =&gt; “Quentin Tarantino”</p>

<p>;; 3. Using get
(get m :name) =&gt; “Quentin Tarantino”
```</p>

<p>What version to use is a matter of style,
because they are almost always interchangeble,
but keep in mind some caveats.</p>

<p>First approach is bad, when your keys are strings
or whatever-not-a-function.</p>

<p>``` clojure
(def m {“name” “Quentin Tarantino”})</p>

<p>(“name” m) =&gt; ClassCastException java.lang.String cannot be cast to clojure.lang.IFn
```</p>

<p>Second one is able to handle that, but instead it can throw NPE, when map is nil</p>

<p>``` clojure
(def m nil)</p>

<p>(m :name) =&gt; NullPointerException
```</p>

<p>Using <code>get</code> we avoid these pros, and access become more obvious.</p>

<p>I prefer first version when using keyword explicitly, otherwise access via <code>get</code></p>

<h3 id="thread-hack">9. Thread Hack</h3>

<p>Thread macro is a convenient way to implement sequential processing.</p>

<p>Thread First <code>-&gt;</code> inserts previous result
as a <em>first</em> argument for the next expression.</p>

<p><code>clojure
(-&gt; (http/get URL)
    (validate-status)
    :body
    :data
    (first))
</code></p>

<p>Thread Last <code>-&gt;&gt;</code> does the same,
but insert previous result as a <em>last</em> argument </p>

<p><code>clojure
(-&gt;&gt; (range 100)
     (map square)
     (filter even?)
     (reduce +))
</code></p>

<p>If you need to insert previous result into specific position,
wrap next expression to one-arg anonymous functions.</p>

<p><code>clojure
(-&gt;&gt; (http/get URL)
     (#(validate-status % :throw-exception))
     :body
     :data
     (#(conj % [:guard])))
</code></p>

<h3 id="just-words">10. Just Words</h3>

<p>This one is not related to clojure, but interesting. Consider problem:</p>

<blockquote>
  <p>Find all words in a string</p>
</blockquote>

<p>Pretty obvious, huh?</p>

<p><code>clojure
(re-seq #"\w+" "Hello, world!") =&gt;
("Hello" "world")
</code></p>

<p>We don’t want numbers and underscore appear inside word</p>

<p><code>clojure
(re-seq #"\w+" "Hello, w_orld 1984!") =&gt;
("Hello" "w_orld" "1984")
</code></p>

<p>Okay, use just letters:</p>

<p><code>clojure
(re-seq #"[a-zA-Z]+" "Hello, w_orld 1984!") =&gt;
("Hello" "w" "orld")
</code></p>

<p>No, we don’t want broken words. Use <code>\b</code> word boundary regex.</p>

<p><code>clojure
(re-seq #"\b[a-zA-Z]+\b" "Hello, w_orld 1984!") =&gt;
("Hello")
</code></p>

<p>Solved?</p>

<p>Not for ukrainian</p>

<p><code>clojure
(re-seq #"\b[a-zA-Z]+\b" "Привіт, світ 1984!") =&gt;
nil
</code></p>

<p>And for every language which contains non-ascii letters in alphabet.
Use unicode letter regexp <code>\p{L}</code> instead.</p>

<p><code>clojure
(re-seq #"\b\p{L}+\b" "Привіт, світ 1984!") =&gt;
("Привіт" "світ")
</code> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 023]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-023/"/>
    <updated>2014-05-10T18:11:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-023</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Find the sum of all the positive integers
which cannot be written as the sum of two abundant numbers.</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=23">http://projecteuler.net/problem=23</a></p>

<!-- more -->

<p>To define abundant number let’s revisit <code>sum-of-proper-divisors</code> from the <a href="/blog/clojure-euler-problem-021">Clojure Euler: Problem 021</a></p>

<p><code>clojure
(defn sum-of-proper-divisors [n]
  (let [base (filter #(zero? (mod n %)) (range 2 (Math/sqrt n)))]
    (reduce + 1 (concat (map #(/ n %) base) base))))
</code></p>

<p>Using that function, <code>abundant?</code> predicate just follows definition.</p>

<p><code>clojure
(defn abundant? [n]
  (&gt; (sum-of-proper-divisors n) n))
</code></p>

<p>If you look carefully at <code>sum-of-proper-divisors</code> it is buggy.</p>

<p><code>clojure
(sum-of-proper-divisors 25) =&gt; 1 ;; instead of 6
</code></p>

<p>Square numbers are not handled correctly.
To fix that we add one more list to <code>concat</code>.</p>

<p><code>clojure
(defn sum-of-proper-divisors [n]
  (let [divs (filter #(zero? (mod n %)) (range 2 (Math/sqrt n)))]
    (reduce + 1 (set (concat
                      (let [isq (int (Math/sqrt n))]      ;; added
                        (if (= n (* isq isq)) [isq] []))  ;; added
                      divs
                      (map #(/ n %) divs))))))
</code></p>

<p>Double check</p>

<p><code>clojure
(sum-of-proper-divisors 25) =&gt; 6
</code></p>

<p>Great! Next step is to find all integer numbers which can not be written as the sum of two abundant numbers.</p>

<p>Precalculate all abundant numbers:</p>

<p><code>clojure
(def abundant (filter abundant? (range 12 28124)))
</code></p>

<p>Now we can build all numbers which can be written as
two abundant numbers and find their sum.</p>

<p><code>clojure
(-&gt;&gt; (for [i abundant j abundant
           :let [num (+ i j)]
           :when (&lt; num 28124)]
       num)
     (distinct)
     (reduce +)
     (- (reduce + (range 1 28124))))
</code></p>

<p>This solution works ~44 sec, too much.</p>

<p>More clever approach is to iterate from all integers upto 28124 and check if some number can be written as a sum of two abundant numbers.</p>

<p>The trick is simple: we building sorted set of abundant numbers</p>

<p><code>clojure
(def abundant (into (sorted-set) (filter abundant? (range 12 28124))))
</code></p>

<p>For every integer number <code>n</code> we subtract one abundant number and check if <code>abundant</code> set contains result.
There is a good function <a href="http://clojuredocs.org/clojure_core/clojure.core/some">some</a> that makes our life easier.</p>

<p><code>clojure
(defn abundant-sum? [n abundant]
  (some #(abundant (- n %)) abundant))
</code></p>

<p>Finding the sum</p>

<p><code>clojure
(-&gt;&gt; (range 1 28124)
     (remove #(abundant-sum? % abundant))
     (reduce +))
</code></p>

<p>It works ~26 sec.</p>

<p>Another optimization is to limit number of abundants in
<code>abundant-sum</code> function.</p>

<p><code>clojure
(defn abundant-sum? [n abundant]
  (some #(abundant (- n %))
         (take-while #(&lt; % n) abundant)))
</code></p>

<p>Time reduced to ~14 sec. Pretty good.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem023.clj">Code</a></p>

<p><strong>P.S.</strong> Buggy version of <code>sum-of-proper-divisor</code> solved the previous problem correctly, but it was just a luck. Make sure you test your functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Numberto: Expressions]]></title>
    <link href="http://mishadoff.github.io/blog/numberto-expressions/"/>
    <updated>2014-03-29T00:25:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/numberto-expressions</id>
    <content type="html"><![CDATA[<p>Numberto has new features!</p>

<!-- more -->

<p>In <a href="/blog/announcing-numberto">previous post</a>
I wrote about simple clojure library <a href="https://github.com/mishadoff/numberto">numberto</a> for experiments with numbers.</p>

<p>New version of <em>numberto</em> has a bunch of new features.</p>

<h3 id="expressions">Expressions</h3>

<p>Expressions package provides two functions: <code>eval-infix</code> to evaluate infix expression
and <code>infix-&gt;prefix</code> to build prefix lisp-style expression from mathematical notation.</p>

<p>Let’s give it alias for simplicity</p>

<p><code>clojure
(def e eval-infix)
</code></p>

<p>Evaluate simple math expression</p>

<p><code>clojure
(e "1+2") =&gt; 3
</code></p>

<p>or more complex</p>

<p><code>clojure
(e "1+2*(3-4/2)") =&gt; 3
</code></p>

<p>handle priorities</p>

<p><code>clojure
(e "2+2*2") =&gt; 6
</code></p>

<p>and left/right associativity</p>

<p><code>clojure
(e "1024/2/2/2/2") =&gt; 64
(e "2^3^4") =&gt; 2417851639229258349412352N
</code></p>

<p>Oh, what’s this? Long numbers? Sure, ratios and floats supported as well</p>

<p><code>clojure
(e "1/3") =&gt; 1/3
(e "1.1/0.9") =&gt; 1.2222222222222223
</code></p>

<p>Unary operations</p>

<p><code>clojure
(e "(-1)^100") =&gt; 1
</code></p>

<p>functions and symbols</p>

<p><code>clojure
(e "sin(e) + sqrt(pi)") =&gt; 2.183235141408425
</code></p>

<p>vararg functions</p>

<p><code>clojure
(e "sum(1,2,3,sum())/max(1,2)") =&gt; 3
</code></p>

<p>You can also provide bindings for unknown functions and symbols</p>

<p><code>clojure
(e "factorial(n)/20"
   {:bindings
     {"factorial" #(reduce *' (range 1 (inc %)))
      "n" 10}})
=&gt; 181440
</code></p>

<p>Worth to mention that you can easily redefine existing
or define your own new unary, binary operations, functions
and symbols. Just add additional properties to <code>eval-infix</code></p>

<p><code>clojure
;; return current time in millis
(e "now()" {:bindings {"now" #(.getTime (java.util.Date.))}}) =&gt; some long number
;; override priorities
(e "1+2*3" {:binary-ops {"+" {:function + :priority 100}}}) =&gt; 9
</code></p>

<p><code>infix-&gt;prefix</code> has exactly the same functionality, but it builds prefix expression instead.</p>

<p><code>clojure
(infix-&gt;prefix "(1+2)*3-(4/avg(3,5)-sum(1))")
=&gt;
"(- (* (+ 1 2) 3) (- (/ 4 (avg 3 5)) (sum 1)))"
</code></p>

<p>It can be useful if you googled some formula but bored to translate it manually to clojure.</p>

<p>For example, take the <a href="http://en.wikipedia.org/wiki/Simpson%27s_rule">Simpson’s rule</a></p>

<p><img src="http://upload.wikimedia.org/math/1/a/0/1a0fb4456375307fdde8ab85954d95be.png" alt="" /></p>

<p><code>clojure
(infix-&gt;prefix "(b-a)/6*(f(a)+4*f((a+b)/2)+f(b))")
=&gt;
"(* (/ (- b a) 6) (+ (+ (f a) (* 4 (f (/ (+ a b) 2)))) (f b)))"
</code></p>

<h4 id="implementation">Implementation</h4>

<p>Would be good to try <a href="https://github.com/Engelberg/instaparse">instaparse</a> for such purpose,
but I decided to use custom implementation using standard
<a href="http://en.wikipedia.org/wiki/Shunting-yard_algorithm">Shunting-yard algorithm</a>.
Just couple of hacks added to handle unaries and vararg functions.
Code is awful. If you really want to dig in - run debug mode.</p>

<p><code>clojure
(binding [*DEBUG* true]
  (e "1+2"))
</code></p>

<h4 id="limitations">Limitations</h4>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>No way to define non-prefix unary operation, like “10!” or “</td>
          <td>10</td>
          <td>”</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Can not handle simplified math form, like “2x^2 + 3^x + 5”.
Multiplication sign should be declared explicitly</li>
  <li>Not able to simplify ops in lisp-style expression. <code>(* (* 1 2) 3)</code> instead of <code>(* 1 2 3)</code></li>
  <li>False positives handling. Some stupid expressions indicates about error <code>(e "1+")</code>, some not <code>(e "1+()1)</code>. I still working on this, but it is not critical.</li>
</ul>

<h3 id="solvers">Solvers</h3>

<p>Here is the puzzle:</p>

<blockquote>
  <p>You have four numbers [3, 4, 5, 6].<br />
You have four binary operations [+, -, *, /] and parentheses ()</p>

  <p>How to insert operations between numbers to get number 42?</p>
</blockquote>

<p>Hah, that simple <code>3*4 + 5*6 = 42</code></p>

<p>Ok, get <code>42</code>, but you forced to use one division <code>/</code>.</p>

<p>Not so obvious?</p>

<p><code>
(solve-insert-ops-num [3 4 5 6] 42) =&gt;
([42N "3+45-6"] [42N "3/4*56"] [42N "3*4+5*6"])
</code></p>

<p>If you use <code>solve-insert-ops</code> function it gives all possible values can be obtained by inserting operations between numbers.</p>

<p><code>clojure
(solve-insert-ops [3 4 5 6]) =&gt; ;; long list
</code></p>

<p>Default implementation uses 4 basic operations, no parens and no restrictions. Instead, you can override options</p>

<p>to use parens, specify level</p>

<p><code>clojure
(solve-insert-ops-num [3 4 5 6] 42 {:parens 1}) =&gt;
([42N "3+45-6"] [42N "(3+45)-6"] [42N "3+(45-6)"]
 [42N "3/4*56"] [42N "(3/4)*56"] [42N "3/(4/56)"]
 [42N "3*4+5*6"] [42N "(3*4)+5*6"] [42N "3*4+(5*6)"])
</code></p>

<p>limit some operations</p>

<p><code>clojure
(solve-insert-ops-num [3 4 5 6] 42 {:rules [[:max "*" 1]]}) =&gt;
([42N "3+45-6"] [42N "3/4*56"])
</code></p>

<p><code>:max</code>, <code>:min</code>, <code>:max-in-a-row</code>, <code>:min-in-a-row</code> options are supported.</p>

<p>Add new operations (supported by expressions package)</p>

<p><code>clojure
(solve-insert-ops-num [3 4 5 6] 80
                      {:ops ["+" "-" "*" "/" "^"]
                       :rules [[:max "^" 1]]}) =&gt;
([80N "3^4+5-6"])
</code></p>

<p>Keep in mind, always limit time consuming operations (<em>like</em> <code>^</code>) as it builds all possible permutations and you can wait your answer forever.</p>

<p>There are also couple of <em>new</em> interesting things, like
getting digits of <code>pi</code>, <code>e</code>, <code>sqrt(n)</code>, ratio numbers up to desired level and other. <a href="https://github.com/mishadoff/numberto/blob/master/doc/intro.md">Check it out</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 4]]></title>
    <link href="http://mishadoff.github.io/blog/programming-digest-4/"/>
    <updated>2013-11-25T22:50:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/programming-digest-4</id>
    <content type="html"><![CDATA[<p>How to live in the Kingdom of Nouns, why mathematicians cry, filling gaps in algorithms, portion of clojure, STM, HTTP and more.</p>

<!-- more -->

<h3 id="execution-in-the-kingdom-of-nounshttpsteve-yeggeblogspotcom200603execution-in-kingdom-of-nounshtml">1. <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Execution in the Kingdom of Nouns</a></h3>

<p>Another great Steve Yegge’s post. Not a post, a tale about <em>Javaland</em>, a place where all verbs are owned by nouns. Accept it like an analogy between OOP and FP.</p>

<blockquote>
  <p>Verbs in Javaland are responsible for all the work, but as they are held
in contempt by all, no Verb is ever permitted to wander about freely.
If a Verb is to be seen in public at all,
it must be escorted at all times by a Noun.</p>
</blockquote>

<p>Of course <em>to be escorted</em> must be replaced by <strong>VerbEscorter</strong>.</p>

<blockquote>
  <p>The Verb “execute”, and its synonymous cousins “run”, “start”, “go”,
“justDoIt”, “makeItSo”, and the like, can perform the work of any
other Verb by replacing it with an appropriate Executioner and a
call to execute(). Need to wait? Waiter.execute().
Brush your teeth? ToothBrusher(myTeeth).go().
Take out the garbage? TrashDisposalPlanExecutor.doIt().
No Verb is safe; all can be replaced by a Noun on the run.</p>
</blockquote>

<p>You are not forced to use functions everywhere, but use them where it is appropriate to simplify solution and avoid <a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">enterprise hell</a>. You know, not everything is an object. The same way not everything is a function. </p>

<h3 id="a-mathematicians-lamenthttpwwwmaaorgexternalarchivedevlinlockhartslamentpdf">2. <a href="http://www.maa.org/external_archive/devlin/LockhartsLament.pdf">A Mathematician’s Lament</a></h3>

<p>Long paper by Paul Lockhart about problems in mathematical education.</p>

<blockquote>
  <p>Math class is stupid and boring. - Students.</p>
</blockquote>

<p>Author claims that mathematics is an art, instead of some practical thing. Of course, it can be applied in real world and it is, but it’s not primary goal of math.</p>

<blockquote>
  <p>A mathematician, like a painter or poet is a maker
of patterns. If his patterns are more permanent than theirs,
it is because they are made wit <em>ideas</em>.</p>
</blockquote>

<p>Very exciting reading.</p>

<h3 id="algorithmshttpcstheorystackexchangecomquestions19759core-algorithms-deployed1977319773">3. <a href="http://cstheory.stackexchange.com/questions/19759/core-algorithms-deployed/19773#19773">Algorithms</a></h3>

<p>Algorithms are not just devils you need to learn for CS course or to prepare for interview. You can <em>apply</em> them to solve real-world problems. This SO answer provides links and some explanations where specific algorithm is used in linux kernel, chromium browser and some utils.</p>

<blockquote>
  <p>…
Red-Black trees are used for scheduling, virtual memory management,
to track file descriptors and directory entries, etc.</p>
</blockquote>

<blockquote>
  <p>grep, implements the Boyer-Moore algorithm</p>
</blockquote>

<blockquote>
  <p>fgrep implements the Aho-Corasick string matching algorithm.
…</p>
</blockquote>

<p>Even Bubblesort has its <a href="https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/drivers/media/common/saa7146/saa7146_hlp.c">application</a>!</p>

<h3 id="rich-hickeys-greatest-hitshttpthechangelogcomrich-hickeys-greatest-hits">4. <a href="http://thechangelog.com/rich-hickeys-greatest-hits/">Rich Hickey’s Greatest Hits</a></h3>

<p>I’m huge Rich Hickey’s fan. It’s just a list of his most interesting presentations. Definitely, must see.</p>

<p><img src="http://farm4.staticflickr.com/3229/2613013337_bcc9c7857d.jpg" alt="" /></p>

<ul>
  <li><a href="http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey">Are We There Yet (2009)</a></li>
  <li><a href="http://www.youtube.com/watch?v=f84n5oFoZBc">Hammock Driven Development (2010)</a></li>
  <li><a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple Made Easy (2011)</a></li>
  <li><a href="http://www.infoq.com/presentations/Value-Values">The Value of Values (2012)</a></li>
  <li><a href="http://www.youtube.com/watch?v=ROor6_NGIWU">The Language of the System (2012)</a></li>
  <li><a href="http://www.infoq.com/presentations/Design-Composition-Performance">Design, Composition and Performance (2013)</a></li>
</ul>

<h3 id="clojure-persistent-vectorhttphypirioncommusingsunderstanding-persistent-vector-pt-1">5. <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">Clojure Persistent Vector</a></h3>

<p>Two parts explanation how clojure vector works.</p>

<p>Yeah, simple square brackets <code>[1 2 3]</code> in clojure have a lot complex things under the hood. Moreover, it gives understanding not only how vectors work, but how all other persistent structures can be implemeted in efficient manner.</p>

<h3 id="software-transactional-memoryhttpjavaociwebcommarkstmarticlehtml">6. <a href="http://java.ociweb.com/mark/stm/article.html">Software Transactional Memory</a></h3>

<p>Have you heard about STM?</p>

<p>It’s a good model for concurrency control, like database transactions, but on memory. Much simpler and less error-prone to use. This article explain STM basics with some implementation details. </p>

<p>For my attempt to implement STM refer <a href="http://www.slideshare.net/mishadoff/implementing-stm-in-java">presentation</a></p>

<h3 id="a-software-developers-huide-to-httphttpodetocodecomarticles741aspx">7. <a href="http://odetocode.com/articles/741.aspx">A Software Developer’s Huide to HTTP</a></h3>

<p>Five Parts article of looking at HTTP from developer’s perspective. Worth reading to dig into some details. </p>

<h3 id="ideas-for-computinghttpsgithubcomsamsquireideas">8. <a href="https://github.com/samsquire/ideas">100 Ideas for Computing</a></h3>

<p>Great list, perhaps most ideas are already partially implemented.</p>

<blockquote>
  <p>This is a vision for how computing could be.
I began writing ideas down a number of years ago,
this is a selection of ideas old and new.</p>
</blockquote>

<p>Some of them are <a href="https://github.com/samsquire/ideas#68-right-click-outsource">great</a>:</p>

<blockquote>
  <p>Task management between computers is an unsolved problem in desktop
environments. Many users have multiple devices. Sending tasks,
inputs or outputs to different computers is painful. Usually sending
audio to be played through another computer, taking control of an
application running on another computer, sharing files or
streaming data to other machines requires special software. </p>
</blockquote>

<p>It would be great to have the same in reverse order also. I get a phone call, but phone is far away. Much better to click on current machine <em>Accept Call</em> and to talk. Security can be a challenging.</p>

<p>Some <a href="https://github.com/samsquire/ideas#18-shortcut-format">problematic</a>:</p>

<blockquote>
  <p>Keyboard shortcuts are configured differently in each program.
Shortcut configuration should be in a standard format.
This way you can load them and share them between operating
systems and share configurations between applications.</p>
</blockquote>

<p>This reminds me of xkcd comics:</p>

<p><img src="http://imgs.xkcd.com/comics/standards.png" alt="" /></p>

<p>Some ideas are <a href="https://github.com/samsquire/ideas#31-mounting-source-code">not so great</a>:</p>

<p><em>Mounting source code</em> does not solve a problem at all, it’s just adds a bit of sugar to project structure and adds more pain to build tools.</p>

<h3 id="top-10-lists-common-java-mistakeshttpjavadzonecomarticlestop-10-lists-common-java">9. <a href="http://java.dzone.com/articles/top-10-lists-common-java">Top 10 Lists Common Java Mistakes</a></h3>

<p>Metalist of Top 10 items of Top 10 java pitfalls.</p>

<p>Hundred times discussed, but if you are java programmer, you may refresh your knowledge. List of common java pitfalls includes:</p>

<blockquote>
  <p>Using Singletons</p>
</blockquote>

<blockquote>
  <p>The GOF religion</p>
</blockquote>

<blockquote>
  <p>Return null from API methods</p>
</blockquote>

<p>By the way, this list contains some other useful java things, like top 10 java people and top 15 worst Computer Software blunders. Not worst, but definitely bad.</p>

<h3 id="rare-are-gc-talkshttpfurious-waterfall-55herokucomruby-guideinternalsgchtml">10. <a href="http://furious-waterfall-55.heroku.com/ruby-guide/internals/gc.html">Rare Are GC Talks</a></h3>

<p>Different Garbage Collector algorithms briefly explained. Bookshelf used as an analogy:</p>

<blockquote>
  <p>Bookshelf - Memory, Books - Objects.</p>
</blockquote>

<p>Ruby GC implementation discussed, but you are not forced to know ruby to understand that. By the way, article contains a lot of links to more detailed GC algorithms explanation.</p>
]]></content>
  </entry>
  
</feed>
