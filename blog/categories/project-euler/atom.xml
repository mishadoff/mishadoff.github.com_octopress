<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: project-euler | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.io/blog/categories/project-euler/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.io/"/>
  <updated>2013-10-20T14:16:55+03:00</updated>
  <id>http://mishadoff.github.io/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 022]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-022/"/>
    <updated>2013-10-20T13:22:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-022</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Using <a href="http://projecteuler.net/project/names.txt">names.txt</a>
a 46K text file containing over five-thousand first names,
begin by sorting it into alphabetical order. Then working out the alphabetical
value for each name, multiply this value by its alphabetical
position in the list to obtain a name score.</p>

  <p>For example, when the list is sorted into alphabetical order,
COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.
So, COLIN would obtain a score of 938 x 53 = 49714.</p>

  <p>What is the total of all the name scores in the file?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=22">http://projecteuler.net/problem=22</a></p>

<!-- more -->

<p>Problem is very easy, assuming you know how to work with files.</p>

<p>First of all read the file, clojure has awesome simple function <code>slurp</code>, discussed in <a href="/blog/clojure-euler-problem-008">Clojure Euler: Problem 008</a>.</p>

<p><code>clojure
(slurp "names.txt")
</code></p>

<p>Then, you need to select all words in that file:</p>

<p><code>clojure
(re-seq #"\w+" (slurp "names.txt"))
</code></p>

<p>It return a list with the names. How that simple, yeah?</p>

<p>Next two steps are:</p>

<ul>
  <li>sort list in ascending order, what is done by calling <code>sort</code> function</li>
  <li>calculate score for each word</li>
</ul>

<p>By the way, <code>score</code> consists of two parts. First of all, you must calculate natural score of the word, without its actual position in sorted list, and then you must multiply that score on its position.</p>

<p>First part looks like this:</p>

<p><code>clojure
(defn score [string]
  (reduce + (map #(- (int %) 64) string)))
</code></p>

<p>Convert each character to its positional number in alphabet. For example the character &ldquo;A&rdquo; (<em>capitalized</em>) has ascii value of <code>65</code>. If we substract <code>64</code> it becomes <code>1</code>, what means &ldquo;A&rdquo; is a first letter in alphabet and so on.</p>

<p>To track positions in list we use
<a href="http://clojuredocs.org/clojure_core/clojure.core/map-indexed">map-indexed</a>
function. It works almost the same way as map, except it accept function of two arguments, index of item in current list, and item itself.</p>

<p>For example:</p>

<p><code>clojure
(map-indexed #(vec [%1 %2]) ["a" "b" "c"]) =&gt; ([0 "a"] [1 "b"] [2 "c"])
</code>
As indices start from zero, do not forget increment!</p>

<p>Bind all together</p>

<p><code>clojure
(reduce +
        (map-indexed #(* (inc %1) (score %2)) 
                     (sort (re-seq #"\w+" (slurp "names.txt"))))))
</code></p>

<p>Solved! <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem022.clj">Code is here</a></p>

<p><em>P.S.</em> Actually, this code is not elegant. We need to read from the end to the beginning of expression. And it can be solved by Threading Macro. Read the nice <strong>Fogus</strong> <a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">explanation</a></p>

<p>Our last solution, becomes transformed to:</p>

<p><code>clojure
(-&gt;&gt; "names.txt"
	(slurp)
	(re-seq #"\w+")
	(sort)
	(map-indexed #(* (inc %1) (score %2)))
	(reduce +))
</code></p>

<p>Way more readable, huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 021]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-021/"/>
    <updated>2013-10-05T15:24:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-021</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Evaluate the sum of all the amicable numbers under 10000.</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=21">http://projecteuler.net/problem=21</a></p>

<!-- more -->

<blockquote>
  <p>Let d(n) be defined as the sum of proper divisors of n
(numbers less than n which divide evenly into n).</p>

  <p>If d(a) = b and d(b) = a, where a != b, then a and b are an
amicable pair and each of a and b are called amicable numbers.</p>

  <p>For example, the proper divisors of 220 are
1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.
The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.</p>
</blockquote>

<p>We can do it <em>bruteforcely</em>, but we won&rsquo;t.</p>

<p>Let start with the function <code>d</code>. We call it <code>sum-of-proper-divisors</code></p>

<p><code>clojure
(defn sum-of-proper-divisors [n]
  (let [base (filter #(zero? (mod n %)) (range 2 (Math/sqrt n)))]
    (reduce + 1 (concat (map #(/ n %) base) base))))
</code></p>

<p>Bad approach to find all divisors: to iterate on all numbers from 1 to <code>n</code>
and check if it is divisor or not.
Instead, we iterate from 1 to <code>sqrt(n)</code>, find one divisor and
calculate another symmetric divisor.</p>

<p>For example, take number <code>10</code>.
We iterating from <code>2</code> to <code>(sqrt 10)</code>. Number <code>2</code> is divisor, so we divide <code>(/ 10 2)</code>, get <code>5</code> which is also divisor. And so on.</p>

<p>This is predicate checks where two numbers amicable or not:</p>

<p><code>clojure
(defn amicable? [a b]
  (and (not (= a b))
       (= a (sum-of-proper-divisors b))
       (= b (sum-of-proper-divisors a))))
</code></p>

<p>Obvious enough, just consider that we skip case where <code>(= a b)</code>.</p>

<p>The last part is to use our functions to obtain result.</p>

<p><code>clojure
(reduce +
  (let [sums (vec (map sum-of-proper-divisors (range 1 10000)))]
    (for [i (range 1 10000)]
      (if (amicable? i (nth sums (dec i))) i 0))))
</code></p>

<p>Just generate all sums, and check if another number <code>i</code> produce the amicable pair. Done!</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem021.clj">Code</a></p>

<p><strong>P.S.</strong> Take a look at the last snippet. <code>vec</code> is really important there.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 020]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-020/"/>
    <updated>2013-07-21T13:39:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-020</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Find the sum of the digits in the number 100!</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=20">http://projecteuler.net/problem=20</a></p>

<!-- more -->

<p>First of all we need to calculate factorial.
Without integer overflows, stack overflows and other caveats.</p>

<p>Previous article <a href="/blog/fast-factorial/">Fast Factorial</a> has working solution
that we might use.</p>

<p><code>
(defn ! [n]
  (reduce *' (range 1 (inc n))))
</code></p>

<p>Now, calculate the sum of digits, the same function that we used in
<a href="/blog/clojure-euler-problem-008/">Clojure Euler: Problem 008</a> and
<a href="/blog/clojure-euler-problem-016/">Clojure Euler: Problem 016</a></p>

<p><code>
(defn sum-of-digits [n]
  (reduce + (map #(- (int %) 48) (seq (str n)))))
</code></p>

<p>And the final line</p>

<p><code>
(sum-of-digits (! 100))
</code></p>

<p>Simple enough, huh?</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem020.clj">Code</a></p>

<p><strong>P.S.</strong> The functions <code>sum-of-digits</code>, <code>count-digits</code> and similar used often
and look very ugly, so I decided to create a separate set of functions (<em>library?</em>)
which I can refer. It should be a set of common mathematic functions, including
different sequences, sums, converters, interesting numbers. You might use it too.
Welcome to <a href="https://github.com/mishadoff/numberto/">numberto</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 019]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-019/"/>
    <updated>2013-07-10T01:59:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-019</id>
    <content type="html"><![CDATA[<blockquote>
  <p>How many Sundays fell on the first of the month
during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=19">http://projecteuler.net/problem=19</a></p>

<!-- more -->

<p>Project Euler also gives following information:</p>

<ul>
  <li>1 Jan 1900 was a Monday.</li>
  <li>
    <p>A poem</p>

    <p>Thirty days has September,<br />
April, June and November.<br />
All the rest have thirty-one,<br />
Saving February alone,<br />
Which has twenty-eight, rain or shine.<br />
And on leap years, twenty-nine.<br /></p>
  </li>
  <li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li>
</ul>

<p>Implementin calendars logic is great, but java interoperability is much better!</p>

<p>First of all, take standard java <code>GregorianCalendar</code> class.
We can import it <em>almost</em> the same way as we use <code>require</code> </p>

<p><code>clojure
(import [java.util GregorianCalendar])
</code></p>

<p>To create an object use function <code>new</code></p>

<p><code>clojure
(new GregorianCalendar)
</code></p>

<p>But it is more idiomatic way to create java objects with special syntax:
<em>period after class name</em> </p>

<p><code>clojure
(GregorianCalendar.)
</code></p>

<p>To configure calendar object to specific date we need to set some its
properties. Setters syntax is following (assuming <code>calendar</code>
is an object of calendar):</p>

<p>Java</p>

<p><code>java 
calendar.set(GregorianCalendar.YEAR, 2013);
</code></p>

<p>Clojure</p>

<p><code>clojure
(.set calendar GregorianCalendar/YEAR 2013)
</code></p>

<p>Executing lot of setters is the same boilerplate as in java:</p>

<p><code>clojure
(do
  (.set calendar GregorianCalendar/YEAR 2013)
  (.set calendar GregorianCalendar/MONTH 11)
  (.set calendar GregorianCalendar/DAY_OF_MONTH 1))
</code></p>

<p>To avoid repetition of object name we can use <code>doto</code> macro:</p>

<p><code>clojure
(doto (GregorianCalendar.)
  (.set GregorianCalendar/YEAR 2013)
  (.set GregorianCalendar/MONTH 11)
  (.set GregorianCalendar/DAY_OF_MONTH 1))
</code></p>

<p>This macro <em>magically</em> performs the same set of operations as above, but in more readable way.</p>

<p>Now we can create calendar objects for the <em>first of the
specific month of the specific year</em></p>

<p><code>clojure
(defn calendar-for [year month]
  (doto (GregorianCalendar.)
    (.set GregorianCalendar/YEAR year)
    (.set GregorianCalendar/MONTH month)
    (.set GregorianCalendar/DAY_OF_MONTH 1)))
</code></p>

<p>Just iterate through all such objects in date range given in problem definition
and count Sundays.</p>

<p><code>clojure
(reduce +
  (for [year (range 1901 (inc 2000)) month (range 1 (inc 12))]
    (let [c (calendar-for year month)]
          (if (= GregorianCalendar/SUNDAY 
                 (.get c GregorianCalendar/DAY_OF_WEEK)) 1 0))))
</code></p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem019.clj">Problem solved</a>!</p>

<p><strong>P.S.</strong> Java interoperability is ugly but still useful. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 018]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-018/"/>
    <updated>2013-05-17T00:26:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-018</id>
    <content type="html"><![CDATA[<blockquote>
  <p>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</p>
</blockquote>

<p><code>
       3
      7 4
     2 4 6
    8 5 9 3
</code></p>

<blockquote>
  <p>That is, 3 + 7 + 4 + 9 = 23.</p>

  <p>Find the maximum total from top to bottom of the triangle below:</p>

  <p>[Check out big triangle in original link]</p>

  <p>NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route.
However, Problem 67, is the same challenge with a triangle containing one-hundred rows;
it cannot be solved by brute force, and requires a clever method! ;o)</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=18">http://projecteuler.net/problem=18</a></p>

<!-- more -->

<p>As note says we can try every route and it will be just good.
Instead of that, we can behave much better with clever method.</p>

<p>(Some time ago, I gave basic explanation on my approach in <a href="http://stackoverflow.com/questions/8002252/euler-project-18-approach">StackOverflow question</a>)</p>

<p>We have example triangle:</p>

<p><code>
       3
      7 4
     2 4 6
    8 5 9 3
</code></p>

<p>Instead of testing each route from top to the bottom, we moving from bottom
to the top and always select the best choice. As we want to find the max sum, we perform addition im place.</p>

<p>Assuming we on the 3rd line (2 4 6).</p>

<p><strong>From 2</strong> we can go either 8 or 5, 8 is better (maximize your sum), then you calculate first
sum <code>8 + 2 = 10</code>.</p>

<p><strong>From 4</strong> we can go either 5 or 9, 9 is better, <code>4 + 9 = 13</code>.</p>

<p><strong>From 6</strong> we can go either 9 or 3, 9 is better, <code>9 + 6 = 15</code>.</p>

<p>Now, we removing last row, because we processed all routes and selected best ones, and replacing
3rd row with calculated sums. Current triangle looks like:</p>

<p><code>
        3
      7  4
    10 13 15
</code></p>

<p>Repeat the same action until we get one number, which will be solution.</p>

<p>Let&rsquo;s transform this idea to clojure.</p>

<p>First of all we need datastructure to represent triangle.
List of lists would be good:</p>

<p><code>clojure
(def triangle '((3) (7 4) (2 4 6) (8 5 9 3)))
</code></p>

<p>Now we want to know, what direction generates the best sum.</p>

<p><code>clojure
(defn max-row [lst]
  (map #(reduce max %) (partition 2 1 lst)))
</code></p>

<p>It breaks list to pairs, and select max from each pair.
For example, <code>[8 5 9 3]</code> we split to <code>[[8 5] [5 9] [9 3]]</code>
and select max from each sublist <code>[8 9 9]</code>.</p>

<p>Just add this list to previous one</p>

<p><code>clojure
(defn step-max [lst1 lst2]
  (map + (max-row lst1) lst2))
</code></p>

<p>One iteration of <code>step-max</code> creates smaller triangle with sums on the bottom row.
But we need only one number.</p>

<p>Correct, <code>reduce</code> is ideal!</p>

<p><code>clojure
(reduce step-max (reverse triangle))
</code></p>

<p>That&rsquo;s it.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem018.clj">code</a></p>

<p><strong>P.S.</strong> Problem 067 can be solved with the same code.</p>
]]></content>
  </entry>
  
</feed>
