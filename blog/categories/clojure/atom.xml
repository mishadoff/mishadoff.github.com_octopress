<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.io/"/>
  <updated>2014-03-29T02:44:40+02:00</updated>
  <id>http://mishadoff.github.io/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Numberto: Expressions]]></title>
    <link href="http://mishadoff.github.io/blog/numberto-expressions/"/>
    <updated>2014-03-29T00:25:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/numberto-expressions</id>
    <content type="html"><![CDATA[<p>Numberto has new features!</p>

<!-- more -->

<p>In <a href="/blog/announcing-numberto">previous post</a>
I wrote about simple clojure library <a href="https://github.com/mishadoff/numberto">numberto</a> for experiments with numbers.</p>

<p>New version of <em>numberto</em> has a bunch of new features.</p>

<h3 id="expressions">Expressions</h3>

<p>Expressions package provides two functions: <code>eval-infix</code> to evaluate infix expression
and <code>infix-&gt;prefix</code> to build prefix lisp-style expression from mathematical notation.</p>

<p>Let’s give it alias for simplicity</p>

<p><code>clojure
(def e eval-infix)
</code></p>

<p>Evaluate simple math expression</p>

<p><code>clojure
(e "1+2") =&gt; 3
</code></p>

<p>or more complex</p>

<p><code>clojure
(e "1+2*(3-4/2)") =&gt; 3
</code></p>

<p>handle priorities</p>

<p><code>clojure
(e "2+2*2") =&gt; 6
</code></p>

<p>and left/right associativity</p>

<p><code>clojure
(e "1024/2/2/2/2") =&gt; 64
(e "2^3^4") =&gt; 2417851639229258349412352N
</code></p>

<p>Oh, what’s this? Long numbers? Sure, ratios and floats supported as well</p>

<p><code>clojure
(e "1/3") =&gt; 1/3
(e "1.1/0.9") =&gt; 1.2222222222222223
</code></p>

<p>Unary operations</p>

<p><code>clojure
(e "(-1)^100") =&gt; 1
</code></p>

<p>functions and symbols</p>

<p><code>clojure
(e "sin(e) + sqrt(pi)") =&gt; 2.183235141408425
</code></p>

<p>vararg functions</p>

<p><code>clojure
(e "sum(1,2,3,sum())/max(1,2)") =&gt; 3
</code></p>

<p>You can also provide bindings for unknown functions and symbols</p>

<p><code>clojure
(e "factorial(n)/20"
   {:bindings
     {"factorial" #(reduce *' (range 1 (inc %)))
      "n" 10}})
=&gt; 181440
</code></p>

<p>Worth to mention that you can easily redefine existing
or define your own new unary, binary operations, functions
and symbols. Just add additional properties to <code>eval-infix</code></p>

<p><code>clojure
;; return current time in millis
(e "now()" {:bindings {"now" #(.getTime (java.util.Date.))}}) =&gt; some long number
;; override priorities
(e "1+2*3" {:binary-ops {"+" {:function + :priority 100}}}) =&gt; 9
</code></p>

<p><code>infix-&gt;prefix</code> has exactly the same functionality, but it builds prefix expression instead.</p>

<p><code>clojure
(infix-&gt;prefix "(1+2)*3-(4/avg(3,5)-sum(1))")
=&gt;
"(- (* (+ 1 2) 3) (- (/ 4 (avg 3 5)) (sum 1)))"
</code></p>

<p>It can be useful if you googled some formula but bored to translate it manually to clojure.</p>

<p>For example, take the <a href="http://en.wikipedia.org/wiki/Simpson%27s_rule">Simpson’s rule</a></p>

<p><img src="http://upload.wikimedia.org/math/1/a/0/1a0fb4456375307fdde8ab85954d95be.png" alt="" /></p>

<p><code>clojure
(infix-&gt;prefix "(b-a)/6*(f(a)+4*f((a+b)/2)+f(b))")
=&gt;
"(* (/ (- b a) 6) (+ (+ (f a) (* 4 (f (/ (+ a b) 2)))) (f b)))"
</code></p>

<h4 id="implementation">Implementation</h4>

<p>Would be good to try <a href="https://github.com/Engelberg/instaparse">instaparse</a> for such purpose,
but I decided to use custom implementation using standard
<a href="http://en.wikipedia.org/wiki/Shunting-yard_algorithm">Shunting-yard algorithm</a>.
Just couple of hacks added to handle unaries and vararg functions.
Code is awful. If you really want to dig in - run debug mode.</p>

<p><code>clojure
(binding [*DEBUG* true]
  (e "1+2"))
</code></p>

<h4 id="limitations">Limitations</h4>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>No way to define non-prefix unary operation, like “10!” or “</td>
          <td>10</td>
          <td>”</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Can not handle simplified math form, like “2x^2 + 3^x + 5”.
Multiplication sign should be declared explicitly</li>
  <li>Not able to simplify ops in lisp-style expression. <code>(* (* 1 2) 3)</code> instead of <code>(* 1 2 3)</code></li>
  <li>False positives handling. Some stupid expressions indicates about error <code>(e "1+")</code>, some not <code>(e "1+()1)</code>. I still working on this, but it is not critical.</li>
</ul>

<h3 id="solvers">Solvers</h3>

<p>Here is the puzzle:</p>

<blockquote>
  <p>You have four numbers [3, 4, 5, 6].<br />
You have four binary operations [+, -, *, /] and parentheses ()</p>

  <p>How to insert operations between numbers to get number 42?</p>
</blockquote>

<p>Hah, that simple <code>3*4 + 5*6 = 42</code></p>

<p>Ok, get <code>42</code>, but you forced to use one division <code>/</code>.</p>

<p>Not so obvious?</p>

<p><code>
(solve-insert-ops-num [3 4 5 6] 42) =&gt;
([42N "3+45-6"] [42N "3/4*56"] [42N "3*4+5*6"])
</code></p>

<p>If you use <code>solve-insert-ops</code> function it gives all possible values can be obtained by inserting operations between numbers.</p>

<p><code>clojure
(solve-insert-ops [3 4 5 6]) =&gt; ;; long list
</code></p>

<p>Default implementation uses 4 basic operations, no parens and no restrictions. Instead, you can override options</p>

<p>to use parens, specify level</p>

<p><code>clojure
(solve-insert-ops-num [3 4 5 6] 42 {:parens 1}) =&gt;
([42N "3+45-6"] [42N "(3+45)-6"] [42N "3+(45-6)"]
 [42N "3/4*56"] [42N "(3/4)*56"] [42N "3/(4/56)"]
 [42N "3*4+5*6"] [42N "(3*4)+5*6"] [42N "3*4+(5*6)"])
</code></p>

<p>limit some operations</p>

<p><code>clojure
(solve-insert-ops-num [3 4 5 6] 42 {:rules [[:max "*" 1]]}) =&gt;
([42N "3+45-6"] [42N "3/4*56"])
</code></p>

<p><code>:max</code>, <code>:min</code>, <code>:max-in-a-row</code>, <code>:min-in-a-row</code> options are supported.</p>

<p>Add new operations (supported by expressions package)</p>

<p><code>clojure
(solve-insert-ops-num [3 4 5 6] 80
                      {:ops ["+" "-" "*" "/" "^"]
                       :rules [[:max "^" 1]]}) =&gt;
([80N "3^4+5-6"])
</code></p>

<p>Keep in mind, always limit time consuming operations (<em>like</em> <code>^</code>) as it builds all possible permutations and you can wait your answer forever.</p>

<p>There are also couple of <em>new</em> interesting things, like
getting digits of <code>pi</code>, <code>e</code>, <code>sqrt(n)</code>, ratio numbers up to desired level and other. <a href="https://github.com/mishadoff/numberto/blob/master/doc/intro.md">Check it out</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 022]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-022/"/>
    <updated>2013-10-20T13:22:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-022</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Using <a href="http://projecteuler.net/project/names.txt">names.txt</a>
a 46K text file containing over five-thousand first names,
begin by sorting it into alphabetical order. Then working out the alphabetical
value for each name, multiply this value by its alphabetical
position in the list to obtain a name score.</p>

  <p>For example, when the list is sorted into alphabetical order,
COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.
So, COLIN would obtain a score of 938 x 53 = 49714.</p>

  <p>What is the total of all the name scores in the file?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=22">http://projecteuler.net/problem=22</a></p>

<!-- more -->

<p>Problem is very easy, assuming you know how to work with files.</p>

<p>First of all read the file, clojure has awesome simple function <code>slurp</code>, discussed in <a href="/blog/clojure-euler-problem-008">Clojure Euler: Problem 008</a>.</p>

<p><code>clojure
(slurp "names.txt")
</code></p>

<p>Then, you need to select all words in that file:</p>

<p><code>clojure
(re-seq #"\w+" (slurp "names.txt"))
</code></p>

<p>It return a list with the names. How that simple, yeah?</p>

<p>Next two steps are:</p>

<ul>
  <li>sort list in ascending order, what is done by calling <code>sort</code> function</li>
  <li>calculate score for each word</li>
</ul>

<p>By the way, <code>score</code> consists of two parts. First of all, you must calculate natural score of the word, without its actual position in sorted list, and then you must multiply that score on its position.</p>

<p>First part looks like this:</p>

<p><code>clojure
(defn score [string]
  (reduce + (map #(- (int %) 64) string)))
</code></p>

<p>Convert each character to its positional number in alphabet. For example the character “A” (<em>capitalized</em>) has ascii value of <code>65</code>. If we substract <code>64</code> it becomes <code>1</code>, what means “A” is a first letter in alphabet and so on.</p>

<p>To track positions in list we use
<a href="http://clojuredocs.org/clojure_core/clojure.core/map-indexed">map-indexed</a>
function. It works almost the same way as map, except it accept function of two arguments, index of item in current list, and item itself.</p>

<p>For example:</p>

<p><code>clojure
(map-indexed #(vec [%1 %2]) ["a" "b" "c"]) =&gt; ([0 "a"] [1 "b"] [2 "c"])
</code>
As indices start from zero, do not forget increment!</p>

<p>Bind all together</p>

<p><code>clojure
(reduce +
        (map-indexed #(* (inc %1) (score %2)) 
                     (sort (re-seq #"\w+" (slurp "names.txt"))))))
</code></p>

<p>Solved! <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem022.clj">Code is here</a></p>

<p><em>P.S.</em> Actually, this code is not elegant. We need to read from the end to the beginning of expression. And it can be solved by Threading Macro. Read the nice <strong>Fogus</strong> <a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">explanation</a></p>

<p>Our last solution, becomes transformed to:</p>

<p><code>clojure
(-&gt;&gt; "names.txt"
	(slurp)
	(re-seq #"\w+")
	(sort)
	(map-indexed #(* (inc %1) (score %2)))
	(reduce +))
</code></p>

<p>Way more readable, huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 021]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-021/"/>
    <updated>2013-10-05T15:24:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-021</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Evaluate the sum of all the amicable numbers under 10000.</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=21">http://projecteuler.net/problem=21</a></p>

<!-- more -->

<blockquote>
  <p>Let d(n) be defined as the sum of proper divisors of n
(numbers less than n which divide evenly into n).</p>

  <p>If d(a) = b and d(b) = a, where a != b, then a and b are an
amicable pair and each of a and b are called amicable numbers.</p>

  <p>For example, the proper divisors of 220 are
1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.
The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.</p>
</blockquote>

<p>We can do it <em>bruteforcely</em>, but we won’t.</p>

<p>Let start with the function <code>d</code>. We call it <code>sum-of-proper-divisors</code></p>

<p><code>clojure
(defn sum-of-proper-divisors [n]
  (let [base (filter #(zero? (mod n %)) (range 2 (Math/sqrt n)))]
    (reduce + 1 (concat (map #(/ n %) base) base))))
</code></p>

<p>Bad approach to find all divisors: to iterate on all numbers from 1 to <code>n</code>
and check if it is divisor or not.
Instead, we iterate from 1 to <code>sqrt(n)</code>, find one divisor and
calculate another symmetric divisor.</p>

<p>For example, take number <code>10</code>.
We iterating from <code>2</code> to <code>(sqrt 10)</code>. Number <code>2</code> is divisor, so we divide <code>(/ 10 2)</code>, get <code>5</code> which is also divisor. And so on.</p>

<p>This is predicate checks where two numbers amicable or not:</p>

<p><code>clojure
(defn amicable? [a b]
  (and (not (= a b))
       (= a (sum-of-proper-divisors b))
       (= b (sum-of-proper-divisors a))))
</code></p>

<p>Obvious enough, just consider that we skip case where <code>(= a b)</code>.</p>

<p>The last part is to use our functions to obtain result.</p>

<p><code>clojure
(reduce +
  (let [sums (vec (map sum-of-proper-divisors (range 1 10000)))]
    (for [i (range 1 10000)]
      (if (amicable? i (nth sums (dec i))) i 0))))
</code></p>

<p>Just generate all sums, and check if another number <code>i</code> produce the amicable pair. Done!</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem021.clj">Code</a></p>

<p><strong>P.S.</strong> Take a look at the last snippet. <code>vec</code> is really important there.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing numberto]]></title>
    <link href="http://mishadoff.github.io/blog/announcing-numberto/"/>
    <updated>2013-09-01T04:23:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/announcing-numberto</id>
    <content type="html"><![CDATA[<p>All you need to play with numbers!</p>

<!-- more -->

<p><a href="https://github.com/mishadoff/numberto">numberto</a>
- simple clojure library with a bunch of functions operating on numbers.</p>

<p>I created this project for two reasons:</p>

<ol>
  <li>Solving problems on <a href="http://projecteuler.net">Project Euler</a>, <a href="http://www.4clojure.com/">4Clojure</a> and just playground with numbers needed common functions. I just extracted them to separate util library.</li>
  <li>Practice to develop clojure project with unit tests, continuos integration, documentation and publishing to clojars.</li>
</ol>

<h3 id="get-it">Get it</h3>

<p>Current version is <code>0.0.2</code> available to download on
<a href="https://clojars.org/numberto/versions/0.0.2">Clojars</a> or
as lein dependency <code>[numberto "0.0.2"]</code></p>

<h3 id="example-usage">Example usage</h3>

<p><code>clojure
(number-&gt;roman 19) =&gt; "XIX"
(take 10 fibonacci) =&gt; (1 1 2 3 5 8 13 21 34 55)
(shift-right 123456789 3) =&gt; 789123456
(count-digits (! 100000)) =&gt; 456574
(factorize 234) =&gt; [2 3 3 13]
</code></p>

<p>Can you read long numbers?</p>

<p><code>clojure 
(number-name 16532561257523723757234781264) =&gt;
"sixteen octillion five hundred thirty two septillion five hundred sixty one sextillion
two hundred fifty seven quintillion five hundred twenty three quadrillion seven hundred
twenty three trillion seven hundred fifty seven billion two hundred thirty four million
seven hundred eighty one thousand two hundred sixty four"
</code></p>

<h3 id="structure">Structure</h3>

<p>Each logical set of functions moved to separate namespace. Here is the list of namespaces:</p>

<ul>
  <li><strong>Converters</strong>.
number to digits, char to digit, roman to arabic</li>
  <li><strong>Math</strong>.
Often used functions, such as <code>count-digits</code>, <code>shuffle-num</code>, <code>reverse-num</code> and some from common math <code>abs</code>, <code>gcd</code>, <code>lcm</code></li>
  <li><strong>Seqs</strong>.
Various lazy sequences: <code>fibonacci</code>, <code>farey</code>, <code>palindromes</code>.</li>
  <li><strong>Primes</strong>.
Prime numbers lazy sequence, factorization and totient function</li>
  <li><strong>Factorial</strong>.
Standard and Improved version of factorial</li>
  <li><strong>Generators</strong>.
Generate random numbers</li>
  <li><strong>Printers</strong>.
Pretty print for long numbers</li>
</ul>

<p>Check out <a href="https://github.com/mishadoff/numberto/blob/master/doc/intro.md">detailed intro</a></p>

<p><strong>P.S.</strong> I still experimenting, so expect a lot of changes between versions until make something stable. Comments and advices are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Golf: Brainfuck Interpreter]]></title>
    <link href="http://mishadoff.github.io/blog/code-golf-brainfuck-interpreter/"/>
    <updated>2013-08-09T17:44:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/code-golf-brainfuck-interpreter</id>
    <content type="html"><![CDATA[<p>Brainfuck Interpreter in two tweets.</p>

<!-- more -->

<p>Previous article <a href="/blog/code-golf-game-of-life/">Code Golf: Game of Life</a> raised some interest, and I decided to proceed. Today’s problem is a Brainfuck Interpreter.</p>

<p><a href="http://en.wikipedia.org/wiki/Brainfuck">Brainfuck</a> is an esoteric programming language, famous because of its small command set. It is based on array of cells (Turing Tape) and pointer to this array. There are only 8 commands: </p>

<ul>
  <li><code>&gt;</code> move to the next cell</li>
  <li><code>&lt;</code> move to the previous cell</li>
  <li><code>+</code> increment value in the current cell</li>
  <li><code>-</code> decrement value in the current cell</li>
  <li><code>.</code> print char with ascii value of current cell</li>
  <li><code>,</code> read ascii value for input char to the current cell</li>
  <li><code>[</code> start loop until value of pointer is not zero </li>
  <li><code>]</code> finish loop</li>
</ul>

<p>That’s all. Brainfuck is <a href="http://en.wikipedia.org/wiki/Turing_completeness">Turing Complete</a> language, that means it capable to implement any program. If you crazy, of course.</p>

<h3 id="tweet">Tweet</h3>

<p>Final version took <code>280</code> characters in Clojure:</p>

<p><code>clojure
(fn[a p k c](let[h #(nth %1@%2)e #(h a p)s #(swap! %1%2 1)t
#(aset a@p(%(e)1))l #(do(s k %)(case(h c k)\]()\[()(recur %)
))](while(&gt;(count c)@k)(do(case(h c k)\&gt;(s p +)\&lt;(s p -)\+
(t +)\-(t -)\.(print(char(e)))\,(aset a@p(.read *in*))\[(if
(=(e)0)(l +))\](if(&gt;(e)0)(l -)))(s k +)))))
</code></p>

<p>Exactly 2 tweets.</p>

<h3 id="sugared-version">“Sugared” version</h3>

<p>Translating to more readable code:</p>

<p><code>clojure
(defn parse-internal [a pt pc cs]
  (letfn [(act []
            (case (nth cs @pc)
              \&gt; (swap! pt inc)
              \&lt; (swap! pt dec)
              \+ (aset a @pt (inc (nth a @pt))) 
              \- (aset a @pt (dec (nth a @pt)))
              \. (print (char (nth a @pt)))
              \, (aset a @pt (.read *in*))
              \[ (if (zero? (nth a @pt)) (loop- inc))
              \] (if-not (zero? (nth a @pt)) (loop- dec))))
          (loop- [f]
            (do (swap! pc f)
                (case (nth cs @pc)
                  \[ ()
                  \] () 
                  (recur f))))]
    (while (not= (count cs) @pc)
      (do
        (act)
        (swap! pc inc)))))
</code></p>

<p>So, what’s happening there?</p>

<p>Function arguments are parameters of our tape and brainfuck program.</p>

<ul>
  <li><code>a</code> is an array represents finite tape <code>e.g (int-array 100)</code></li>
  <li><code>pt</code> is an atom - pointer to the tape</li>
  <li><code>pc</code> is an atom - pointer to the command list</li>
  <li><code>cs</code> command list</li>
</ul>

<p>Function <code>act</code> decides which action to perform depending on current command,
<code>loop</code> allows us to move command pointer inside a loop,
and main <code>while-do</code> loop executes commands until they exhausted. Simple enough.</p>

<p>To make our interpreter more friendly we create function <code>parse</code> that accepts
string - program, written in brainfuck.</p>

<p><code>clojure
(defn parse [s]
  (let [a (int-array 100)  ;; Turing Tape
        p (atom 0)         ;; Pointer to Tape
        k (atom 0)         ;; Pointer to Command
        c (vec (seq s))]   ;; Vector of Commands
    (parse-internal a p k c)))
</code></p>

<h4 id="testing">Testing</h4>

<p>Print “Hello, world”</p>

<p><code>clojure
(parse "++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]
        &gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;
        .+++.------.--------.&gt;+.&gt;.") =&gt;
Hello World!
</code></p>

<p>Input 5 characters and reverse print them</p>

<p><code>clojure
(parse ",&gt;,&gt;,&gt;,&gt;,.&lt;.&lt;.&lt;.&lt;.") =&gt; &lt;wait input "hello"&gt;
olleh
</code></p>

<p>More complex program need nested loops, which is not supported by
this version (<em>for the sake of small size!</em>)</p>

<p>History of implementation, nested loops and more available <a href="https://github.com/mishadoff/prog-experiment/blob/master/clojure/brainfuck.clj">here</a></p>

<p><strong>P.S.</strong> This version is not “fully-featured” brainfuck interpreter.</p>

<ul>
  <li>It does not work for inifinite tape</li>
  <li>Cell datatype is fixed and not assumed to be cyclic. For example, if cell type is unsigned byte <code>[0..255]</code>, then <code>255 + 1 != 0</code> and break interpreter</li>
  <li>Only unsigned types supported</li>
  <li>Nested loops are not allowed</li>
  <li>No error handling</li>
</ul>

<p>But, you are welcome to improve it!</p>
]]></content>
  </entry>
  
</feed>
