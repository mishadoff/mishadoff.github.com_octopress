<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2013-03-07T18:00:59+02:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Golf: Game of Life]]></title>
    <link href="http://mishadoff.github.com/blog/code-golf-game-of-life/"/>
    <updated>2013-03-07T17:59:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/code-golf-game-of-life</id>
    <content type="html"><![CDATA[<p>Conway’s Game of Life in a tweet.</p>

<!-- more -->

<p>Recently, my friend pointed out me an article <a href="http://trelford.com/blog/post/140.aspx">Life in a tweet</a>
where <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a> was implemented in one tweet
(<em>less than 140 characters</em>) in Ruby and F#. I took this challenge.</p>

<h3 id="tweet">Tweet</h3>

<p>Here is the final version in <code>137</code> characters of Clojure:</p>

<p><code>clojure
(fn[g r](reduce(fn[i j](update-in i j(fn[v](get[v 1]
(-(apply +(map #(get-in g% 0)(for[a[-1 0 1]b[-1 0 1]]
(map + j[a b]))))v 2)0))))g r))
</code></p>

<h3 id="sugared-version">“Sugared” version</h3>

<p>Translate tweet to more readable code:</p>

<p><code>clojure
(defn step-sugar [grid range]
  (let [count-neighbours ;; determine number of neighbours
        (fn[[i j]]
          (reduce + (map #(get-in grid % 0)
                         (for[a [-1 0 1] b [-1 0 1]]
                           [(+ i a) (+ j b)]))))
        new-value  ;; calculate new value for cell
        (fn [v [i j]]
          (let [c (- (count-neighbours [i j]) v)]
            (cond (= 3 c) 1
                  (= 2 c) v
                  :else 0)))
        evolve-cell ;; update cell in a grid
        (fn[g i] (update-in g i #(new-value % i)))]
    (reduce evolve-cell grid range)))
</code></p>

<p>Actually, this version is cheating,
due to passing one extra-parameter <code>range</code> that contains all indices
need to be updated in form <code>[[0 1] [1 1]]...</code></p>

<p>On the other side it gives us two features:</p>

<ul>
  <li><strong>Works for rectangular grid</strong>. Although, initial
implementation assumes the world is square.</li>
  <li><strong>Specific part of world can be updated</strong>. It gives possibility
to update specific area in the world, for example <em>west organisms evolve faster</em>.</li>
</ul>

<p>To use this function you need:</p>

<ul>
  <li>World</li>
</ul>

<p><code>clojure
(def grid [[0 0 0]
           [1 1 1]
           [0 0 0]])
</code></p>

<ul>
  <li>Evolution</li>
</ul>

<p><code>clojure
(defn evolution [g]
  (let [p (count g) q (count (get g 0))
        range (for [i (range p) j (range q)][i j])]
    (iterate #(step-sugar % range) g)))
</code></p>

<ul>
  <li>Visualization</li>
</ul>

<p><code>clojure
(defn print-grid [g]
  (doseq [s (map #(apply str (replace {0 "." 1 "⚫"} %)) g)]
    (println s)))
</code></p>

<h3 id="testing">Testing</h3>

<p>To make sure results are correct use the following
<code>run</code> function and compare results to some common
<a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Examples_of_patterns">examples</a>.</p>

<p><code>clojure
(defn run [grid]
  (doseq [g (evolution grid)]
    (print-grid g)
    (Thread/sleep 1000)))
</code></p>

<p>Pattern examples:</p>

<p>``` clojure
(def block [[0 0 0 0]
            [0 1 1 0]
            [0 1 1 0]
            [0 0 0 0]])</p>

<p>(def glider [[0 0 1 0 0 0 0 0]
             [1 0 1 0 0 0 0 0]
             [0 1 1 0 0 0 0 0]
             [0 0 0 0 0 0 0 0]
             [0 0 0 0 0 0 0 0]
             [0 0 0 0 0 0 0 0]])
```</p>

<p>Full history of implementation and more life patterns
<a href="https://github.com/mishadoff/prog-experiment/blob/master/clojure/life.clj">available here</a></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 016]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-016/"/>
    <updated>2013-03-05T01:31:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-016</id>
    <content type="html"><![CDATA[<blockquote>
  <p>2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.</p>

  <p>What is the sum of the digits of the number 2^1000 ?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=16">http://projecteuler.net/problem=16</a></p>

<!-- more -->

<p>Are you kidding me?</p>

<ul>
  <li>Find 1000th <em>power of two</em></li>
  <li>Sum its digits</li>
</ul>

<p>In <a href="/blog/clojure-euler-problem-008/">Clojure Euler: Problem 008</a> we
learned how to sum digits in the number. Just gentle reminder:</p>

<p><code>clojure
(defn sum-of-digits [n]
  (reduce + (map #(- (int %) 48) (seq (str n)))))
</code></p>

<p>Now, let’s create sequence of powers of two:</p>

<p><code>clojure
(defn powers-of-2 []
  (iterate (partial * 2) 1))
</code></p>

<p>Unfortunately, this sequence throws <code>integer overflow</code> on the <code>64th</code> element.
We can fix that using <em>long arithmetics</em>, which known as <code>BigInteger</code> in Java.
Change <code>1</code> to <code>1N</code>.</p>

<p><code>clojure
(iterate (partial * 2) 1N)
</code></p>

<p>Another way is to use <strong>automatic promotion</strong> operator (<code>+'</code>, <code>*'</code>).
If result of some operation is not suitable for some type,
instead of invalid computation and runtime exception, clojure automatically promotes
the type to suitable one (<em>for example</em> <code>Long.MAX_VALUE +' 1</code> <em>works fine and produces
 correct result with type of</em> <code>BigInteger</code>):</p>

<p><code>clojure
(iterate (partial *' 2) 1)
</code></p>

<p>Choose <code>powers-of-2</code> that you prefer and final result will look like this:</p>

<p><code>clojure
(sum-of-digits (last (take 1001 (powers-of-2))))
</code></p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem016.clj">github</a></p>

<p><strong>P.S.</strong> Automatic promotion is a beatiful thing. But be aware about losing in
speed of calculations. Also, no way back. If promotion happened, <em>depromotion</em> won’t.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Magic. Part 4: sun.misc.Unsafe]]></title>
    <link href="http://mishadoff.github.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/"/>
    <updated>2013-02-26T02:37:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe</id>
    <content type="html"><![CDATA[<p>Java is a safe programming language and prevents programmer
from doing memory corruption mistakes. But, there is a way to
do such <em>mistakes</em> intentionally, using <code>Unsafe</code> class.</p>

<p>This article is quick overview of <code>sun.misc.Unsafe</code> <em>public</em> API and few
interesting cases of its usage.</p>

<!-- more -->

<h3 id="unsafe-instantiation">Unsafe instantiation</h3>

<p>Before usage, we need to create instance of <code>Unsafe</code> object.
There is no simple way to do it like <code>Unsafe unsafe = new Unsafe()</code>,
because <code>Unsafe</code> class has private constructor and <code>getUnsafe()</code> method
available only from trusted code.</p>

<p>We can make our code “trusted”.</p>

<p><code>Unsafe</code> class contains its instance called <code>theUnsafe</code>, which marked as <code>private</code>.
We can steal that variable via java reflection.</p>

<p><code>java
Field f = Unsafe.class.getDeclaredField("theUnsafe");
f.setAccessible(true);
Unsafe unsafe = (Unsafe) f.get(null);
</code></p>

<p><em>Note:</em> Ignore your IDE. For example, eclipse show error “Access restriction…”
but if you run code, all works just fine. If the error is annoying, ignore errors on
<code>Unsafe</code> usage in:</p>

<pre><code>Preferences -&gt; Java -&gt; Compiler -&gt; Errors/Warnings -&gt;
Deprecated and restricted API -&gt; Forbidden reference -&gt; Warning
</code></pre>

<h3 id="unsafe-api">Unsafe API</h3>

<p>Class <a href="http://www.docjar.com/docs/api/sun/misc/Unsafe.html">sun.misc.Unsafe</a>
consists of <code>105</code> methods. There are, actually,
few groups of important methods for manipulating with various entities.
Here is some of them:</p>

<ul>
  <li><strong>Info</strong>. Just returns some low-level memory information.
    <ul>
      <li><code>addressSize</code></li>
      <li><code>pageSize</code></li>
    </ul>
  </li>
  <li><strong>Objects</strong>. Provides methods for object and its fields manipulation.
    <ul>
      <li><code>allocateInstance</code></li>
      <li><code>objectFieldOffset</code></li>
    </ul>
  </li>
  <li><strong>Classes</strong>. Provides methods for classes and static fields manipulation.
    <ul>
      <li><code>staticFieldOffset</code></li>
      <li><code>defineClass</code></li>
      <li><code>defineAnonymousClass</code></li>
      <li><code>ensureClassInitialized</code></li>
    </ul>
  </li>
  <li><strong>Arrays</strong>. Arrays manipulation.
    <ul>
      <li><code>arrayBaseOffset</code></li>
      <li><code>arrayIndexScale</code></li>
    </ul>
  </li>
  <li><strong>Synchronization</strong>. Low level primitives for synchronization.
    <ul>
      <li><code>monitorEnter</code></li>
      <li><code>tryMonitorEnter</code></li>
      <li><code>monitorExit</code></li>
      <li><code>compareAndSwapInt</code></li>
      <li><code>putOrderedInt</code></li>
    </ul>
  </li>
  <li><strong>Memory</strong>. Direct memory access methods.
    <ul>
      <li><code>allocateMemory</code></li>
      <li><code>copyMemory</code></li>
      <li><code>freeMemory</code></li>
      <li><code>getAddress</code></li>
      <li><code>getInt</code></li>
      <li><code>putInt</code></li>
    </ul>
  </li>
</ul>

<h3 id="interesting-use-cases">Interesting use cases</h3>

<h4 id="avoid-initialization">Avoid initialization</h4>

<p><code>allocateInstance</code> method can be <em>useful</em> when you need to skip object initialization phase
or bypass security checks in constructor. Consider following class:</p>

<p>``` java
class A {
    private long a; // not initialized value</p>

<pre><code>public A() {
    this.a = 1; // initialization
}

public long a() { return this.a; } } ```
</code></pre>

<p>Instantiating it using constructor, reflection and unsafe gives
different results.</p>

<p>``` java
A o1 = new A(); // constructor
o1.a(); // prints 1</p>

<p>A o2 = A.class.newInstance(); // reflection
o2.a(); // prints 1</p>

<p>A o3 = (A) unsafe.allocateInstance(A.class); // unsafe
o3.a(); // prints 0
```</p>

<h4 id="sizeof"><strong>sizeOf</strong></h4>

<p>Using <code>objectFieldOffset</code> method we can implement C-style <code>sizeof</code> function.
This implementation returns <em>shallow</em> size of object:</p>

<p>``` java
public static long sizeOf(Object o) {
    Unsafe u = getUnsafe();
    HashSet<field> fields = new HashSet<field>();
    Class c = o.getClass();
    while (c != Object.class) {
        for (Field f : c.getDeclaredFields()) {
            if ((f.getModifiers() &amp; Modifier.STATIC) == 0) {
                fields.add(f);
            }
        }
        c = c.getSuperclass();
    }</field></field></p>

<pre><code>// get offset
long maxSize = 0;
for (Field f : fields) {
    long offset = u.objectFieldOffset(f);
    if (offset &gt; maxSize) {
        maxSize = offset;
    }
}

return ((maxSize/8) + 1) * 8;   // padding } ```
</code></pre>

<p>Algorithm is the following: go through all <em>non-static</em> fields including all
superclases, get offset for each field, find maximum and add padding.
Probably, I missed something, but idea is clear.</p>

<p>In fact, for good and accurate <code>sizeof</code> function better to use
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html">java.lang.instrument</a> package</p>

<h4 id="big-arrays"><strong>Big Arrays</strong></h4>

<p>As you know <code>Integer.MAX_VALUE</code> constant is a max size of java array.
Using direct memory allocation we can create arrays with size limited by only heap size.</p>

<p>Here is <code>SuperArray</code> implementation:</p>

<p>``` java
class SuperArray {
    private final static int BYTE = 1;</p>

<pre><code>private long size;
private long address;

public SuperArray(long size) {
    this.size = size;
    address = getUnsafe().allocateMemory(size * BYTE);
}

public void set(long i, byte value) {
    getUnsafe().putByte(address + i * BYTE, value);
}

public int get(long idx) {
    return getUnsafe().getByte(address + idx * BYTE);
}

public long size() {
    return size;
} } ```
</code></pre>

<p>And sample usage:</p>

<p><code>java
long SUPER_SIZE = (long)Integer.MAX_VALUE * 2;
SuperArray array = new SuperArray(SUPER_SIZE);
System.out.println("Array size:" + array.size()); // 4294967294
for (int i = 0; i &lt; 100; i++) {
    array.set((long)Integer.MAX_VALUE + i, (byte)3);
    sum += array.get((long)Integer.MAX_VALUE + i);
}
System.out.println("Sum of 100 elements:" + sum);  // 300
</code></p>

<h4 id="memory-corruption">Memory corruption</h4>

<p>This one is usual for every C programmer.
By the way, its common technique for security bypass.</p>

<p>Consider some easy class that check acces rules:</p>

<p>``` java
class Guard {
    private int ACCESS_ALLOWED = 1;</p>

<pre><code>public boolean giveAccess() {
    return 42 == ACCESS_ALLOWED;
} } ```
</code></pre>

<p>The client code is <em>very secure</em> and calls
<code>giveAccess()</code> to check access rules. Unfortunately, for clients,
it always returns <code>false</code>. Only privileged users <em>somehow</em> can change
value of <code>ACCESS_ALLOWED</code> constant and get access.</p>

<p>In fact, it’s not true. Here is the code demostrates it:</p>

<p>``` java
Guard guard = new Guard();
guard.giveAccess();   // false, no access</p>

<p>// bypass
Unsafe unsafe = getUnsafe();
Field f = guard.getClass().getDeclaredField(“ACCESS_ALLOWED”);
unsafe.putInt(guard, unsafe.objectFieldOffset(f), 42); // memory corruption</p>

<p>guard.giveAccess(); // true, access granted
```</p>

<p>Now all clients will get unlimited access.</p>

<h4 id="concurrency">Concurrency</h4>

<p><code>compareAndSwap</code> methods are atomic and can be used to implement
high-performance lock-free data structures.</p>

<p>For example, consider the problem to increment value in the shared object
using lot of threads.</p>

<p>First we define simple interface <code>Counter</code>:</p>

<p><code>java
interface Counter {
    void increment();
    long getCounter();
}
</code></p>

<p>Then we define worker thread <code>CounterClient</code>, that uses <code>Counter</code>:</p>

<p>``` java
class CounterClient implements Runnable {
    private Counter c;
    private int num;</p>

<pre><code>public CounterClient(Counter c, int num) {
    this.c = c;
    this.num = num;
}

@Override
public void run() {
    for (int i = 0; i &lt; num; i++) {
        c.increment();
    }
} } ```
</code></pre>

<p>And this is testing code:</p>

<p><code>java
int NUM_OF_THREADS = 1000;
int NUM_OF_INCREMENTS = 100000;
ExecutorService service = Executors.newFixedThreadPool(NUM_OF_THREADS);
Counter counter = ... // creating instance of specific counter
long before = System.currentTimeMillis();
for (int i = 0; i &lt; NUM_OF_THREADS; i++) {
    service.submit(new CounterClient(counter, NUM_OF_INCREMENTS));
}
service.shutdown();
service.awaitTermination(1, TimeUnit.MINUTES);
long after = System.currentTimeMillis();
System.out.println("Counter result: " + c.getCounter());
System.out.println("Time passed in ms:" + (after - before));
</code></p>

<p>First implementation is not-synchronized counter:</p>

<p>``` java
class StupidCounter implements Counter {
    private long counter = 0;</p>

<pre><code>@Override
public void increment() {
    counter++;
}

@Override
public long getCounter() {
    return counter;
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 99542945
Time passed in ms: 679
</code></p>

<p>Working fast, but no threads management at all, so result is inaccurate.
Second attempt, add easiest java-way synchronization:</p>

<p>``` java
class SyncCounter implements Counter {
    private long counter = 0;</p>

<pre><code>@Override
public synchronized void increment() {
    counter++;
}

@Override
public long getCounter() {
    return counter;
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 10136
</code></p>

<p>Radical synchronization always work. But timings is awful.
Let’s try <code>ReentrantReadWriteLock</code>:</p>

<p>``` java
class LockCounter implements Counter {
    private long counter = 0;
    private WriteLock lock = new ReentrantReadWriteLock().writeLock();</p>

<pre><code>@Override
public void increment() {
    lock.lock();
    counter++;
    lock.unlock();
}

@Override
public long getCounter() {
    return counter;
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 8065
</code></p>

<p>Still correct, and timings are better. What about atomics?</p>

<p>``` java
class AtomicCounter implements Counter {
    AtomicLong counter = new AtomicLong(0);</p>

<pre><code>@Override
public void increment() {
    counter.incrementAndGet();
}

@Override
public long getCounter() {
    return counter.get();
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 6552
</code></p>

<p><code>AtomicCounter</code> is even better. Finally, try <code>Unsafe</code>
primitive <code>compareAndSwapLong</code> to see if it is really privilegy to use it.</p>

<p>``` java
class CASCounter implements Counter {
    private long counter = 0;
    private Unsafe unsafe;
    private long offset;</p>

<pre><code>public CASCounter() throws Exception {
    unsafe = getUnsafe();
    offset = unsafe.objectFieldOffset(CASCounter.class.getDeclaredField("counter"));
}

@Override
public void increment() {
    long before = counter;
    while (!unsafe.compareAndSwapLong(this, offset, before, before + 1)) {
        before = counter;
    }
}

@Override
public long getCounter() {
    return counter;
} ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 6454
</code></p>

<p>Hmm, seems equal to atomics. Maybe atomics use <code>Unsafe</code>? (<em>YES</em>)</p>

<p>In fact this example is easy enough, but it shows real power of <code>Unsafe</code>.</p>

<h3 id="bonus">Bonus</h3>

<p>Documentation for <code>park</code> method from <code>Unsafe</code> class contains
longest English sentence I’ve ever seen:</p>

<blockquote>
  <p>Block current thread, returning when a balancing
unpark occurs, or a balancing unpark has
already occurred, or the thread is interrupted, or, if not
absolute and time is not zero, the given time nanoseconds have
elapsed, or if absolute, the given deadline in milliseconds
since Epoch has passed, or spuriously (i.e., returning for no
“reason”). Note: This operation is in the Unsafe class only
because unpark is, so it would be strange to place it
elsewhere.</p>
</blockquote>

<h3 id="conclusion">Conclusion</h3>

<p>Although, <code>Unsafe</code> has a bunch of useful applications, never use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 015]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-015/"/>
    <updated>2013-02-19T00:38:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-015</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Starting in the top left corner of a 2 x 2 grid, there are 6 routes
(without backtracking) to the bottom right corner.</p>

  <p>How many routes are there through a 20 x 20 grid?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=15">http://projecteuler.net/problem=15</a></p>

<!-- more -->

<p><img src="http://projecteuler.net/project/images/p_015.gif" alt="" /></p>

<p>Picture is always a huge help to find correct the solution.
Let’s see the pattern here, with another picture</p>

<p><em>Warning:</em> If you don’t understand art, don’t look at that picture.</p>

<p><img src="http://i.imgur.com/WNEQNxG.png" alt="" /></p>

<p>It’s a solution for 3 x 3 grid. We trying to process it by steps:</p>

<ul>
  <li>At the start we located at the top left corner <code>[0, 0]</code>. There is just one case
to be at the start so we put <code>1</code> to that point.</li>
  <li>Then we move either down <code>[1, 0]</code> or right <code>[0, 1]</code>, and we put <code>1</code>
on the edges of the second diagonal line.</li>
  <li>Obviously, the point <code>[1, 1]</code> we can reach either from <code>[0, 1]</code> or from <code>[1, 0]</code>,
so there are two routes, and so on.</li>
</ul>

<p>If you just output the numbers from each diagonal line you’ll get:</p>

<p>```
       1
      1 1
     1 2 1
    1 3 3 1</p>

<p>```</p>

<p>It’s famous <a href="http://en.wikipedia.org/wiki/Pascal%27s_triangle">Pascal’s triangle</a>.
Each element in this triangle obtained by sum of two closest elements from the upper row.</p>

<p>To get desired result we need to sum these numbers again, until we get one number.
But it’s also numbers from Pascal’s triangle.</p>

<p><code>
    1   3   3   1
      4   6   4
       10  10
         20
</code></p>

<p>We can treat Pascal’s triangle as a sequence, and each row is an element. Then the
following function calculates next row:</p>

<p><code>clojure
(defn routes-extend [lst]
  (let [size (count lst)]
    (for [i (range (inc size))]
      (if (or (= 0 i) (= size i)) 1
        (+ (nth lst (dec i)) (nth lst i))))))
</code></p>

<p>Usage:</p>

<p><code>
(routes-extend [1]) =&gt; [1 1]
(routes-extend [1 1]) =&gt; [1 2 1]
</code></p>

<p>Now we can build infinite sequence of Pascal’s triangle rows:</p>

<p><code>clojure
(iterate routes-extend [1])
</code></p>

<p>For <code>3 x 3</code> grid we had 7 diagonals, each of them represented one row.
Take a guess. For <code>n x n</code> grid we need to get <code>2 * n + 1</code> row. And take it
middle element, which, of course, will be with the index <code>n</code>.</p>

<p>That’s the final solution:</p>

<p><code>clojure
(let [n 20 d (inc (* n 2))]
  (nth (last (take d (iterate routes-extend [1]))) n))
</code></p>

<p>Problem solved.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem015.clj">Code</a></p>

<p><strong>P.S</strong> Two points I want to admit here. First of all, drawing pictures
and trying to understand problem with pictures is a powerful technique that must be
used for every problem.</p>

<p>Second of all, you can see that our algorithm has complexity of <code>O(n^2)</code>. But ideal
solution is <code>O(1)</code> with usage <a href="http://en.wikipedia.org/wiki/Binomial_coefficient">binomial coefficient</a>
<code>(2*n, n)</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standard ML]]></title>
    <link href="http://mishadoff.github.com/blog/standard-ml/"/>
    <updated>2013-02-16T13:33:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/standard-ml</id>
    <content type="html"><![CDATA[<p>Last weekend I was hacking <a href="http://en.wikipedia.org/wiki/Standard_ML">Standard ML</a> a bit.</p>

<!-- more -->

<h3 id="coursera">Coursera</h3>

<p>There are excellent course on coursera called <a href="https://class.coursera.org/proglang-2012-001/class/index">Programming Languages</a></p>

<p>Currently, the first half is available, that explains basic and advanced functional programming constructions
with Standard ML as primary language. Later some idioms will be presented using
<strong>Racket</strong> and <strong>Ruby</strong> (<em>maybe, I will finally understand ruby</em>) so you can treat this course as introduction
to these languages. In fact, it teaches much more than “<em>how to code in XXX</em>”.</p>

<h3 id="tools">Tools</h3>

<p>For playing with ML you need <a href="http://www.smlnj.org/">SML/NJ</a> compiler and
<a href="http://www.smlnj.org/doc/Emacs/sml-mode.html">sml-mode</a> for emacs.</p>

<p><em>If you don’t have emacs installed, do it right now!</em></p>

<h3 id="play">Play</h3>

<p>Following snippets give you basic understanding of ML or
refresh your knowledge for syntax.</p>

<p>Print “Hello, world!”:</p>

<p><code>sml
fun print_hello_world () = print "Hello, world\n";
</code></p>

<p>Variables (<em>in fact, values</em>):</p>

<p><code>sml
val a = 38;
val b = a + 3;
val c = b + 1;
</code></p>

<p>Conditionals:</p>

<p><code>sml
val cond = if 5 &gt; 4 then 5 else 4
</code></p>

<p>Boolean operators have terrible names:</p>

<p><code>sml
val cond2 = if 5 &gt; 4 andalso 4 &gt; 5 then 5 else 7
</code></p>

<p>Function with one parameter:</p>

<p><code>sml
fun square x = x * x
</code></p>

<p>Function with more than one parameter:</p>

<p><code>sml
fun sum (x, y, z) = x + y + z
</code></p>

<p>Actually, it’s not three parameters, it’s one parameter - tuple:</p>

<p><code>sml
fun swap (x, y) = (y, x)
</code></p>

<p>To access tuple elements use hash-number, note you can specify tuple type:</p>

<p><code>sml
fun get_month (date : int * string * int) : string= (#2 date)
val month1 = get_month(2012, "January", 21);
</code></p>

<p>You can specify input types and return type, but ML is very clever. Almost always
it can detect correct type using <em>type inference</em> without explicit definition.</p>

<p><em>I don’t understand it! Explain, please</em>. Comments:</p>

<p><code>sml
(* Operation '*' defined for int types, so this function has type int -&gt; int *)
fun cube x = x * x * x
</code></p>

<p>There is records. It’s like named tuples.</p>

<p><code>sml
fun get_month_real ({year, month, day}) = month
val month2 = get_month_real({year=2012, month="January", day=21});
</code></p>

<p>Using <code>let</code> form we can define new lexical scope:</p>

<p><code>sml
fun add3 x =
    let
        val num = 3
    in
        x + 3
    end
</code></p>

<p>This leads to closures (<em>function + context</em>):</p>

<p><code>sml
fun add3 x =
    let
        val num = 3
        fun add_to x = x + num
    in
        add_to x
    end
</code></p>

<p>Function <code>add_to</code> capture <code>num</code> value from context.</p>

<p>By the way functions are first-class objects and values also,
so we can assign one function to another:</p>

<p><code>sml
val another_cube = cube
</code></p>

<p>Function composition becomes a piece of cake:</p>

<p><code>sml
val cube_and_cube = cube o cube
</code></p>

<p>We even can pass function as a parameter:</p>

<p><code>sml
fun binary_apply (f, x, y) = f (x, y)
binary_apply(swap, 1, 2);
</code></p>

<p>We don’t forced to provide function name, we can use lambdas:</p>

<p><code>sml
binary_apply(fn (x, y) =&gt; x * y, 23, 46)
</code></p>

<p>This helps us easily implement such useful functions as <code>map</code>, <code>reduce</code> and <code>filter</code>.
But they are already available in
<a href="http://www.standardml.org/Basis/manpages.html">Standard ML Basis Library</a></p>

<p>Another great feature is <em>pattern-matching</em>. Here is factorial function</p>

<p><code>sml
fun factorial x =
    case x of
        0 =&gt; 1
      | _ =&gt; x * factorial(x - 1)
</code></p>

<p>or list concatenation</p>

<p><code>sml
fun concat (x, y) =
    case x of
        [] =&gt; y
      | x::xs =&gt; x::concat(xs, y)
</code></p>

<p>Honestly, it’s just baby examples of pattern matching. In fact, it is much more
powerful.</p>

<p>And the last thing I wanted to show is datatypes:</p>

<p>To define a list:</p>

<p><code>sml
datatype 'a list = EMPTY | CONS of 'a * 'a list
</code></p>

<p>To create that list:</p>

<p><code>sml
val list = CONS(1, CONS(2, CONS(3, EMPTY)))
</code></p>

<p>That’s very small part of all that can be done in ML. There are also a lot of useful
constructs and idioms that not covered: type synonyms, polymorphic types,
equality types, tail recursion, mutual recursion, function wrapping,
currying, partial application, advanced pattern matching, signatures,
modules and lot more.</p>

<p>If you really interested you will find a lot of these terms exciting.</p>

<p>Full code is available on
<a href="https://github.com/mishadoff/prog-experiment/blob/master/sml/play.sml">github</a></p>

<h3 id="impressions">Impressions</h3>

<p>ML is a great language. Perhaps, it is not so great as Java in enterprise, and not
so great as Clojure in rapid prototyping, but it’s worth to devote
few days for ML basics. It really improve your dev skills and maybe made your
<em>Factories</em>, <em>Bridges</em> and <em>Proxies</em> better.</p>
]]></content>
  </entry>
  
</feed>
