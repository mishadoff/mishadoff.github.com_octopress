<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2013-04-22T14:44:47+03:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming Digest 2]]></title>
    <link href="http://mishadoff.github.com/blog/programming-digest-2/"/>
    <updated>2013-04-22T14:43:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/programming-digest-2</id>
    <content type="html"><![CDATA[<p>Why math is needed for developers, what is REST, how to become experienced
developer…in 10 years, “coding it’s just writing” and some practice:
Naive Bayes Classifier, functional programming and Java 8.</p>

<!-- more -->

<h3 id="math-for-programmershttpsteve-yeggeblogspotcom200603math-for-programmershtml">1. <a href="http://steve-yegge.blogspot.com/2006/03/math-for-programmers.html">Math For Programmers</a></h3>

<p>Another great post by Steve Yegge about math. Math for developers.
As everyone might to retort, knowing math is not mandatory for software engineering field, but you know:</p>

<blockquote>
  <p>Math is… ummm, please don’t tell anyone I said this;
I’ll never get invited to another party as long as I live.
But math, well… I’d better whisper this, so listen up: (it’s actually kinda fun.)</p>
</blockquote>

<p>I totally agree. It’s a lot of fun.
Just read subreddit <a href="http://www.reddit.com/r/math/">math</a>, even if you don’t understand anything.</p>

<p>Pick your favourite math subject and try to dig more.
Statistics, Linear Algebra, Discrete Math, Combinatorics, Operation Research, Group Theory
and more; one of them can be a good start.</p>

<p>Does that really helps? Well, maybe. But it’s definitely improve your problem solving skill.</p>

<p>And believe. Math makes you a <em>better</em> programmer.</p>

<h3 id="how-i-explained-rest-to-my-wifehttptomaykocomwritingsrest-to-my-wife">2. <a href="http://tomayko.com/writings/rest-to-my-wife">How I Explained REST to My Wife</a></h3>

<p>Good article about how web works. I found it very useful for understanding
some parts I thought I understood. By the way, great examples.</p>

<blockquote>
  <p>Ryan: I can’t drive a cup and I can’t drink a car. But some verbs are almost universal like GET, PUT, and DELETE.</p>

  <p>Wife: You can’t DELETE a cup.</p>

  <p>Ryan: Well, okay, but you can throw it away.</p>
</blockquote>

<p>Unfortunately, author of this article take it down due to lot of complaints about
article gender-oriented nature. I don’t think it’s offensive and here is the link with
<a href="http://web.archive.org/web/20130116005443/http://tomayko.com/writings/rest-to-my-wife">copy from web archive</a></p>

<h3 id="programmer-competency-matrixhttpwwwindiangeeknetwp-contentuploadsprogrammer20competency20matrixhtm">3. <a href="http://www.indiangeek.net/wp-content/uploads/Programmer%20competency%20matrix.htm">Programmer Competency Matrix</a></h3>

<p>Do you think you are great programmer? Test yourself.</p>

<p><strong>Algorithms</strong></p>

<ul>
  <li><strong>2^n (Level 0)</strong>. Unable to find the average of numbers in an array
(It’s hard to believe but I’ve interviewed such candidates)</li>
  <li><strong>n^2 (Level 1)</strong>. Basic sorting, searching and data structure traversal and retrieval algorithms</li>
  <li><strong>n (Level 2)</strong>. Tree, Graph, simple greedy and divide and conquer algorithms, is able to understand
the relevance of the levels of this matrix.</li>
  <li><strong>log(n) (Level 3)</strong>. Able to recognize and code dynamic programming solutions, good knowledge of graph algorithms,
good knowledge of numerical computation algorithms, able to identify NP problems etc.</li>
</ul>

<p>In any case, this <em>test</em> helps you to build plan for programming
related skills and gives understanding what you need to know to become an expert.</p>

<h3 id="teach-yourself-programming-in-ten-yearshttpnorvigcom21-dayshtml">4. <a href="http://norvig.com/21-days.html">Teach Yourself Programming in Ten Years</a></h3>

<p>Article by Peter Norvig.
Great guy, I got to know from <a href="https://www.ai-class.com/">Artificial Intelligence</a> course.</p>

<p>His writing is critique of popular books, like “Learn Java in 21 Days”.
Peter explains that it is impossible to be a great
engineer in such short period, and to become an expert you need aproximately 10 years.</p>

<p>It reminds me a picture “How to become a C++ Developer in 21 Days”:</p>

<p><img src="http://i.imgur.com/3FckcgF.png" alt="" /></p>

<p>If you totally disagree with his idea, just test yourself in previous article.</p>

<h3 id="on-being-a-senior-engineerhttpwwwkitchensoapcom20121025on-being-a-senior-engineer">5. <a href="http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">On Being A Senior Engineer</a></h3>

<p>And logically continue. What behaviour differentiate senior engineer from “not senior” one?</p>

<blockquote>
  <p>Mature engineers seek out constructive criticism of their designs.</p>
</blockquote>

<p>Actually you could find more useful rules there and list of
<strong>The Ten Commandments of Egoless Programming</strong>.</p>

<blockquote>
  <ol>
    <li>Understand and accept that you will make mistakes.</li>
    <li>You are not your code.</li>
    <li>No matter how much “karate” you know, someone else will always know more.</li>
    <li>Don’t rewrite code without consultation.</li>
    <li>Treat people who know less than you with respect, deference, and patience.</li>
    <li>The only constant in the world is change. Be open to it and accept it with a smile.</li>
    <li>The only true authority stems from knowledge, not from position.</li>
    <li>Fight for what you believe, but gracefully accept defeat.</li>
    <li>Don’t be “the coder in the corner.”</li>
    <li>Critique code instead of people – be kind to the coder, not to the code.</li>
  </ol>
</blockquote>

<p>Note, that article touch some psychological aspect of person. So I don’t
think it can be 100% applied to everyone, but still worth to read.</p>

<h3 id="coding-its-just-writinghttpwwwcodinghorrorcomblog200811coding-its-just-writinghtml">6. <a href="http://www.codinghorror.com/blog/2008/11/coding-its-just-writing.html">Coding: It’s Just Writing</a></h3>

<p>Jeff Atwood explais basic the idea of:</p>

<blockquote>
  <p>The unexpected relationship between writing code and writing.</p>
</blockquote>

<p>To write good code, you must write good.</p>

<p>Article contains a reference to the book “The Elements of Style” with some quotes.</p>

<blockquote>
  <p>Vigorous writing is concise. A sentence should contain no unnecessary words,
a paragraph no unnecessary sentences, for the same reason that a drawing should
have no unnecessary lines and a machine no unnecessary parts.
This requires not that the writer make all his sentences short,
or that he avoid all detail and treat his subjects only in outline, but that every word tell.</p>
</blockquote>

<p>Read this book. Perhaps it is boring, it contains some advices to improve you writing skills.</p>

<h3 id="how-to-build-a-naive-bayes-classifierhttpswwwbionicspiritcomblog20120209howto-build-naive-bayes-classifierhtml">7. <a href="https://www.bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html">How To Build a Naive Bayes Classifier</a></h3>

<p>Now some practice.</p>

<p>Article is great explanation of how Naive Bayes Classifier work.
With pictures, code examples, common pitfalls and good sense of humour.</p>

<p>Although, it’s one of the simplest classification algorithms, but with some tweeks and
good train set it can give good results.</p>

<p><img src="https://www.bionicspirit.com/assets/img/conditional-prob-9a27ee0e.png" alt="" /></p>

<p>Here is the place where the math is needed. But article is so great,
that even monkey with banana (and degree in math) can understand how it works.</p>

<h3 id="functors-applicatives-and-monads-in-pictureshttpaditioposts2013-04-17-functorsapplicativesandmonadsinpictureshtml">8. <a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">Functors, Applicatives, And Monads In Pictures</a></h3>

<p>Number of articles that explain what is monad grow fast. Just another one.</p>

<p>Even if you don’t understand what Haskell and monad is, look at the cool pictures.</p>

<p><img src="http://adit.io/imgs/functors/fmap_just.png" alt="" /></p>

<h3 id="list-out-of-lambdahttpsteveloshcomblog201303list-out-of-lambda">9. <a href="http://stevelosh.com/blog/2013/03/list-out-of-lambda/">List Out Of Lambda</a></h3>

<p>Good introduction to functional programming. Not for beginners, I think.</p>

<blockquote>
  <p>This blog post is a thought exercise.
It’s not something you’d ever use for real code.
But just like a guitarist practices scales that she won’t ever play in a song,
we programmers should be exercising our brains every so often.</p>
</blockquote>

<p>How to implement fancy list, map, filter features with just
first-class functions. Basic operations on numbers included. JavaScript.</p>

<h3 id="everything-about-java-8httpwwwtechempowercomblog20130326everything-about-java-8">10. <a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">Everything about Java 8</a></h3>

<p>Let’s review again what will be in Java 8. Most wanted release ever.</p>

<p>In this overview you will test other important changes, not only lambdas.</p>

<p><em>Sad, that release postponed to early 2014 due to security issues.</em>
<em>But more time to play with developer preview features.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 017]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-017/"/>
    <updated>2013-04-09T21:13:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-017</id>
    <content type="html"><![CDATA[<blockquote>
  <p>If the numbers 1 to 5 are written out in words: one, two, three, four, five,
then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.</p>

  <p>If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=17">http://projecteuler.net/problem=17</a></p>

<!-- more -->

<p>To solve this problem we need some sort of mapping that defines association
between number and its string representation, e.g <code>123 = one hundred and twenty three</code>.</p>

<p>This can be done with maps in clojure in form <code>{:1 "one" :2 "two"}</code>.
But if pay more atention to this map, we see that key is a numeric value.
Exactly what plain arrays do.</p>

<p>Then we just define all mappings, obtain all arrays string elements, find their lengths and sum them.</p>

<p>One problem that providing mapping for each number between 1 and 1000 is a “bit” routine task, so we
need some formula to calculate representation instead of hardcoding it. We come to defining groups.</p>

<p>First group is just <em>first 20</em> numbers:</p>

<p><code>clojure
(def first20 ["one" "two" "three" "four" "five"
              "six" "seven" "eight" "nine" "ten"
              "eleven" "twelve" "thirteen" "fourteen" "fifteen"
              "sixteen" "seventeen" "eighteen" "nineteen"])
</code></p>

<p>Note: there is no “zero” as we don’t use it in spoken language.</p>

<p>Second group is numbers that divides 10:</p>

<p><code>clojure
(def decas ["" "ten" "twenty" "thirty" "forty" "fifty" "sixty" "seventy" "eighty" "ninety"])
</code></p>

<p>Note: empty first element here is used to reduce additional check. Its length is 0, that has no effect at all.</p>

<p>And the last ones are three used values:</p>

<p><code>clojure
(def h "hundred")
(def t "thousand")
(def a "and")
</code></p>

<p>The basic function will calculate the length string representation of some number.
Let’s call it <code>word-length</code>.</p>

<p><code>clojure
(defn word-length [n]
  (cond (= n 1000) (+ (count t) (count (nth first20 1)))
        (&lt; n 100)
        (let [q (quot n 10) m (mod n 10)
              d (count (nth decas q))]
          (if (zero? m) d
              (if (&lt; q 2) (count (nth first20 (dec (+ m (* 10 q)))))
                  (+ d (count (nth first20 (dec m)))))))
        (&lt; n 1000)
        (let [q (quot n 100) m (mod n 100)]
          (if (zero? m) (+ (word-length q) (count h))
              (+ (count a) (count h) (word-length q) (word-length m))))))
</code></p>

<p>Little explanation:</p>

<ul>
  <li>If number is <code>1000</code> then the length of string “one” + “thousand”, 11.</li>
  <li>If number is lower than <code>100</code> then extract its decade part. If there is no
reminder for division by 10, the length is length of that decade part.</li>
  <li>Otherwise, if number in <code>first20</code>, length taken from array <code>first20</code>.</li>
  <li>Otherwise the length is decade part plus remainder.</li>
  <li>If number is lower than <code>1000</code> then extract hundred part. If there is no
reminder for division by 100, the length is “hundred” plus number of hundreds.</li>
  <li>Otherwise, the length is “hundred” plus number of hundreds, plus the word “and” and
recursively calculate the length of remainder, which is lower than <code>100</code>.</li>
</ul>

<p>Awful word-presentation of algorithm, because of… Reading code is much simpler, I know.</p>

<p>And the last part just sum up all word-lengths:</p>

<p><code>clojure
(reduce + (map word-length (range 1 1001)))
</code></p>

<p>Check the code <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem017.clj">here</a>.</p>

<p>P.S. In fact algorithm is very simple, but needs some time to understand few branches.
By the way, the problem is little boring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Golf: Game of Life]]></title>
    <link href="http://mishadoff.github.com/blog/code-golf-game-of-life/"/>
    <updated>2013-03-07T17:59:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/code-golf-game-of-life</id>
    <content type="html"><![CDATA[<p>Conway’s Game of Life in a tweet.</p>

<!-- more -->

<p>Recently, my friend pointed out me an article <a href="http://trelford.com/blog/post/140.aspx">Life in a tweet</a>
where <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a> was implemented in one tweet
(<em>less than 140 characters</em>) in Ruby and F#. I took this challenge.</p>

<h3 id="tweet">Tweet</h3>

<p>Here is the final version in <code>137</code> characters of Clojure:</p>

<p><code>clojure
(fn[g r](reduce(fn[i j](update-in i j(fn[v](get[v 1]
(-(apply +(map #(get-in g% 0)(for[a[-1 0 1]b[-1 0 1]]
(map + j[a b]))))v 2)0))))g r))
</code></p>

<h3 id="sugared-version">“Sugared” version</h3>

<p>Translate tweet to more readable code:</p>

<p><code>clojure
(defn step-sugar [grid range]
  (let [count-neighbours ;; determine number of neighbours
        (fn[[i j]]
          (reduce + (map #(get-in grid % 0)
                         (for[a [-1 0 1] b [-1 0 1]]
                           [(+ i a) (+ j b)]))))
        new-value  ;; calculate new value for cell
        (fn [v [i j]]
          (let [c (- (count-neighbours [i j]) v)]
            (cond (= 3 c) 1
                  (= 2 c) v
                  :else 0)))
        evolve-cell ;; update cell in a grid
        (fn[g i] (update-in g i #(new-value % i)))]
    (reduce evolve-cell grid range)))
</code></p>

<p>Actually, this version is cheating,
due to passing one extra-parameter <code>range</code> that contains all indices
need to be updated in form <code>[[0 1] [1 1]]...</code></p>

<p>On the other side it gives us two features:</p>

<ul>
  <li><strong>Works for rectangular grid</strong>. Although, initial
implementation assumes the world is square.</li>
  <li><strong>Specific part of world can be updated</strong>. It gives possibility
to update specific area in the world, for example <em>west organisms evolve faster</em>.</li>
</ul>

<p>To use this function you need:</p>

<ul>
  <li>World</li>
</ul>

<p><code>clojure
(def grid [[0 0 0]
           [1 1 1]
           [0 0 0]])
</code></p>

<ul>
  <li>Evolution</li>
</ul>

<p><code>clojure
(defn evolution [g]
  (let [p (count g) q (count (get g 0))
        range (for [i (range p) j (range q)][i j])]
    (iterate #(step-sugar % range) g)))
</code></p>

<ul>
  <li>Visualization</li>
</ul>

<p><code>clojure
(defn print-grid [g]
  (doseq [s (map #(apply str (replace {0 "." 1 "⚫"} %)) g)]
    (println s)))
</code></p>

<h3 id="testing">Testing</h3>

<p>To make sure results are correct use the following
<code>run</code> function and compare results to some common
<a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Examples_of_patterns">examples</a>.</p>

<p><code>clojure
(defn run [grid]
  (doseq [g (evolution grid)]
    (print-grid g)
    (Thread/sleep 1000)))
</code></p>

<p>Pattern examples:</p>

<p>``` clojure
(def block [[0 0 0 0]
            [0 1 1 0]
            [0 1 1 0]
            [0 0 0 0]])</p>

<p>(def glider [[0 0 1 0 0 0 0 0]
             [1 0 1 0 0 0 0 0]
             [0 1 1 0 0 0 0 0]
             [0 0 0 0 0 0 0 0]
             [0 0 0 0 0 0 0 0]
             [0 0 0 0 0 0 0 0]])
```</p>

<p>Full history of implementation and more life patterns
<a href="https://github.com/mishadoff/prog-experiment/blob/master/clojure/life.clj">available here</a></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 016]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-016/"/>
    <updated>2013-03-05T01:31:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-016</id>
    <content type="html"><![CDATA[<blockquote>
  <p>2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.</p>

  <p>What is the sum of the digits of the number 2^1000 ?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=16">http://projecteuler.net/problem=16</a></p>

<!-- more -->

<p>Are you kidding me?</p>

<ul>
  <li>Find 1000th <em>power of two</em></li>
  <li>Sum its digits</li>
</ul>

<p>In <a href="/blog/clojure-euler-problem-008/">Clojure Euler: Problem 008</a> we
learned how to sum digits in the number. Just gentle reminder:</p>

<p><code>clojure
(defn sum-of-digits [n]
  (reduce + (map #(- (int %) 48) (seq (str n)))))
</code></p>

<p>Now, let’s create sequence of powers of two:</p>

<p><code>clojure
(defn powers-of-2 []
  (iterate (partial * 2) 1))
</code></p>

<p>Unfortunately, this sequence throws <code>integer overflow</code> on the <code>64th</code> element.
We can fix that using <em>long arithmetics</em>, which known as <code>BigInteger</code> in Java.
Change <code>1</code> to <code>1N</code>.</p>

<p><code>clojure
(iterate (partial * 2) 1N)
</code></p>

<p>Another way is to use <strong>automatic promotion</strong> operator (<code>+'</code>, <code>*'</code>).
If result of some operation is not suitable for some type,
instead of invalid computation and runtime exception, clojure automatically promotes
the type to suitable one (<em>for example</em> <code>Long.MAX_VALUE +' 1</code> <em>works fine and produces
 correct result with type of</em> <code>BigInteger</code>):</p>

<p><code>clojure
(iterate (partial *' 2) 1)
</code></p>

<p>Choose <code>powers-of-2</code> that you prefer and final result will look like this:</p>

<p><code>clojure
(sum-of-digits (last (take 1001 (powers-of-2))))
</code></p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem016.clj">github</a></p>

<p><strong>P.S.</strong> Automatic promotion is a beatiful thing. But be aware about losing in
speed of calculations. Also, no way back. If promotion happened, <em>depromotion</em> won’t.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Magic. Part 4: sun.misc.Unsafe]]></title>
    <link href="http://mishadoff.github.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/"/>
    <updated>2013-02-26T02:37:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe</id>
    <content type="html"><![CDATA[<p>Java is a safe programming language and prevents programmer
from doing a lot of stupid mistakes, most of which based on memory management.
But, there is a way to do such <em>mistakes</em> intentionally, using <code>Unsafe</code> class.</p>

<p>This article is a quick overview of <code>sun.misc.Unsafe</code> <em>public</em> API and few
interesting cases of its usage.</p>

<!-- more -->

<h3 id="unsafe-instantiation">Unsafe instantiation</h3>

<p>Before usage, we need to create instance of <code>Unsafe</code> object.
There is no simple way to do it like <code>Unsafe unsafe = new Unsafe()</code>,
because <code>Unsafe</code> class has private constructor. It also has static
<code>getUnsafe()</code> method, but if you naively try to call <code>Unsafe.getUnsafe()</code> you, probably,
get <code>SecurityException</code>. Using this method available only from trusted code.</p>

<p><code>java
public static Unsafe getUnsafe() {
    Class cc = sun.reflect.Reflection.getCallerClass(2);
    if (cc.getClassLoader() != null)
        throw new SecurityException("Unsafe");
    return theUnsafe;
}
</code></p>

<p>This is how java validates if code is trusted.
It is just checking that our code was loaded with
primary classloader.</p>

<p>We can make our code “trusted”. Use option <code>bootclasspath</code> when running
your program and specify
path to system classes plus your one that will use <code>Unsafe</code>.</p>

<p><code>java
java -Xbootclasspath:/usr/jdk1.7.0/jre/lib/rt.jar:. com.mishadoff.magic.UnsafeClient
</code></p>

<p>But it’s too hard.</p>

<p><code>Unsafe</code> class contains its instance called <code>theUnsafe</code>, which marked as <code>private</code>.
We can steal that variable via java reflection.</p>

<p><code>java
Field f = Unsafe.class.getDeclaredField("theUnsafe");
f.setAccessible(true);
Unsafe unsafe = (Unsafe) f.get(null);
</code></p>

<p><em>Note:</em> Ignore your IDE. For example, eclipse show error “Access restriction…”
but if you run code, all works just fine. If the error is annoying, ignore errors on
<code>Unsafe</code> usage in:</p>

<pre><code>Preferences -&gt; Java -&gt; Compiler -&gt; Errors/Warnings -&gt;
Deprecated and restricted API -&gt; Forbidden reference -&gt; Warning
</code></pre>

<h3 id="unsafe-api">Unsafe API</h3>

<p>Class <a href="http://www.docjar.com/docs/api/sun/misc/Unsafe.html">sun.misc.Unsafe</a>
consists of <code>105</code> methods. There are, actually,
few groups of important methods for manipulating with various entities.
Here is some of them:</p>

<ul>
  <li><strong>Info</strong>. Just returns some low-level memory information.
    <ul>
      <li><code>addressSize</code></li>
      <li><code>pageSize</code></li>
    </ul>
  </li>
  <li><strong>Objects</strong>. Provides methods for object and its fields manipulation.
    <ul>
      <li><code>allocateInstance</code></li>
      <li><code>objectFieldOffset</code></li>
    </ul>
  </li>
  <li><strong>Classes</strong>. Provides methods for classes and static fields manipulation.
    <ul>
      <li><code>staticFieldOffset</code></li>
      <li><code>defineClass</code></li>
      <li><code>defineAnonymousClass</code></li>
      <li><code>ensureClassInitialized</code></li>
    </ul>
  </li>
  <li><strong>Arrays</strong>. Arrays manipulation.
    <ul>
      <li><code>arrayBaseOffset</code></li>
      <li><code>arrayIndexScale</code></li>
    </ul>
  </li>
  <li><strong>Synchronization</strong>. Low level primitives for synchronization.
    <ul>
      <li><code>monitorEnter</code></li>
      <li><code>tryMonitorEnter</code></li>
      <li><code>monitorExit</code></li>
      <li><code>compareAndSwapInt</code></li>
      <li><code>putOrderedInt</code></li>
    </ul>
  </li>
  <li><strong>Memory</strong>. Direct memory access methods.
    <ul>
      <li><code>allocateMemory</code></li>
      <li><code>copyMemory</code></li>
      <li><code>freeMemory</code></li>
      <li><code>getAddress</code></li>
      <li><code>getInt</code></li>
      <li><code>putInt</code></li>
    </ul>
  </li>
</ul>

<h3 id="interesting-use-cases">Interesting use cases</h3>

<h4 id="avoid-initialization">Avoid initialization</h4>

<p><code>allocateInstance</code> method can be <em>useful</em> when you need to skip object initialization phase
or bypass security checks in constructor or you want instance of that class
but don’t have any public constructor. Consider following class:</p>

<p>``` java
class A {
    private long a; // not initialized value</p>

<pre><code>public A() {
    this.a = 1; // initialization
}

public long a() { return this.a; } } ```
</code></pre>

<p>Instantiating it using constructor, reflection and unsafe gives
different results.</p>

<p>``` java
A o1 = new A(); // constructor
o1.a(); // prints 1</p>

<p>A o2 = A.class.newInstance(); // reflection
o2.a(); // prints 1</p>

<p>A o3 = (A) unsafe.allocateInstance(A.class); // unsafe
o3.a(); // prints 0
```</p>

<p>Just think what happens to all your <a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singletons</a>.</p>

<h4 id="memory-corruption">Memory corruption</h4>

<p>This one is usual for every C programmer.
By the way, its common technique for security bypass.</p>

<p>Consider some simple class that check access rules:</p>

<p>``` java
class Guard {
    private int ACCESS_ALLOWED = 1;</p>

<pre><code>public boolean giveAccess() {
    return 42 == ACCESS_ALLOWED;
} } ```
</code></pre>

<p>The client code is <em>very secure</em> and calls
<code>giveAccess()</code> to check access rules. Unfortunately, for clients,
it always returns <code>false</code>. Only privileged users <em>somehow</em> can change
value of <code>ACCESS_ALLOWED</code> constant and get access.</p>

<p>In fact, it’s not true. Here is the code demostrates it:</p>

<p>``` java
Guard guard = new Guard();
guard.giveAccess();   // false, no access</p>

<p>// bypass
Unsafe unsafe = getUnsafe();
Field f = guard.getClass().getDeclaredField(“ACCESS_ALLOWED”);
unsafe.putInt(guard, unsafe.objectFieldOffset(f), 42); // memory corruption</p>

<p>guard.giveAccess(); // true, access granted
```</p>

<p>Now all clients will get unlimited access.</p>

<p>Actually, the same functionality can be achieved by reflection.
But interesting, that we can modify any object, even ones
that we do not have references to.</p>

<p>For example, there is another <code>Guard</code> object in memory
located next to current <code>guard</code> object. We can modify its <code>ACCESS_ALLOWED</code> field with the following code</p>

<p><code>java
unsafe.putInt(guard, 16 + unsafe.objectFieldOffset(f), 42); // memory corruption
</code></p>

<p>Note, we didn’t use any reference to this object.
<code>16</code> is size of <code>Guard</code> object in 32 bit architecture.
We can calculate it manually or use <code>sizeOf</code> method, that defined… right now.</p>

<h4 id="sizeof"><strong>sizeOf</strong></h4>

<p>Using <code>objectFieldOffset</code> method we can implement C-style <code>sizeof</code> function.
This implementation returns <em>shallow</em> size of object:</p>

<p>``` java
public static long sizeOf(Object o) {
    Unsafe u = getUnsafe();
    HashSet<field> fields = new HashSet<field>();
    Class c = o.getClass();
    while (c != Object.class) {
        for (Field f : c.getDeclaredFields()) {
            if ((f.getModifiers() &amp; Modifier.STATIC) == 0) {
                fields.add(f);
            }
        }
        c = c.getSuperclass();
    }</field></field></p>

<pre><code>// get offset
long maxSize = 0;
for (Field f : fields) {
    long offset = u.objectFieldOffset(f);
    if (offset &gt; maxSize) {
        maxSize = offset;
    }
}

return ((maxSize/8) + 1) * 8;   // padding } ```
</code></pre>

<p>Algorithm is the following: go through all <em>non-static</em> fields including all
superclases, get offset for each field, find maximum and add padding.
Probably, I missed something, but idea is clear.</p>

<p>Much simpler <code>sizeOf</code> can be achieved if we just read <code>size</code> value from
the class struct for this object, which located with offset 12 in <code>JVM 1.7 32 bit</code>.</p>

<p><code>java
public static long sizeOf(Object object){
    return getUnsafe().getAddress(
        normalize(getUnsafe().getInt(object, 4L)) + 12L);
}
</code></p>

<p><code>normalize</code> is a method for casting signed int to unsigned long, for
correct address usage.</p>

<p><code>java
private static long normalize(int value) {
    if(value &gt;= 0) return value;
    return (~0L &gt;&gt;&gt; 32) &amp; value;
}
</code></p>

<p>Awesome, this method returns the same result as our previous <code>sizeof</code>
function.</p>

<p>In fact, for good, safe and accurate <code>sizeof</code> function better to use
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html">java.lang.instrument</a> package,
but it requires specifyng <code>agent</code> option in your JVM.</p>

<h4 id="shallow-copy"><strong>Shallow copy</strong></h4>

<p>Having implementation of calculating shallow object size, we can simply
add function that copy objects. Standard solution need modify your code with <code>Cloneable</code>,
or you can implement custom copy function in your object, but it won’t be multipurpose function.</p>

<p>Shallow copy:</p>

<p><code>java
static Object shallowCopy(Object obj) {
    long size = sizeOf(obj);
    long start = toAddress(obj);
    long address = getUnsafe().allocateMemory(size);
    getUnsafe().copyMemory(start, address, size);
    return fromAddress(address);
}
</code></p>

<p><code>toAddress</code> and <code>fromAddress</code> convert object to its address in memory and vice versa.</p>

<p>``` java
static long toAddress(Object obj) {
    Object[] array = new Object[] {obj};
    long baseOffset = getUnsafe().arrayBaseOffset(Object[].class);
    return normalize(getUnsafe().getInt(array, baseOffset));
}</p>

<p>static Object fromAddress(long address) {
    Object[] array = new Object[] {null};
    long baseOffset = getUnsafe().arrayBaseOffset(Object[].class);
    getUnsafe().putLong(array, baseOffset, address);
    return array[0];
}
```</p>

<p>This copy function can be used to copy object of any type, its size will be calculated
dynamically. Note that after copying you need to cast object to specific type.</p>

<h4 id="hide-password">Hide Password</h4>

<p>One more interesting usage of direct memory access in <code>Unsafe</code> is removing
unwanted objects from memory.</p>

<p>Most of the APIs for retrieving user’s password, have signature
as <code>byte[]</code> or <code>char[]</code>. Why arrays?</p>

<p>It is completely for security reason, because we can nullify array elements after we don’t need them.
If we retrieve password as <code>String</code> it can be saved like an object in memory and nullifying that
string just perform dereference operation. This object still in memory by the time GC decide to perform cleanup.</p>

<p>This trick creates fake <code>String</code> object with the same size and replace original one in memory:</p>

<p>``` java
String password = new String(“l00k@myHor$e”);
String fake = new String(password.replaceAll(“.”, “?”));
System.out.println(password); // l00k@myHor$e
System.out.println(fake); // ????????????</p>

<p>getUnsafe().copyMemory(
          fake, 0L, null, toAddress(password), sizeOf(password));</p>

<p>System.out.println(password); // ????????????
System.out.println(fake); // ????????????
```</p>

<p>Feel safe.</p>

<h4 id="multiple-inheritance"><strong>Multiple Inheritance</strong></h4>

<p>There is no multiple inheritance in java.</p>

<p>Correct, except we can cast every type to every another one, if we want.</p>

<p><code>java
long intClassAddress = normalize(getUnsafe().getInt(new Integer(0), 4L));
long strClassAddress = normalize(getUnsafe().getInt("", 4L));
getUnsafe().putAddress(intClassAddress + 36, strClassAddress);
</code></p>

<p>This snippet adds <code>String</code> class to <code>Integer</code> superclasses, so we can cast
without runtime exception.</p>

<p><code>java
(String) (Object) (new Integer(666))
</code></p>

<p>One problem that we must do it with pre-casting to object. To cheat compiler.</p>

<h4 id="dynamic-classes">Dynamic classes</h4>

<p>We can create classes in runtime, for example from
compiled <code>.class</code> file. To perform that read class contents
to byte array and pass it properly to <code>defineClass</code> method.</p>

<p><code>java
byte[] classContents = getClassContent();
Class c = getUnsafe().defineClass(
              null, classContents, 0, classContents.length);
    c.getMethod("a").invoke(c.newInstance(), null); // 1
</code></p>

<p>And reading from file defined as:</p>

<p><code>java
private static byte[] getClassContent() throws Exception {
    File f = new File("/home/mishadoff/tmp/A.class");
    FileInputStream input = new FileInputStream(f);
    byte[] content = new byte[(int)f.length()];
    input.read(content);
    input.close();
    return content;
}
</code></p>

<p>This can be useful, when you must create classes dynamically, some proxies
or aspects for existing code.</p>

<h4 id="throw-an-exception">Throw an Exception</h4>

<p>Don’t like checked exceptions? Not a problem.</p>

<p><code>java
getUnsafe().throwException(new IOException());
</code></p>

<p>This method throws checked exception, but your code not forced to catch or rethrow it.
Just like runtime exception.</p>

<h4 id="fast-serialization">Fast Serialization</h4>

<p>This one is more practical.</p>

<p>Everyone knows that standard java <code>Serializable</code> capability
to perform serialization is very slow. It also require class
to have public non-argument constructor.</p>

<p><code>Externalizable</code> is better, but it needs to define schema for
class to be serialized.</p>

<p>Popular high-performance libraries, like <a href="http://code.google.com/p/kryo/">kryo</a>
have dependencies, which can be unacceptable with low-memory requirements.</p>

<p>But full serialization cycle can be easily achieved with unsafe class.</p>

<p>Serialization:</p>

<ul>
  <li>Build schema for object using reflection. It can be done once for class.</li>
  <li>Use <code>Unsafe</code> methods <code>getLong</code>, <code>getInt</code>, <code>getObject</code>, etc. to retrieve actual field values.</li>
  <li>Add <code>class</code> identifier to have capability restore this object.</li>
  <li>Write them to the file or any output.</li>
</ul>

<p>You can also add compression to save space.</p>

<p>Deserialization:</p>

<ul>
  <li>Create instance of serialized class. <code>allocateInstance</code> helps, because does not require any constructor.</li>
  <li>Build schema. The same as 1 step in serialization.</li>
  <li>Read all fields from file or any input.</li>
  <li>Use <code>Unsafe</code> methods <code>putLong</code>, <code>putInt</code>, <code>putObject</code>, etc. to fill the object.</li>
</ul>

<p>Actually, there are much more details in correct inplementation, but intuition is clear.</p>

<p>This serialization will be really fast.</p>

<p>By the way, there are some attempts in <code>kryo</code> to use <code>Unsafe</code> <a href="http://code.google.com/p/kryo/issues/detail?id=75">http://code.google.com/p/kryo/issues/detail?id=75</a></p>

<h4 id="big-arrays"><strong>Big Arrays</strong></h4>

<p>As you know <code>Integer.MAX_VALUE</code> constant is a max size of java array.
Using direct memory allocation we can create arrays with size limited by only heap size.</p>

<p>Here is <code>SuperArray</code> implementation:</p>

<p>``` java
class SuperArray {
    private final static int BYTE = 1;</p>

<pre><code>private long size;
private long address;

public SuperArray(long size) {
    this.size = size;
    address = getUnsafe().allocateMemory(size * BYTE);
}

public void set(long i, byte value) {
    getUnsafe().putByte(address + i * BYTE, value);
}

public int get(long idx) {
    return getUnsafe().getByte(address + idx * BYTE);
}

public long size() {
    return size;
} } ```
</code></pre>

<p>And sample usage:</p>

<p><code>java
long SUPER_SIZE = (long)Integer.MAX_VALUE * 2;
SuperArray array = new SuperArray(SUPER_SIZE);
System.out.println("Array size:" + array.size()); // 4294967294
for (int i = 0; i &lt; 100; i++) {
    array.set((long)Integer.MAX_VALUE + i, (byte)3);
    sum += array.get((long)Integer.MAX_VALUE + i);
}
System.out.println("Sum of 100 elements:" + sum);  // 300
</code></p>

<p>In fact, this technique uses <code>off-heap memory</code> and partially
available in <code>java.nio</code> package.</p>

<p>Memory allocated this way not located in the heap and not under GC management, so take care of it
using <code>Unsafe.freeMemory()</code>. It also does not perform any boundary checks, so any
illegal access may cause JVM crash.</p>

<p>It can be useful for math computations, where code can operate with large arrays of data.
Also, it can be interesting for realtime programmers, where GC delays on large arrays can
break the limits.</p>

<h4 id="concurrency">Concurrency</h4>

<p>And few words about concurrency with <code>Unsafe</code>.
<code>compareAndSwap</code> methods are atomic and can be used to implement
high-performance lock-free data structures.</p>

<p>For example, consider the problem to increment value in the shared object
using lot of threads.</p>

<p>First we define simple interface <code>Counter</code>:</p>

<p><code>java
interface Counter {
    void increment();
    long getCounter();
}
</code></p>

<p>Then we define worker thread <code>CounterClient</code>, that uses <code>Counter</code>:</p>

<p>``` java
class CounterClient implements Runnable {
    private Counter c;
    private int num;</p>

<pre><code>public CounterClient(Counter c, int num) {
    this.c = c;
    this.num = num;
}

@Override
public void run() {
    for (int i = 0; i &lt; num; i++) {
        c.increment();
    }
} } ```
</code></pre>

<p>And this is testing code:</p>

<p><code>java
int NUM_OF_THREADS = 1000;
int NUM_OF_INCREMENTS = 100000;
ExecutorService service = Executors.newFixedThreadPool(NUM_OF_THREADS);
Counter counter = ... // creating instance of specific counter
long before = System.currentTimeMillis();
for (int i = 0; i &lt; NUM_OF_THREADS; i++) {
    service.submit(new CounterClient(counter, NUM_OF_INCREMENTS));
}
service.shutdown();
service.awaitTermination(1, TimeUnit.MINUTES);
long after = System.currentTimeMillis();
System.out.println("Counter result: " + c.getCounter());
System.out.println("Time passed in ms:" + (after - before));
</code></p>

<p>First implementation is not-synchronized counter:</p>

<p>``` java
class StupidCounter implements Counter {
    private long counter = 0;</p>

<pre><code>@Override
public void increment() {
    counter++;
}

@Override
public long getCounter() {
    return counter;
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 99542945
Time passed in ms: 679
</code></p>

<p>Working fast, but no threads management at all, so result is inaccurate.
Second attempt, add easiest java-way synchronization:</p>

<p>``` java
class SyncCounter implements Counter {
    private long counter = 0;</p>

<pre><code>@Override
public synchronized void increment() {
    counter++;
}

@Override
public long getCounter() {
    return counter;
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 10136
</code></p>

<p>Radical synchronization always work. But timings is awful.
Let’s try <code>ReentrantReadWriteLock</code>:</p>

<p>``` java
class LockCounter implements Counter {
    private long counter = 0;
    private WriteLock lock = new ReentrantReadWriteLock().writeLock();</p>

<pre><code>@Override
public void increment() {
    lock.lock();
    counter++;
    lock.unlock();
}

@Override
public long getCounter() {
    return counter;
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 8065
</code></p>

<p>Still correct, and timings are better. What about atomics?</p>

<p>``` java
class AtomicCounter implements Counter {
    AtomicLong counter = new AtomicLong(0);</p>

<pre><code>@Override
public void increment() {
    counter.incrementAndGet();
}

@Override
public long getCounter() {
    return counter.get();
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 6552
</code></p>

<p><code>AtomicCounter</code> is even better. Finally, try <code>Unsafe</code>
primitive <code>compareAndSwapLong</code> to see if it is really privilegy to use it.</p>

<p>``` java
class CASCounter implements Counter {
    private long counter = 0;
    private Unsafe unsafe;
    private long offset;</p>

<pre><code>public CASCounter() throws Exception {
    unsafe = getUnsafe();
    offset = unsafe.objectFieldOffset(CASCounter.class.getDeclaredField("counter"));
}

@Override
public void increment() {
    long before = counter;
    while (!unsafe.compareAndSwapLong(this, offset, before, before + 1)) {
        before = counter;
    }
}

@Override
public long getCounter() {
    return counter;
} ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 6454
</code></p>

<p>Hmm, seems equal to atomics. Maybe atomics use <code>Unsafe</code>? (<em>YES</em>)</p>

<p>In fact this example is easy enough, but it shows some power of <code>Unsafe</code>.</p>

<p>As I said, <code>CAS</code> primitive can be used to implement lock-free data structures.
The intuition behind this is simple:</p>

<ul>
  <li>Have some state</li>
  <li>Create a copy of it</li>
  <li>Modify it</li>
  <li>Perform <code>CAS</code></li>
  <li>Repeat if it fails</li>
</ul>

<p>Actually, in real it is more hard than you can imagine. There are a lot of problems like
<a href="http://en.wikipedia.org/wiki/ABA_problem">ABA Problem</a>, instructions reordering, etc.</p>

<p>If you really interested, you can refer to the awesome presentation about <a href="http://www.azulsystems.com/about_us/presentations/lock-free-hash">lock-free HashMap</a></p>

<h3 id="bonus">Bonus</h3>

<p>Documentation for <code>park</code> method from <code>Unsafe</code> class contains
longest English sentence I’ve ever seen:</p>

<blockquote>
  <p>Block current thread, returning when a balancing
unpark occurs, or a balancing unpark has
already occurred, or the thread is interrupted, or, if not
absolute and time is not zero, the given time nanoseconds have
elapsed, or if absolute, the given deadline in milliseconds
since Epoch has passed, or spuriously (i.e., returning for no
“reason”). Note: This operation is in the Unsafe class only
because unpark is, so it would be strange to place it
elsewhere.</p>
</blockquote>

<h3 id="conclusion">Conclusion</h3>

<p>Although, <code>Unsafe</code> has a bunch of useful applications, never use it.</p>
]]></content>
  </entry>
  
</feed>
