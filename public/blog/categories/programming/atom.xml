<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2013-01-20T18:58:59+02:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Critical Software Bugs: Part 1]]></title>
    <link href="http://mishadoff.github.com/blog/critical-software-bugs-part-1/"/>
    <updated>2013-01-20T18:48:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/critical-software-bugs-part-1</id>
    <content type="html"><![CDATA[<p>Little journey through the history of most critical software bugs
with some code examples.</p>

<p><em>Do not try to reproduce any of these!</em></p>

<!-- more -->


<h3>Intro</h3>

<blockquote><p>Every last bug is the last but one.</p></blockquote>

<p><strong>Bugs</strong> are bad. Some of them cause uncomfortable work, more actions
than expected, inconsistency, layout issues, etc.
Some of them "<a href="http://en.wikipedia.org/wiki/Undocumented_feature">not a bug</a>" at all.</p>

<p><strong>Bad bugs</strong> much worse. They cause data corruption, invalid data representation,
unavailability to perform action, losing integrity and so on.</p>

<p>There are <strong>critical bugs</strong> with painful consequences. They can damage the health, nature, people
break buildings, technics. Theoretically, they
<a href="http://www.washingtonpost.com/wp-srv/inatl/longterm/coldwar/shatter021099b.htm">can lead to World War III</a>.
Hope, it's just theoretically.</p>

<p>If you are software engineer, you definitely will commit the bugs. No panacea.
But if we aware about common mistakes, then less likely we make that mistakes.</p>

<p>This article is review of famous most critical software bugs
including brief history, consequences, root causes, possible solutions, code examples and some advices.</p>

<h3><a href="http://en.wikipedia.org/wiki/Mariner_1">Mariner 1</a> (1962)</h3>

<p><strong>History:</strong>
In 1962, spacecraft <em>Mariner 1</em> was guided by computer program with error causes
racket do not follow its expected trajectory. To prevent tragic consequences, racket
was destoyed immediately.</p>

<p><strong>Consequences:</strong> Money, $18 million.</p>

<p><strong>Reason:</strong>
There are tons of versions about what type of error it was, but official version
is <em>missing hyphen</em> ('-') in program. Maybe it's just a myth for publicity,
but, anyway, if the reason of bug is incorrect handwritten formula transcription
from paper to computer, it's sad.</p>

<p>Probably, the root cause of that is writer and computer operator were different people.
It's common case for that times. <em>Programming</em> was synonym to the <em>scientific calculations</em> not
an enterprise, as nowadays. That's why scientist, programmer, and operator could be
different people.</p>

<p>Related story, it's why zero symbol has a period or diagonal line inside - to prevent
confusing with "big O" for "typer" person. Just compare <code>0</code> and <code>O</code>.</p>

<p><strong>Solution:</strong>
It's hardly can be a problem today (as it was 50 years ago), but if you write for somebody on the paper, write it accurate.
If you type into computer from someone's paper sheet, check, re-check and double re-check
what you typing. Ask if you have concerns. Especially, if it is the program for spaceship.</p>

<p>In very <em>far-fetched</em> example missing minus sign can result into invalid computation:</p>

<p>``` java
double getDiscountPercent() {</p>

<pre><code>return 0.25; // instead of return -0.25;
</code></pre>

<p>}</p>

<p>double calculatePrice(double initial) {</p>

<pre><code>return initial * (1.0 + getDiscountPercent());
</code></pre>

<p>}
```</p>

<p>That way instead of paying $75, you pay $125.</p>

<p><strong>Lesson:</strong> Always check your manual rewriting actions.</p>

<h3><a href="http://en.wikipedia.org/wiki/Siberian_pipeline_sabotage">Siberian pipeline sabotage</a> (1982)</h3>

<p><strong>History:</strong> Cold war. Soviet Union steal technology for managing gas pipelines from Canada. This
technology intentionally contained the bug (<a href="http://en.wikipedia.org/wiki/Logic_bomb">Logic Bomb</a>), developed by CIA
for sabotage purposes. Bomb triggered.</p>

<p><strong>Consequences:</strong> The greatest non-nuclear explosion in the world.</p>

<p><strong>Reason:</strong> Every microship from stolen technology would
work fine just for 10 million cycles, after that switches to another mode.</p>

<p>They <em>used someone's code</em>.</p>

<p><strong>Solution:</strong></p>

<blockquote><p>You shall not steal</p>

<p>-- <a href="http://en.wikipedia.org/wiki/Ten_Commandments">Ten Commandments</a></p></blockquote>

<p>Honestly, if someone's technology used for critical areas, like gas
transportation, it must be reviewed and tested. 100 times.</p>

<p>Story can be translated as:</p>

<p>I found memory card on the city dump.
Card contained one shell script <code>please-execute-me.sh</code>.
I <em>executed</em> it. System crashed. Who's guilty? Just me.</p>

<p>Use software from trusted sources.</p>

<p>In modern software world, we often use someone's libraries, frameworks,
APIs to build our own applications. We <em>expect</em> that code is <em>reviewed</em> and <em>tested</em>.
If not, we can help to do it. How we can be sure these libs without logic bombs?</p>

<p>Trust or review the sources. That's why I love open source software.</p>

<p>Logic bomb detection is not that hard. Just find the code that causes error
and see the reason of that error. Again, code review helps <em>to prevent</em> the
logic bomb instead of <em>fixing it</em>. Build application to production only from
version control system (<em>which is controlled, right?</em>)</p>

<p>Just for educational purposes: simple example of time-triggered logic bomb</p>

<p>``` java
public class LogicBombRunner {</p>

<pre><code>    public static void main(String[] args) {
            Thread thread = new Thread(new LogicBomb());
            thread.start();
    }
</code></pre>

<p>}</p>

<p>class LogicBomb implements Runnable {</p>

<pre><code>    private long toStop;
    private final long TIME_TO_TRIGGER = 1000 * 60 * 60 * 24 * 100;

    public LogicBomb() {
            toStop = System.currentTimeMillis() + TIME_TO_TRIGGER;
    }

    @Override
    public void run() {
            while (true) {
                    if (System.currentTimeMillis() &lt; toStop) {
                            System.out.println("System works fine.");
                            try {
                                    Thread.sleep(1000);
                            } catch (InterruptedException e) {
                                    e.printStackTrace();
                            }
                    } else {
                            System.out.println("Logic bomb triggered.");
                            throw new RuntimeException();
                    }
            }
    }
</code></pre>

<p>}</p>

<p>```</p>

<p>Yes. It throws <code>RuntimeException</code> after approximately 100 days from <code>LogicBomb</code> object creation.</p>

<p><strong>Lesson:</strong> Do not steal. Trust to very limited circle of people.</p>

<h3><a href="http://en.wikipedia.org/wiki/Therac-25">Therac-25</a> (1985 - 1987)</h3>

<p><strong>History:</strong> Therac-25 was a medical device for radiation therapy.
It could deliver either beta-particles or X-rays. Unfortunately,
operating system for controling the device was written with error,
that causes sad results.</p>

<p><strong>Consequences:</strong> At least 2 patients died, 4 patients were given overdose,
approximately 100 times intended dose.</p>

<p><strong>Reason:</strong> Investigation concluded the common reason was a
<em>bad software design</em>, <em>development practices</em> and a <em>set of bugs</em>
instead of some particular critical bug.</p>

<p>These bad practices and bugs include:</p>

<ul>
<li>No code review</li>
<li>Poor exception handling</li>
<li>No integration testing until device was assembled in the hospital</li>
<li>Poor hardware design</li>
<li><em>Bad code</em> reuse</li>
<li>Concurrency issues</li>
</ul>


<p><strong>Solution:</strong> Code review its a must. Even if you working
alone in the team, show sources to some your friend (programmer).
Two pair of eyes can spot the mistake two times more.</p>

<p><em>Poor exception handling</em>. If failure occurs, no one knows about that failure.
Never handle exception like that:</p>

<p>``` java
catch (SomeException e) {</p>

<p>}
```</p>

<p>In 99% there are must be a proper handling. If you don't know how
to handle, rethrow it, possible with wrapping:</p>

<p><code>java
catch (SomeException e) {
   throw new SpecificException(e);
}
</code></p>

<p>Much better to throw responsibility for handling one level up
in method signature:</p>

<p><code>java
void method() throws SomeException
</code></p>

<p>If your real intention to left catch block empty, say this:</p>

<p><code>java
catch (SomeExcpetion e) {
  // swallowing this exception is intended
}
</code></p>

<p><em>Bad code reuse</em>. <a href="http://en.wikipedia.org/wiki/Code_reuse">Code reuse</a> is a good thing.
Except the case when you reuse something with errors.</p>

<p>For example, I have following method for testing if number is even in some of my
previous projects (<em>yes, look at your code that was written few years ago</em>):</p>

<p>``` java
static boolean isEven(int num) {</p>

<pre><code>return num % 2 != 1;
</code></pre>

<p>}
```</p>

<p>This method returns incorrect result <code>true</code> for all negative odd numbers. Just because
<code>%</code> operator returns <code>-1</code> except <code>1</code> for negative numbers. Better do <em>NOT</em> reuse such method.
Just write new. And replace old method immediately.</p>

<p>``` java
static boolean isEven(int num) {</p>

<pre><code>return num % 2 == 0;
</code></pre>

<p>}
```</p>

<p><em>Concurrency</em>. Software world hardest issues are concurrency issues.</p>

<blockquote><p>You have a problem and decide to use threads.
Two now problems have you.</p>

<p>-- Some guy from internet</p></blockquote>

<br>


<blockquote><p>You have a problem and decide to use locks.
Now you have</p>

<p>-- Some another guy from internet</p></blockquote>

<p>If you know that some object will be shared between threads, one solution to
add <code>synchronized</code> (<a href="http://en.wikipedia.org/wiki/Monitor_%28synchronization%29">Monitor object</a>)
to each read/write state method. It will slow
your work with that object but prevent a lot of unexpected errors.</p>

<p>Although, there are much flexible synchronization mechanisms in java that
plain old <code>synchronized</code> as <a href="http://en.wikipedia.org/wiki/Semaphore_%28programming%29">semaphores</a>,
<a href="http://en.wikipedia.org/wiki/Mutual_exclusion">mutexes</a>,
<a href="http://en.wikipedia.org/wiki/Read_write_lock_pattern">read-write locks</a>.</p>

<p>I reccomend to use java package <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/package-summary.html">java.util.concurrent</a>.
It consists of a lot of concurrency techniques, like <code>Synchronizers</code>, <code>Executors</code>,
<code>Atomics</code>, <code>Concurrent Collections</code>, <code>Futures</code>, <code>Callbacks</code> etc.</p>

<p><strong>As a bonus:</strong> Good books about concurrency in Java:</p>

<ul>
<li><a href="http://www.goodreads.com/book/show/127932.Java_Concurrency_in_Practice">Java Concurrency in Practice</a></li>
<li><a href="http://www.goodreads.com/book/show/629608.Concurrent_Programming_in_Java">Concurrent Programming in Java</a></li>
</ul>


<p><strong>Lesson:</strong> Always handle exceptions. Pay more attention to concurrency issues.</p>

<h3><a href="http://en.wikipedia.org/wiki/MIM-104_Patriot">Patriot Missile</a> (1991)</h3>

<p><strong>History:</strong> In 1991, American battery fired Patriot Missile to intercept Iraq missile.
Interception failed because of system bug in time step calculation.
Iraq missile destroyed an American Army barracks.</p>

<p><strong>Consequences:</strong> 28 soldiers died, 100 injured.</p>

<p><strong>Reason:</strong> Floating point rounding error. System's internal clock was calculating
time by 0.1 seconds step (0.1, 0.2, 0.3, ...). As <code>0.1 = 1/10</code> have infinite binary representation
<code>0.0001100110011001100110011001100110011001100110011001100..</code>
and for this calculation 24-bit register was used,
register hold just <code>0.00011001100110011001100</code> introducing truncating error
<code>0.00000000000000000000000110011</code> what is approximately <code>0.0000001</code> in decimal.</p>

<p>Small enough, huh?</p>

<p>Not really, Multiplying this number for 100 hours gives:</p>

<pre><code>0.0000001 * 100 * 60 * 60 * 10 = 0.36 sec
</code></pre>

<p>During that time Iraq missile travels a half kilometer, and was out of tracking radius
for Patriot Missile. Bad things happen.</p>

<p><strong>Solution:</strong> Floats are very error-prone if we don't handle them correctly.</p>

<p>Predict the output of the following code:</p>

<p>``` java
for (double d = 0.0; d != 1.0; d = d + 0.1) {</p>

<pre><code>System.out.println("Iteration");
</code></pre>

<p>}
```</p>

<p>Infinite loop. The same problem as described above.</p>

<p>One solution is to use float that have exact binary representation.
<code>0.125</code>, <code>0.25</code>, <code>0.5</code> for example.
But this greatly reduces the space of allowed values and give less flexibility.</p>

<p>Another solution to use big decimal or ratio types.
Java, as example, have out-of-the-box <code>BigDecimal</code> class. Loop above rewritten with
that class works as expected:</p>

<p>``` java
BigDecimal init = new BigDecimal("0.0");
BigDecimal bound = new BigDecimal("1.0");
BigDecimal step = new BigDecimal("0.1")</p>

<p>for (BigDecimal d = init; !d.equals(bound); d = d.add(step)) {</p>

<pre><code>    System.out.println(d);
</code></pre>

<p>}
```</p>

<p>One disadvantage it has slower execution than with floats. Consider trade-off
between time and accuracy. If human lives on the stake, it's not relevant choice.</p>

<p><code>Ratio</code> class can be defined without any problems and used similar way.</p>

<p><strong>Lesson:</strong> If you need very accurate calculations use big decimals or ratios.</p>

<h3><a href="http://en.wikipedia.org/wiki/Mars_Climate_Orbiter">Mars Climate Orbiter</a> (1998)</h3>

<p><strong>History:</strong> Again about space. In 1998, communication with Mars Climate Orbiter
was lost, because of changed trajectory. Space probe was crashed near Mars.</p>

<p><strong>Consequences:</strong> Money, $327 million</p>

<p><strong>Reason:</strong> Navigation system design was developed by another team.
To represent Force they used <a href="http://en.wikipedia.org/wiki/Pound-force">pound-force</a>
from <a href="http://en.wikipedia.org/wiki/Imperial_units">Imperial units</a>
instead of <a href="http://en.wikipedia.org/wiki/Newton_%28unit%29">Newton</a>
from <a href="http://en.wikipedia.org/wiki/Metric_system">metric system</a>.</p>

<pre><code>1 Newton = 0.22 pound-force
</code></pre>

<p>Without provided conversion between them system failed.</p>

<p>Issue resemble to using dates in different timezones, but much more critical.</p>

<p><strong>Solution:</strong> First of all, at least one science-aware person must perform code review.
At least for code blocks with formulas and calculations. If there are comments about using pound-force,
the problem easy spotted. Second of all, received code must be tested on model
instead of physical machine. This is also, likely, detects the issue.
Developer who wrote that less guilty, but still guilty.</p>

<p>There are different approaches to implement this in java:</p>

<p>very bad approach, we don't know what units are used:</p>

<p><code>java
new Force(1.533);
</code></p>

<p>better (still bad) approach to indicate with comment:</p>

<p><code>java
// force in Newtons!
new Force(1.533);
</code></p>

<p>better (still bad) approach to indicate different constructors for different units:</p>

<p><code>java
new ForceInNewtons(1.533);
</code></p>

<p>I prefer approach where you specifies a <em>value</em> and <em>unit</em> in the constructor, and
they converted to something common unit (metric) convenient for use in internal representation:</p>

<p>``` java
enum ForceUnit {
  NEWTON,
  POUND_FORCE
}</p>

<p>new Force(1.533, ForceUnit.NEWTON);
```</p>

<p>A bit more code, but it is understandable and easy to use for different unit systems.
Unit conversion method can be defined either at the <code>enum ForceUnit</code> or <code>class Force</code> level.</p>

<p><strong>Lesson:</strong> Always explicitly indicate what units used in your code.</p>

<p><em>To be continued.</em></p>

<h3>Links</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/List_of_software_bugs">List of Software Bugs</a></li>
<li><a href="http://www5.in.tum.de/~huckle/bugse.html">Collection of Software Bugs</a></li>
<li><a href="http://www.wired.com/software/coolapps/news/2005/11/69355?currentPage=all">History's Worst Software Bugs</a></li>
<li><a href="http://www.sundoginteractive.com/sunblog/posts/top-ten-most-infamous-software-bugs-of-all-time">Top Ten Most Infamous Software Bugs Of All Time</a></li>
<li><a href="http://nssdc.gsfc.nasa.gov/nmc/spacecraftDisplay.do?id=MARIN1">NASA Mariner 1</a></li>
<li><a href="http://www.wired.com/culture/lifestyle/news/2004/03/62806">Soviets Burned By CIA Hackers?</a></li>
<li><a href="http://courses.cs.vt.edu/cs3604/lib/Therac_25/Therac_1.html">An Investigation of the Therac-25 Accidents</a></li>
<li><a href="http://seeri.etsu.edu/SECodeCases/ethicsC/PatriotMissile.htm">An Analysis of the Patriot Missile System</a></li>
<li><a href="http://www.ima.umn.edu/~arnold/disasters/patriot.html">The Patriot Missile Failure</a></li>
<li><a href="http://www.tysknews.com/Depts/Metrication/mystery_of_orbiter_crash_solved.htm">Mystery of Orbiter Crash Solved</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 011]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-011/"/>
    <updated>2013-01-18T13:45:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-011</id>
    <content type="html"><![CDATA[<blockquote><p>What is the greatest product of four adjacent numbers in the same
direction (up, down, left, right, or diagonally) in the 20 x 20 grid?</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=11">http://projecteuler.net/problem=11</a></p>

<!-- more -->


<blockquote><p>In the 20 x 20 grid below, four numbers along a diagonal
line have been enclosed into square brackets</p></blockquote>

<pre><code>08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10[26]38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95[63]94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17[78]78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35[14]00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
</code></pre>

<blockquote><p>The product of these numbers is 26 * 63 * 78 * 14 = 1788696.</p>

<p>What is the greatest product of four adjacent numbers in the
same direction (up, down, left, right, or diagonally) in the 20 x 20 grid?</p></blockquote>

<p>First step is pretty routine, we need to create such grid representation
in our program from file. For the way how we read files refer
<a href="/blog/clojure-euler-problem-008">Clojure Euler: Problem 008</a>, we have
similar problem there.</p>

<p>``` clojure
(defn get-matrix []
  (map #(Integer/parseInt (apply str %))</p>

<pre><code>   (partition 2 2 (remove #(or (= \newline %) (= \ %))
                          (seq (slurp "res/problem011.txt"))))))
</code></pre>

<p>```</p>

<p>Idea is following: read the file, drop the garbage,
take all two-digit combinations, concat each and transform to the integer.</p>

<p>To make things simple we reading the numbers in one-dimensional list
of size 20 x 20 = 400. We always can use formula to represent two dimensional
indexing for one-dimensional array and vice versa.</p>

<p><em>Example:</em> suppose you need a 3 x 3 matrix <code>A</code></p>

<pre><code>9    2    4
6    1    7
5    3    8
</code></pre>

<p>You can flat it into 1D array <code>B</code></p>

<pre><code>9 2 4 6 1 7 5 3 8
</code></pre>

<p>Now, when you want <code>A[i][j]</code> use the formula <code>i * size_j + j</code>, where <code>size_j</code>
is second matrix dimension. Therefore <code>A[1][2] = B[1 * 3 + 2] = B[5] = 7</code>, what is correct.</p>

<p>Implementing that in clojure gives one indexing function</p>

<p>``` clojure
(defn get-at [i j matrix]
  (if (and (>= i 0) (&lt; i 20) (>= j 0) (&lt; j 20))</p>

<pre><code>(nth matrix (+ j (* i 20))) 0))
</code></pre>

<p>```</p>

<p>We check the boundaries of array inside this function, which can be inappropriate
in many cases, but it is good as we use it in one place.</p>

<p>Ok. We have data, we have methods operate this data, now let's code logic.
Our good friend - <strong>bruteforce</strong>.</p>

<p>``` clojure
(let [matrix (get-matrix)</p>

<pre><code>  ways (for [i (range 20) j (range 20)]
         [(map #(get-at i (+ % j) matrix) (range 4))
          (map #(get-at (+ % i) j matrix) (range 4))
          (map #(get-at (+ % i) (+ % j) matrix) (range 4))
          (map #(get-at (+ % i) (- j %) matrix) (range 4))])]
(reduce max (map #(reduce * %) (reduce concat ways))))
</code></pre>

<p>```</p>

<p>We iterate on all matrix elements as start of 4-element range.</p>

<p>We have 4 conditions, each of them represents some direction.
All these 4 directions represent all possible direction in grid.</p>

<ol>
<li>NORTH -> SOUTH (Up &amp; Down covered)</li>
<li>WEST -> EAST (Left &amp; Right covered)</li>
<li>NW -> SE (backslash diagonals covered)</li>
<li>NE -> SW (slash diagonals covered)</li>
</ol>


<p>```</p>

<pre><code>S      S * * *         S                  S
*                       *                *
*                        *              *
*                         *            *
</code></pre>

<p>```</p>

<p><em>S is for start</em></p>

<p>If we obtain all possible 4-element ranges for matrix, just find
maximum of product.</p>

<p>Problem solved!</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem011.clj">github</a></p>

<p><strong>P.S.</strong> Boring problem.
I think it just for introducing matrices computation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 010]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-010/"/>
    <updated>2012-12-15T00:23:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-010</id>
    <content type="html"><![CDATA[<blockquote><p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</p>

<p>Find the sum of all the primes below two million.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=10">http://projecteuler.net/problem=10</a></p>

<!-- more -->


<p>We have already worked with prime numbers in
<a href="/blog/clojure-euler-problem-003/">Problem 003</a> and
<a href="/blog/clojure-euler-problem-007/">Problem 007</a>. We also decided that
the best way to work with prime numbers in clojure to use <code>primes</code> lazy-seq
from <code>clojure.contrib.lazy-seqs</code>.</p>

<p>Gentle reminder: Just add proper <code>:use</code> to your file:</p>

<p><code>clojure
(:use [clojure.contrib.lazy-seqs :only (primes)])
</code></p>

<p>Then, the simplest problem solution to use <code>take-while</code> stream and <code>reduce</code> for sum:</p>

<p><code>clojure
(reduce + (take-while #(&lt; % 2000000) primes))
</code></p>

<p>Again, one-line solution. Let's run it.</p>

<p>Finding result on my nachine takes ~12 seconds. Small enough, but maybe somehow it can be improved?</p>

<h3>Sieve of Eratosthenes</h3>

<p><a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a> - ancient algorithm
for finding prime numbers. The best explanation how it works with picture from wiki:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="" /></p>

<p>Our first naive implementation:</p>

<p>```clojure
(defn sieve-1 []
  (loop [nums (set (cons 2 (range 3 2000000 2))) n 3]</p>

<pre><code>(if (&gt; n 2000000) (reduce + nums)
    (recur (clojure.set/difference nums (set (range (* n n) 2000000 n))) (inc n)))))
</code></pre>

<p>```</p>

<p><em>Note:</em> <a href="http://clojuredocs.org/clojure_core/clojure.set/difference">clojure.set/difference</a> function
find the difference between two sets.</p>

<p>This recursive implementation is even worse than our oneliner, it calculates the result in ~24 seconds.</p>

<p>Primary optimisation is to use <code>(* n n)</code> as recursion base instead of <code>n</code>. Because of there are no prime
numbers if we crossed greater than square root of maximum. Problem evolves.</p>

<p>``` clojure
(defn sieve-2 []
  (loop [nums (set (cons 2 (range 3 2000000 2))) n 3]</p>

<pre><code>(if (&gt; (* n n) 2000000) (reduce + nums)
    (recur (clojure.set/difference nums (set (range (* n n) 2000000 n))) (inc n)))))
</code></pre>

<p>```</p>

<p>~21 seconds. Still worse.</p>

<p>Why we increment by 1 on recursion call? If we starting our <code>n</code> value from <code>3</code> we don't need
to go over even numbers.</p>

<p>```clojure
(defn sieve-3 []
  (loop [nums (set (cons 2 (range 3 2000000 2))) n 3]</p>

<pre><code>(if (&gt; (* n n) 2000000) (reduce + nums)
    (recur (clojure.set/difference nums (set (range (* n n) 2000000 n))) (+ n 2)))))
</code></pre>

<p>```</p>

<p>~13 seconds. Much better... than previous, still worse than first version.</p>

<p>If you looked at <code>difference</code> documentation, take a look at its implementation under "Source".
Nothing prevent us to pass sequence as second argument instead of set. Just removing casting to set.</p>

<p>``` clojure
(defn sieve-4 []
  (loop [nums (set (cons 2 (range 3 2000000 2))) n 3]</p>

<pre><code>(if (&gt; (* n n) 2000000) (reduce + nums)
    (recur (clojure.set/difference nums (range (* n n) 2000000 n)) (+ n 2)))))
</code></pre>

<p>```</p>

<p>~6 seconds. Wow! It's better than original solution. That means our efforts were not wasteful.</p>

<p>Unfortuantely, we stopped improve our function. But if you want more, other major improvements
can be done in the following areas:</p>

<ul>
<li>Use non-persistent set to save prime numbers. It prevent overhead on new objects.</li>
<li>Use "wheel trick" that can be found in the sources of <code>primes</code> from <code>clojure.contrib.lazy-seqs</code>.</li>
<li>Use dynamic step of iteration. We changed <code>(inc n)</code> to <code>(+ n 2)</code>, but probably there is smarter solution.</li>
<li>Do not use <code>(reduce +)</code> because it is linear algorithm. We init <code>nums</code> sequence with some arithmetic progression.
Its sum can be calculated in O(1) by formula. When we compose another sequence (second argument for <code>difference</code>)
its also an arithmetic progression and sum can be calculated in O(1). When doing differencem just subtract second sum
from first sum, and it will be current <code>nums</code> sum.</li>
</ul>


<p>There are much more optimisations can be done to improve prime numbers performace.
If you interested, read nice Christophe Grand's post
<a href="http://clj-me.cgrand.net/2009/07/30/everybody-loves-the-sieve-of-eratosthenes/">Everybody Loves The Sieve Of Erathosthenes</a></p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem010.clj">(str "Git" "Hub")</a></p>

<p><strong>P.S</strong> Honestly, I am OK with 12 seconds. But 6 seconds is better. We performed improvements
just to show the point <strong>if you want to improve something, probably, you can do it</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 009]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-009/"/>
    <updated>2012-12-11T17:41:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-009</id>
    <content type="html"><![CDATA[<blockquote><p> A Pythagorean triplet is a set of three natural numbers, a &lt; b &lt; c, for which, a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup></p>

<p>For example, 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup></p>

<p>There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=9">http://projecteuler.net/problem=9</a></p>

<!-- more -->


<p>Thinking about clever way to solve it...</p>

<p>Nothing good came up in your mind? Try bruteforce.</p>

<p>Again, the idea behind bruteforce for this problem to iterate over all possible values
for <code>a</code>, <code>b</code> and <code>c</code>, that sums to <code>1000</code> and compose Pythagorean triplet.
That's why we need predicate to test if three numbers compose triplet:</p>

<p><code>clojure
(defn is-triplet? [a b c]
  (= (+ (* a a) (* b b)) (* c c)))
</code></p>

<p>Then our bruteforce solution looks like this:</p>

<p>``` clojure
(first (for [a (range 1 1000) b (range 1 1000) c (range 1 1000)</p>

<pre><code>         :when (and (is-triplet? a b c) (= (+ a b c) 1000))] (* a b c)))
</code></pre>

<p>```</p>

<p>It finds the right solution, in ~45 seconds. Bad enough.</p>

<h3>Trick #1</h3>

<p>Do not iterate on <code>c</code> variable, because knowing <code>a</code> and <code>b</code> we always
can calculate <code>c = 1000 - a - b</code>.</p>

<p>Problem solution transformed into next one:</p>

<p>``` clojure
(first (for [a (range 1 1000) b (range 1 1000)</p>

<pre><code>         :let [c (- 1000 a b)]
         :when (is-triplet? a b c)] (* a b c)))
</code></pre>

<p>```</p>

<h3>Trick #2</h3>

<p>Use rule <code>a &lt; b &lt; c</code> from problem definition. Then our iteration will be:</p>

<p><code>clojure
(for [a (range 1 1000) b (range a (- 1000 a))])
</code></p>

<h3>Trick #3</h3>

<p><code>is-triplet?</code> predicate use 3 multiplications, addition and comparison.
We can add to <code>:when</code> section, predicate that compare <code>c</code> to <code>b</code>. This is also
slightly reduce number of <code>is-triplet?</code> execution.</p>

<p><code>clojure
:when (and (&gt; c b) (is-triplet? a b c))
</code></p>

<p>Now solution found in ~45 msecs. 1000 times faster. Not bad.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem009.clj">(apply str (reverse "buHtiG"))</a></p>

<p><strong>P.S.</strong> Unfortunately, there was nothing in this problem about new clojure
functions, programming and even problem was not challenging. But you see the way how
we solve it. We tried "bad" approach with knowing about all its disadvantages.
One more step and we improved it and got right solution. So it is not that bad
approach to try simple solution, even if it is wrong.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 008]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-008/"/>
    <updated>2012-11-27T22:53:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-008</id>
    <content type="html"><![CDATA[<blockquote><p>Find the greatest product of five consecutive digits in the 1000-digit number.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=8">http://projecteuler.net/problem=8</a></p>

<p><em>Large number under the cut.</em></p>

<!-- more -->


<p><code>
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
</code></p>

<p>Idea behind this problem is pretty straightforward:</p>

<ol>
<li>Init <code>maximum</code> with some small value, zero would be good.</li>
<li>Take first 5 digits, calculate the product.</li>
<li>If product is greater than our current <code>maximum</code>, reassign it.</li>
<li>Shift, to take other 5 digits, and back to the step 1.</li>
</ol>


<p>A simple optimization can be applied: if our last element of 5 digit group is zero,
then skip 5 shifts. But it's details.</p>

<p>Let's make our problem little harder to get more from clojure.</p>

<p>Assume that these digits stored in the file. First thing we need: to read the file.</p>

<p><code>clojure
(slurp "path/to/the/file")
</code></p>

<p><a href="http://clojuredocs.org/clojure_core/clojure.core/slurp">slurp</a> is the simplest
function to read file content (<em>In fact, not only files</em>).
It just returns string representation of the whole file.</p>

<p>Then we need to break one large string into symbols.</p>

<p><code>clojure
(seq "helloyo") =&gt; (\h \e \l \l \o \y \o)
</code></p>

<p><a href="http://clojuredocs.org/clojure_core/clojure.core/seq">seq</a> return a sequence with linear access
to collection. If applied to string, return sequence of characters.</p>

<p>But, there are some garbage in the file we don't want, new lines for example.</p>

<p><code>clojure
(remove #(= \newline %) [\h \e \l \l \o \newline \y \o])
</code></p>

<p>(<em>slash</em>) + something - represents character in clojure.
<code>\newline</code> is a new line, known as <code>\n</code> in other languages.</p>

<p>Now we have long sequence with all digits from file.
Need to get all consecutive groups with 5 letters.</p>

<p><code>clojure
(partition 5 1 [\h \e \l \l \o \y \o]) =&gt; [[\h \e \l \l \o] [\e \l \l \o \y] ... ]
</code></p>

<p><a href="http://clojuredocs.org/clojure_core/clojure.core/partition">partition</a>
is an excelent function for such tasks. We specify <code>5</code> - size of partition,
and <code>1</code> shift size. It generates all consecutive groups with 5 elements till the end.</p>

<p>Calulating the product for each group gives us the solution.</p>

<p><code>clojure
(reduce * [1 2 3 4])
</code></p>

<p>Not so fast.</p>

<p>You, probably, get <code>ClassCastException</code>.</p>

<p>After reading the file, we just get bunch of characters,
instead of digits in mathematical sense. And applied mathematical operation <code>*</code> to them.
So, simply speaking, <code>\1</code> is not <code>1</code>.</p>

<p>That's why we need to transform every digit character to it's actual digit value.</p>

<p><code>clojure
(map #(- (int %) 48) [\1 \2 \3]) =&gt; [1 2 3]
</code></p>

<p>This awful implementation do the work.</p>

<ul>
<li>Cast each character to int, get the <a href="http://en.wikipedia.org/wiki/ASCII">ASCII</a>
representation for digit.</li>
<li>From each ASCII value we subtract <code>48</code> and get digit value.</li>
</ul>


<p>Applying <code>product</code> of digits defined earlier we get solution to this problem.</p>

<p>Again, full code on <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem008.clj">GitHub</a>.</p>

<p><strong>P.S.</strong> <code>slurp</code> function very powerful and has may applications. You can specify encoding
for reading as you want or read whole html page by url. But it is also very dangerous function,
because reads all file contents to the memory and can take considerable amount of time. If you have
a large file, say 15GB, read it line by line with buffered reader. Also, note
<a href="http://clojuredocs.org/clojure_core/clojure.core/spit">spit</a> function. It is opposite to <code>slurp</code> -
writes string to the file.</p>
]]></content>
  </entry>
  
</feed>
