<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2013-02-26T02:36:15+02:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Magic. Part 4: sun.misc.Unsafe]]></title>
    <link href="http://mishadoff.github.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/"/>
    <updated>2013-02-26T02:37:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe</id>
    <content type="html"><![CDATA[<p>Java is a safe programming language and prevents programmer
from doing memory corruption mistakes. But, there is a way to
do such <em>mistakes</em> intentionally, using <code>Unsafe</code> class.</p>

<p>This article is quick overview of <code>sun.misc.Unsafe</code> <em>public</em> API and few
interesting cases of its usage.</p>

<!-- more -->

<h3 id="unsafe-instantiation">Unsafe instantiation</h3>

<p>Before usage, we need to create instance of <code>Unsafe</code> object.
There is no simple way to do it like <code>Unsafe unsafe = new Unsafe()</code>,
because <code>Unsafe</code> class has private constructor and <code>getUnsafe()</code> method
available only from trusted code.</p>

<p>We can make our code “trusted”.</p>

<p><code>Unsafe</code> class contains its instance called <code>theUnsafe</code>, which marked as <code>private</code>.
We can steal that variable via java reflection.</p>

<p><code>java
Field f = Unsafe.class.getDeclaredField("theUnsafe");
f.setAccessible(true);
Unsafe unsafe = (Unsafe) f.get(null);
</code></p>

<p><em>Note:</em> Ignore your IDE. For example, eclipse show error “Access restriction…”
but if you run code, all works just fine. If the error is annoying, ignore errors on
<code>Unsafe</code> usage in:</p>

<pre><code>Preferences -&gt; Java -&gt; Compiler -&gt; Errors/Warnings -&gt;
Deprecated and restricted API -&gt; Forbidden reference -&gt; Warning
</code></pre>

<h3 id="unsafe-api">Unsafe API</h3>

<p>Class <a href="http://www.docjar.com/docs/api/sun/misc/Unsafe.html">sun.misc.Unsafe</a>
consists of <code>105</code> methods. There are, actually,
few groups of important methods for manipulating with various entities.
Here is some of them:</p>

<ul>
  <li><strong>Info</strong>. Just returns some low-level memory information.
    <ul>
      <li><code>addressSize</code></li>
      <li><code>pageSize</code></li>
    </ul>
  </li>
  <li><strong>Objects</strong>. Provides methods for object and its fields manipulation.
    <ul>
      <li><code>allocateInstance</code></li>
      <li><code>objectFieldOffset</code></li>
    </ul>
  </li>
  <li><strong>Classes</strong>. Provides methods for classes and static fields manipulation.
    <ul>
      <li><code>staticFieldOffset</code></li>
      <li><code>defineClass</code></li>
      <li><code>defineAnonymousClass</code></li>
      <li><code>ensureClassInitialized</code></li>
    </ul>
  </li>
  <li><strong>Arrays</strong>. Arrays manipulation.
    <ul>
      <li><code>arrayBaseOffset</code></li>
      <li><code>arrayIndexScale</code></li>
    </ul>
  </li>
  <li><strong>Synchronization</strong>. Low level primitives for synchronization.
    <ul>
      <li><code>monitorEnter</code></li>
      <li><code>tryMonitorEnter</code></li>
      <li><code>monitorExit</code></li>
      <li><code>compareAndSwapInt</code></li>
      <li><code>putOrderedInt</code></li>
    </ul>
  </li>
  <li><strong>Memory</strong>. Direct memory access methods.
    <ul>
      <li><code>allocateMemory</code></li>
      <li><code>copyMemory</code></li>
      <li><code>freeMemory</code></li>
      <li><code>getAddress</code></li>
      <li><code>getInt</code></li>
      <li><code>putInt</code></li>
    </ul>
  </li>
</ul>

<h3 id="interesting-use-cases">Interesting use cases</h3>

<h4 id="avoid-initialization">Avoid initialization</h4>

<p><code>allocateInstance</code> method can be <em>useful</em> when you need to skip object initialization phase
or bypass security checks in constructor. Consider following class:</p>

<p>``` java
class A {
    private long a; // not initialized value</p>

<pre><code>public A() {
    this.a = 1; // initialization
}

public long a() { return this.a; } } ```
</code></pre>

<p>Instantiating it using constructor, reflection and unsafe gives
different results.</p>

<p>``` java
A o1 = new A(); // constructor
o1.a(); // prints 1</p>

<p>A o2 = A.class.newInstance(); // reflection
o2.a(); // prints 1</p>

<p>A o3 = (A) unsafe.allocateInstance(A.class); // unsafe
o3.a(); // prints 0
```</p>

<h4 id="sizeof"><strong>sizeOf</strong></h4>

<p>Using <code>objectFieldOffset</code> method we can implement C-style <code>sizeof</code> function.
This implementation returns <em>shallow</em> size of object:</p>

<p>``` java
public static long sizeOf(Object o) {
    Unsafe u = getUnsafe();
    HashSet<field> fields = new HashSet<field>();
    Class c = o.getClass();
    while (c != Object.class) {
        for (Field f : c.getDeclaredFields()) {
            if ((f.getModifiers() &amp; Modifier.STATIC) == 0) {
                fields.add(f);
            }
        }
        c = c.getSuperclass();
    }</field></field></p>

<pre><code>// get offset
long maxSize = 0;
for (Field f : fields) {
    long offset = u.objectFieldOffset(f);
    if (offset &gt; maxSize) {
        maxSize = offset;
    }
}

return ((maxSize/8) + 1) * 8;   // padding } ```
</code></pre>

<p>Algorithm is the following: go through all <em>non-static</em> fields including all
superclases, get offset for each field, find maximum and add padding.
Probably, I missed something, but idea is clear.</p>

<p>In fact, for good and accurate <code>sizeof</code> function better to use
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html">java.lang.instrument</a> package</p>

<h4 id="big-arrays"><strong>Big Arrays</strong></h4>

<p>As you know <code>Integer.MAX_VALUE</code> constant is a max size of java array.
Using direct memory allocation we can create arrays with size limited by only heap size.</p>

<p>Here is <code>SuperArray</code> implementation:</p>

<p>``` java
class SuperArray {
    private final static int BYTE = 1;</p>

<pre><code>private long size;
private long address;

public SuperArray(long size) {
    this.size = size;
    address = getUnsafe().allocateMemory(size * BYTE);
}

public void set(long i, byte value) {
    getUnsafe().putByte(address + i * BYTE, value);
}

public int get(long idx) {
    return getUnsafe().getByte(address + idx * BYTE);
}

public long size() {
    return size;
} } ```
</code></pre>

<p>And sample usage:</p>

<p><code>java
long SUPER_SIZE = (long)Integer.MAX_VALUE * 2;
SuperArray array = new SuperArray(SUPER_SIZE);
System.out.println("Array size:" + array.size()); // 4294967294
for (int i = 0; i &lt; 100; i++) {
    array.set((long)Integer.MAX_VALUE + i, (byte)3);
    sum += array.get((long)Integer.MAX_VALUE + i);
}
System.out.println("Sum of 100 elements:" + sum);  // 300
</code></p>

<h4 id="memory-corruption">Memory corruption</h4>

<p>This one is usual for every C programmer.
By the way, its common technique for security bypass.</p>

<p>Consider some easy class that check acces rules:</p>

<p>``` java
class Guard {
    private int ACCESS_ALLOWED = 1;</p>

<pre><code>public boolean giveAccess() {
    return 42 == ACCESS_ALLOWED;
} } ```
</code></pre>

<p>The client code is <em>very secure</em> and calls
<code>giveAccess()</code> to check access rules. Unfortunately, for clients,
it always returns <code>false</code>. Only privileged users <em>somehow</em> can change
value of <code>ACCESS_ALLOWED</code> constant and get access.</p>

<p>In fact, it’s not true. Here is the code demostrates it:</p>

<p>``` java
Guard guard = new Guard();
guard.giveAccess();   // false, no access</p>

<p>// bypass
Unsafe unsafe = getUnsafe();
Field f = guard.getClass().getDeclaredField(“ACCESS_ALLOWED”);
unsafe.putInt(guard, unsafe.objectFieldOffset(f), 42); // memory corruption</p>

<p>guard.giveAccess(); // true, access granted
```</p>

<p>Now all clients will get unlimited access.</p>

<h4 id="concurrency">Concurrency</h4>

<p><code>compareAndSwap</code> methods are atomic and can be used to implement
high-performance lock-free data structures.</p>

<p>For example, consider the problem to increment value in the shared object
using lot of threads.</p>

<p>First we define simple interface <code>Counter</code>:</p>

<p><code>java
interface Counter {
    void increment();
    long getCounter();
}
</code></p>

<p>Then we define worker thread <code>CounterClient</code>, that uses <code>Counter</code>:</p>

<p>``` java
class CounterClient implements Runnable {
    private Counter c;
    private int num;</p>

<pre><code>public CounterClient(Counter c, int num) {
    this.c = c;
    this.num = num;
}

@Override
public void run() {
    for (int i = 0; i &lt; num; i++) {
        c.increment();
    }
} } ```
</code></pre>

<p>And this is testing code:</p>

<p><code>java
int NUM_OF_THREADS = 1000;
int NUM_OF_INCREMENTS = 100000;
ExecutorService service = Executors.newFixedThreadPool(NUM_OF_THREADS);
Counter counter = ... // creating instance of specific counter
long before = System.currentTimeMillis();
for (int i = 0; i &lt; NUM_OF_THREADS; i++) {
    service.submit(new CounterClient(counter, NUM_OF_INCREMENTS));
}
service.shutdown();
service.awaitTermination(1, TimeUnit.MINUTES);
long after = System.currentTimeMillis();
System.out.println("Counter result: " + c.getCounter());
System.out.println("Time passed in ms:" + (after - before));
</code></p>

<p>First implementation is not-synchronized counter:</p>

<p>``` java
class StupidCounter implements Counter {
    private long counter = 0;</p>

<pre><code>@Override
public void increment() {
    counter++;
}

@Override
public long getCounter() {
    return counter;
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 99542945
Time passed in ms: 679
</code></p>

<p>Working fast, but no threads management at all, so result is inaccurate.
Second attempt, add easiest java-way synchronization:</p>

<p>``` java
class SyncCounter implements Counter {
    private long counter = 0;</p>

<pre><code>@Override
public synchronized void increment() {
    counter++;
}

@Override
public long getCounter() {
    return counter;
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 10136
</code></p>

<p>Radical synchronization always work. But timings is awful.
Let’s try <code>ReentrantReadWriteLock</code>:</p>

<p>``` java
class LockCounter implements Counter {
    private long counter = 0;
    private WriteLock lock = new ReentrantReadWriteLock().writeLock();</p>

<pre><code>@Override
public void increment() {
    lock.lock();
    counter++;
    lock.unlock();
}

@Override
public long getCounter() {
    return counter;
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 8065
</code></p>

<p>Still correct, and timings are better. What about atomics?</p>

<p>``` java
class AtomicCounter implements Counter {
    AtomicLong counter = new AtomicLong(0);</p>

<pre><code>@Override
public void increment() {
    counter.incrementAndGet();
}

@Override
public long getCounter() {
    return counter.get();
} } ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 6552
</code></p>

<p><code>AtomicCounter</code> is even better. Finally, try <code>Unsafe</code>
primitive <code>compareAndSwapLong</code> to see if it is really privilegy to use it.</p>

<p>``` java
class CASCounter implements Counter {
    private long counter = 0;
    private Unsafe unsafe;
    private long offset;</p>

<pre><code>public CASCounter() throws Exception {
    unsafe = getUnsafe();
    offset = unsafe.objectFieldOffset(CASCounter.class.getDeclaredField("counter"));
}

@Override
public void increment() {
    long before = counter;
    while (!unsafe.compareAndSwapLong(this, offset, before, before + 1)) {
        before = counter;
    }
}

@Override
public long getCounter() {
    return counter;
} ```
</code></pre>

<p>Output:</p>

<p><code>
Counter result: 100000000
Time passed in ms: 6454
</code></p>

<p>Hmm, seems equal to atomics. Maybe atomics use <code>Unsafe</code>? (<em>YES</em>)</p>

<p>In fact this example is easy enough, but it shows real power of <code>Unsafe</code>.</p>

<h3 id="bonus">Bonus</h3>

<p>Documentation for <code>park</code> method from <code>Unsafe</code> class contains
longest English sentence I’ve ever seen:</p>

<blockquote>
  <p>Block current thread, returning when a balancing
unpark occurs, or a balancing unpark has
already occurred, or the thread is interrupted, or, if not
absolute and time is not zero, the given time nanoseconds have
elapsed, or if absolute, the given deadline in milliseconds
since Epoch has passed, or spuriously (i.e., returning for no
“reason”). Note: This operation is in the Unsafe class only
because unpark is, so it would be strange to place it
elsewhere.</p>
</blockquote>

<h3 id="conclusion">Conclusion</h3>

<p>Although, <code>Unsafe</code> has a bunch of useful applications, never use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 015]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-015/"/>
    <updated>2013-02-19T00:38:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-015</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Starting in the top left corner of a 2 x 2 grid, there are 6 routes
(without backtracking) to the bottom right corner.</p>

  <p>How many routes are there through a 20 x 20 grid?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=15">http://projecteuler.net/problem=15</a></p>

<!-- more -->

<p><img src="http://projecteuler.net/project/images/p_015.gif" alt="" /></p>

<p>Picture is always a huge help to find correct the solution.
Let’s see the pattern here, with another picture</p>

<p><em>Warning:</em> If you don’t understand art, don’t look at that picture.</p>

<p><img src="http://i.imgur.com/WNEQNxG.png" alt="" /></p>

<p>It’s a solution for 3 x 3 grid. We trying to process it by steps:</p>

<ul>
  <li>At the start we located at the top left corner <code>[0, 0]</code>. There is just one case
to be at the start so we put <code>1</code> to that point.</li>
  <li>Then we move either down <code>[1, 0]</code> or right <code>[0, 1]</code>, and we put <code>1</code>
on the edges of the second diagonal line.</li>
  <li>Obviously, the point <code>[1, 1]</code> we can reach either from <code>[0, 1]</code> or from <code>[1, 0]</code>,
so there are two routes, and so on.</li>
</ul>

<p>If you just output the numbers from each diagonal line you’ll get:</p>

<p>```
       1
      1 1
     1 2 1
    1 3 3 1</p>

<p>```</p>

<p>It’s famous <a href="http://en.wikipedia.org/wiki/Pascal%27s_triangle">Pascal’s triangle</a>.
Each element in this triangle obtained by sum of two closest elements from the upper row.</p>

<p>To get desired result we need to sum these numbers again, until we get one number.
But it’s also numbers from Pascal’s triangle.</p>

<p><code>
    1   3   3   1
      4   6   4
       10  10
         20
</code></p>

<p>We can treat Pascal’s triangle as a sequence, and each row is an element. Then the
following function calculates next row:</p>

<p><code>clojure
(defn routes-extend [lst]
  (let [size (count lst)]
    (for [i (range (inc size))]
      (if (or (= 0 i) (= size i)) 1
        (+ (nth lst (dec i)) (nth lst i))))))
</code></p>

<p>Usage:</p>

<p><code>
(routes-extend [1]) =&gt; [1 1]
(routes-extend [1 1]) =&gt; [1 2 1]
</code></p>

<p>Now we can build infinite sequence of Pascal’s triangle rows:</p>

<p><code>clojure
(iterate routes-extend [1])
</code></p>

<p>For <code>3 x 3</code> grid we had 7 diagonals, each of them represented one row.
Take a guess. For <code>n x n</code> grid we need to get <code>2 * n + 1</code> row. And take it
middle element, which, of course, will be with the index <code>n</code>.</p>

<p>That’s the final solution:</p>

<p><code>clojure
(let [n 20 d (inc (* n 2))]
  (nth (last (take d (iterate routes-extend [1]))) n))
</code></p>

<p>Problem solved.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem015.clj">Code</a></p>

<p><strong>P.S</strong> Two points I want to admit here. First of all, drawing pictures
and trying to understand problem with pictures is a powerful technique that must be
used for every problem.</p>

<p>Second of all, you can see that our algorithm has complexity of <code>O(n^2)</code>. But ideal
solution is <code>O(1)</code> with usage <a href="http://en.wikipedia.org/wiki/Binomial_coefficient">binomial coefficient</a>
<code>(2*n, n)</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standard ML]]></title>
    <link href="http://mishadoff.github.com/blog/standard-ml/"/>
    <updated>2013-02-16T13:33:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/standard-ml</id>
    <content type="html"><![CDATA[<p>Last weekend I was hacking <a href="http://en.wikipedia.org/wiki/Standard_ML">Standard ML</a> a bit.</p>

<!-- more -->

<h3 id="coursera">Coursera</h3>

<p>There are excellent course on coursera called <a href="https://class.coursera.org/proglang-2012-001/class/index">Programming Languages</a></p>

<p>Currently, the first half is available, that explains basic and advanced functional programming constructions
with Standard ML as primary language. Later some idioms will be presented using
<strong>Racket</strong> and <strong>Ruby</strong> (<em>maybe, I will finally understand ruby</em>) so you can treat this course as introduction
to these languages. In fact, it teaches much more than “<em>how to code in XXX</em>”.</p>

<h3 id="tools">Tools</h3>

<p>For playing with ML you need <a href="http://www.smlnj.org/">SML/NJ</a> compiler and
<a href="http://www.smlnj.org/doc/Emacs/sml-mode.html">sml-mode</a> for emacs.</p>

<p><em>If you don’t have emacs installed, do it right now!</em></p>

<h3 id="play">Play</h3>

<p>Following snippets give you basic understanding of ML or
refresh your knowledge for syntax.</p>

<p>Print “Hello, world!”:</p>

<p><code>sml
fun print_hello_world () = print "Hello, world\n";
</code></p>

<p>Variables (<em>in fact, values</em>):</p>

<p><code>sml
val a = 38;
val b = a + 3;
val c = b + 1;
</code></p>

<p>Conditionals:</p>

<p><code>sml
val cond = if 5 &gt; 4 then 5 else 4
</code></p>

<p>Boolean operators have terrible names:</p>

<p><code>sml
val cond2 = if 5 &gt; 4 andalso 4 &gt; 5 then 5 else 7
</code></p>

<p>Function with one parameter:</p>

<p><code>sml
fun square x = x * x
</code></p>

<p>Function with more than one parameter:</p>

<p><code>sml
fun sum (x, y, z) = x + y + z
</code></p>

<p>Actually, it’s not three parameters, it’s one parameter - tuple:</p>

<p><code>sml
fun swap (x, y) = (y, x)
</code></p>

<p>To access tuple elements use hash-number, note you can specify tuple type:</p>

<p><code>sml
fun get_month (date : int * string * int) : string= (#2 date)
val month1 = get_month(2012, "January", 21);
</code></p>

<p>You can specify input types and return type, but ML is very clever. Almost always
it can detect correct type using <em>type inference</em> without explicit definition.</p>

<p><em>I don’t understand it! Explain, please</em>. Comments:</p>

<p><code>sml
(* Operation '*' defined for int types, so this function has type int -&gt; int *)
fun cube x = x * x * x
</code></p>

<p>There is records. It’s like named tuples.</p>

<p><code>sml
fun get_month_real ({year, month, day}) = month
val month2 = get_month_real({year=2012, month="January", day=21});
</code></p>

<p>Using <code>let</code> form we can define new lexical scope:</p>

<p><code>sml
fun add3 x =
    let
        val num = 3
    in
        x + 3
    end
</code></p>

<p>This leads to closures (<em>function + context</em>):</p>

<p><code>sml
fun add3 x =
    let
        val num = 3
        fun add_to x = x + num
    in
        add_to x
    end
</code></p>

<p>Function <code>add_to</code> capture <code>num</code> value from context.</p>

<p>By the way functions are first-class objects and values also,
so we can assign one function to another:</p>

<p><code>sml
val another_cube = cube
</code></p>

<p>Function composition becomes a piece of cake:</p>

<p><code>sml
val cube_and_cube = cube o cube
</code></p>

<p>We even can pass function as a parameter:</p>

<p><code>sml
fun binary_apply (f, x, y) = f (x, y)
binary_apply(swap, 1, 2);
</code></p>

<p>We don’t forced to provide function name, we can use lambdas:</p>

<p><code>sml
binary_apply(fn (x, y) =&gt; x * y, 23, 46)
</code></p>

<p>This helps us easily implement such useful functions as <code>map</code>, <code>reduce</code> and <code>filter</code>.
But they are already available in
<a href="http://www.standardml.org/Basis/manpages.html">Standard ML Basis Library</a></p>

<p>Another great feature is <em>pattern-matching</em>. Here is factorial function</p>

<p><code>sml
fun factorial x =
    case x of
        0 =&gt; 1
      | _ =&gt; x * factorial(x - 1)
</code></p>

<p>or list concatenation</p>

<p><code>sml
fun concat (x, y) =
    case x of
        [] =&gt; y
      | x::xs =&gt; x::concat(xs, y)
</code></p>

<p>Honestly, it’s just baby examples of pattern matching. In fact, it is much more
powerful.</p>

<p>And the last thing I wanted to show is datatypes:</p>

<p>To define a list:</p>

<p><code>sml
datatype 'a list = EMPTY | CONS of 'a * 'a list
</code></p>

<p>To create that list:</p>

<p><code>sml
val list = CONS(1, CONS(2, CONS(3, EMPTY)))
</code></p>

<p>That’s very small part of all that can be done in ML. There are also a lot of useful
constructs and idioms that not covered: type synonyms, polymorphic types,
equality types, tail recursion, mutual recursion, function wrapping,
currying, partial application, advanced pattern matching, signatures,
modules and lot more.</p>

<p>If you really interested you will find a lot of these terms exciting.</p>

<p>Full code is available on
<a href="https://github.com/mishadoff/prog-experiment/blob/master/sml/play.sml">github</a></p>

<h3 id="impressions">Impressions</h3>

<p>ML is a great language. Perhaps, it is not so great as Java in enterprise, and not
so great as Clojure in rapid prototyping, but it’s worth to devote
few days for ML basics. It really improve your dev skills and maybe made your
<em>Factories</em>, <em>Bridges</em> and <em>Proxies</em> better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 014]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-014/"/>
    <updated>2013-02-16T01:08:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-014</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Which starting number, under one million, produces the longest Collatz chain?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=14">http://projecteuler.net/problem=14</a></p>

<!-- more -->

<blockquote>
  <p>The following iterative sequence is defined for the set of positive integers:</p>

  <p>n → n/2 (n is even)</p>

  <p>n → 3n + 1 (n is odd)</p>

  <p>Using the rule above and starting with 13, we generate the following sequence:</p>

  <p>13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</p>

  <p>It can be seen that this sequence (starting at 13 and finishing at 1)
contains 10 terms. Although it has not been proved yet (Collatz Problem),
it is thought that all starting numbers finish at 1.</p>

  <p>Which starting number, under one million, produces the longest chain?</p>

  <p>NOTE: Once the chain starts the terms are allowed to go above one million.</p>
</blockquote>

<p>Sequences again.
So, first of all we need function to detect next collatz number.
It is pretty straightforward:</p>

<p><code>clojure
(defn collatz-next [n]
  (if (even? n) (/ n 2) (inc (* n 3))))
</code></p>

<p>Using this <em>next-element-generator</em> we can generate infinite collatz sequence,
starting from number <code>n</code>:</p>

<p><code>clojure
(iterate collatz-next n)
</code></p>

<p>But instead of infinite sequence, we stop processing when we reach <code>1</code> and calculate
count of collatz chain sequence:</p>

<p><code>clojure
(defn collatz-chain-length [n]
  (inc (count (take-while #(&gt; % 1) (iterate collatz-next n)))))
</code></p>

<p>Now we have almost all code logic and just use it: calculate collatz chain
for all numbers in range <code>[1..1000000]</code>, find maximum and output its index:</p>

<p><code>clojure
(first (reduce #(if (&gt; (second %1) (second %2)) %1 %2)
               (map #(list % (collatz-chain-length %)) (range 1 1000000))))
</code></p>

<p>Run it. Wait a minute. I mean minute <em>literally</em>.</p>

<p>The time of caclulation is slightly greater than <strong>one minute</strong> on my machine,
and I have no idea how to solve it another way.</p>

<p>I am sure there is a better algorithm than mine. But I don’t know it.
What I know is try to re-read problem definion if you are stuck. Especially that part:</p>

<blockquote>
  <p>13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</p>
</blockquote>

<p>So, for <code>13</code> the chain length is <code>10</code>, for <code>40</code> is <code>9</code>, for <code>20</code> is <code>8</code>,…</p>

<p>Got it?</p>

<p>Each time we calculate length we perform <em>repeated calculation</em>. If we know
chain length of <code>13</code>, and whole its path to <code>1</code> we don’t need to calculate length
for <code>40</code>, <code>20</code> and so on.</p>

<p>So the optimization is <em>somehow to cache the results</em>. But at first we need to rewrite
it to have recursive solution.</p>

<p>Here the first (<em>and final</em>) version:</p>

<p><code>clojure
(defn collatz-chain-recursive [n]
  (if (= n 1) 1
      (inc (collatz-chain-recursive (collatz-next n)))))
</code></p>

<p>Recursion is impressive at the point that its implementation
almost exactly follows the problem definition. It is easy to understand.</p>

<p>But, as you may notice our implementation not
<a href="http://en.wikipedia.org/wiki/Tail_call">tail-recursive</a> so we can
have troubles. Do not think about it unless we actually have them.</p>

<p>For the sake of fun let’s run this function instead of previous to
obtain the results.</p>

<p><strong>20 seconds</strong>, it is great. I even don’t think that
this simple recursive function gives such boost in performance.</p>

<p>One little tweak in result function:</p>

<p><code>clojure
(first
  (apply max-key second
         (map #(list % (collatz-chain-recursive %)) (range 1 1000000))))
</code></p>

<p>And we have <strong>~12 seconds</strong>.</p>

<p>Unexpected “The End”. Yeah, I love The Doors.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem014.clj">code-code</a></p>

<p><strong>P.S.</strong> I really wanted to explain technique called
<a href="http://en.wikipedia.org/wiki/Memoization">memoization</a> and
simple clojure function <a href="http://clojuredocs.org/clojure_core/clojure.core/memoize">memoize</a>,
but seems that caching result doesn’t have much sense here because
12 seconds is acceptable. We will have chance to introduce
memoization later, where it will be more useful. By the way, I am <em>lazy</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 1]]></title>
    <link href="http://mishadoff.github.com/blog/programming-digest-1/"/>
    <updated>2013-02-12T02:00:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/programming-digest-1</id>
    <content type="html"><![CDATA[<p>How to get job at Google, estimate complexity of your algorithm,
what is <em>Structural Immutability</em>, why PHP is awful and Java is awesome, best programming jokes and lot more.</p>

<!-- more -->

<h3 id="get-that-job-at-googlehttpsteve-yeggeblogspotcom200803get-that-job-at-googlehtml">1. <a href="http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html">Get that job at Google</a></h3>

<blockquote>
  <p>…it’s highly likely that someone on the loop will be unimpressed with you,
even if you are Alan Turing. Especially if you’re Alan Turing,
in fact, since it means you obviously don’t know C++</p>
</blockquote>

<p>The quote accurately explains what this post about. The author gives great mental and
technical tips about interviewing process (not only in Google).
Big portion of motivation guaranteed, perhaps you man feel dumber after reading.</p>

<p>In few words, you must know: algorithm complexity, sorting, hashtables, trees,
graphs, other data structures, math, operating systems and at least one programming language very well.
Not bad, right? After reading that article I’ve build long-term learning plan for myself, which is still
not succesful. Great article.</p>

<h3 id="a-gentle-introduction-to-algorithm-complexity-analysishttpdiscretegrcomplexity">2. <a href="http://discrete.gr/complexity/">A Gentle Introduction to Algorithm Complexity Analysis</a></h3>

<p>This article helps you partially cover first thing from previous article: <em>algorithm complexity</em>.
By the way, it is written with understandable (<em>for programmers</em>) language, examples, pictures, excerpts - I like
such style.</p>

<p>After reading, you’ll understand what time/space complexity is, difference between <em>Theta</em> and <em>Big-O</em> notations,
recursive functions complexity and lot more. By the way, you will learn basic classes of time complexities, and get
skill to classify that complexities on O(n), O(n^2 ), O(n*logn), etc. Note, the articles consists of some excercises, which immediately followed
with solutions. It is more productive to solve this exercises by yourselves and then compare to solutions.</p>

<p>If you already know all that, don’t skip! It also helpful to fresh you knowledge.</p>

<h3 id="on-structural-immutabilityhttpclojurefunwordpresscom20130121on-structural-immutability">3. <a href="http://clojurefun.wordpress.com/2013/01/21/on-structural-immutability/">On Structural Immutability</a></h3>

<p>What is Structural Immutability?</p>

<p>We know difference between mutable and immutable data structures and their pros and cons.
Structural immutability means that you <em>can</em> change the contents of you data, but <em>can not</em> change their structure.
It gives better performance than plain immutable objects, but also keep your concurrent programs easier than with
full mutability. Plain old array is an example. Read it to know more.</p>

<h3 id="php-a-fractal-of-bad-designhttpmeveekuncomblog20120409php-a-fractal-of-bad-design">4. <a href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP: a fractal of bad design</a></h3>

<blockquote>
  <p>Virtually every feature in PHP is broken somehow</p>
</blockquote>

<p>Whole article is a criticism of bad PHP language design.</p>

<blockquote>
  <p>PHP was originally designed explicitly for non-programmers (and, reading between the lines, non-programs)</p>
</blockquote>

<p>Total destroy. I mean it - total.</p>

<blockquote>
  <p>Array… This one datatype acts as a list, ordered hash, ordered set,
sparse list, and occasionally some strange combination of those.
How does it perform? What kind of memory use will there be?
Who knows? Not like I have other options, anyway.</p>
</blockquote>

<p>As I never know PHP, and hope won’t, that article was one of the funniest things I ever read.</p>

<blockquote>
  <p>equality operator is not transitive…comparison is not even consistent</p>
</blockquote>

<p>If you PHPist don’t go away, just read it. Maybe it will change your life.</p>

<blockquote>
  <p>Genericism… There is none. If a function might need to do two slightly different things, PHP just has two functions.</p>
</blockquote>

<p>Stop quoting. Just read it.</p>

<h3 id="do-not-pass-this-way-againhttpgrimoirecamysqlchoose-something-else">5. <a href="http://grimoire.ca/mysql/choose-something-else">Do Not Pass This Way Again</a></h3>

<blockquote>
  <p>Considering MySQL? Use something else. Already on MySQL? Migrate.</p>
</blockquote>

<p>This article logically continues previous one, but for now critisism on MySQL.
Perhaps, it is not powerful as PHP version, but still worth to read.</p>

<h3 id="big-arrays-in-javahttpwwwomsndeblogbig-arrays-in-java">6. <a href="http://www.omsn.de/blog/big-arrays-in-java">Big arrays in Java</a></h3>

<p>Two articles of hate in a row, and currently Java? No way.
How much we hate Java so we love it. By the way, JDK8 is soon.</p>

<p>Maybe this post not so expressive as previous ones, but it reveals capability I never knew of.
How to create array in Java with size greater than <code>Integer.MAX_VALUE</code>. Use the undocumented
class <code>sun.misc.Unsafe</code>. Just note this only works in SunJDK and OpenJDK.</p>

<h3 id="state-of-the-lambdahttpcropenjdkjavanetbriangoetzlambdalambda-state-4html">7. <a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-4.html">State of the Lambda</a></h3>

<p>If we started about JDK8…</p>

<p>The most interesting feature set in expected JDK8 is Project Lambda.</p>

<p>Functional interfaces and functions without all that finals in lexical scope and anonymous classes,
common patterns for list processing like <code>map</code>, <code>reduce</code> and <code>filter</code>,
parallelism, streams, method references and lot more comming soon.</p>

<p><em>What is the default method implementation in the interface?!</em></p>

<h3 id="fantastic-game-development-tutorials-from-across-the-webhttpgamedevtutspluscomarticlesroundupsfantastic-gamedev-tutorials-from-across-the-web">8. <a href="http://gamedev.tutsplus.com/articles/roundups/fantastic-gamedev-tutorials-from-across-the-web/">40+ Fantastic Game Development Tutorials From Across the Web</a></h3>

<p>Have you ever had the passion to write your own game?</p>

<p>I had. Because I like games and I even tried. Unfortunately, not so succesful as expected, but anyway.</p>

<blockquote>
  <p>We need to go deeper</p>
</blockquote>

<p>Honestly, it’s not a joke that I post link to another digest. It gathers a lot of gamedev tutorials and if
you really interested in gamedev, you’ll find a lot of there including game algorithms,
popular engine tutorials, math behind the games, design questions and more useful tips. Great stuff.</p>

<h3 id="how-to-pair-socks-from-a-pile-efficientlyhttpstackoverflowcomquestions14415881how-to-pair-socks-from-a-pile-efficiently">9. <a href="http://stackoverflow.com/questions/14415881/how-to-pair-socks-from-a-pile-efficiently">How to pair socks from a pile efficiently?</a></h3>

<p>Bored to pair your socks every time? Learn how to do it efficiently.</p>

<p>At first glance it is a humorous question, indeed it is, but also it is an interesting real-world
problem with variety of algorithms can be applied. I think all algorithm courses should be teached
that way.</p>

<h3 id="what-is-your-best-programming-jokehttpstackoverflowcomquestions234075what-is-your-best-programmer-joke1284458">10. <a href="http://stackoverflow.com/questions/234075/what-is-your-best-programmer-joke/1284458">What is your best programming joke</a></h3>

<blockquote>
  <p>If you put a million monkeys at a million keyboards, one of them will eventually write a Java program.</p>

  <p>The rest of them will write Perl programs.</p>
</blockquote>

<p>If you have an hour or two reserved for laughing, just read this. A <strong>lot</strong> of
crazy programming jokes. Stackoverflow community is amazing.</p>
]]></content>
  </entry>
  
</feed>
