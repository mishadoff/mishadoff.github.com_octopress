<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2013-02-12T02:58:15+02:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming Digest 1]]></title>
    <link href="http://mishadoff.github.com/blog/programming-digest-1/"/>
    <updated>2013-02-12T02:00:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/programming-digest-1</id>
    <content type="html"><![CDATA[<p>How to get job at Google, estimate complexity of your algorithm,
what is <em>Structural Immutability</em>, why PHP is awful and Java is awesome, best programming jokes and lot more.</p>

<!-- more -->


<h3>1. <a href="http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html">Get that job at Google</a></h3>

<blockquote><p>...it's highly likely that someone on the loop will be unimpressed with you,
even if you are Alan Turing. Especially if you're Alan Turing,
in fact, since it means you obviously don't know C++</p></blockquote>

<p>The quote accurately explains what this post about. The author gives great mental and
technical tips about interviewing process (not only in Google).
Big portion of motivation guaranteed, perhaps you man feel dumber after reading.</p>

<p>In few words, you must know: algorithm complexity, sorting, hashtables, trees,
graphs, other data structures, math, operating systems and at least one programming language very well.
Not bad, right? After reading that article I've build long-term learning plan for myself, which is still
not succesful. Great article.</p>

<h3>2. <a href="http://discrete.gr/complexity/">A Gentle Introduction to Algorithm Complexity Analysis</a></h3>

<p>This article helps you partially cover first thing from previous article: <em>algorithm complexity</em>.
By the way, it is written with understandable (<em>for programmers</em>) language, examples, pictures, excerpts - I like
such style.</p>

<p>After reading, you'll understand what time/space complexity is, difference between <em>Theta</em> and <em>Big-O</em> notations,
recursive functions complexity and lot more. By the way, you will learn basic classes of time complexities, and get
skill to classify that complexities on O(n), O(n<sup>2</sup> ), O(n*logn), etc. Note, the articles consists of some excercises, which immediately followed
with solutions. It is more productive to solve this exercises by yourselves and then compare to solutions.</p>

<p>If you already know all that, don't skip! It also helpful to fresh you knowledge.</p>

<h3>3. <a href="http://clojurefun.wordpress.com/2013/01/21/on-structural-immutability/">On Structural Immutability</a></h3>

<p>What is Structural Immutability?</p>

<p>We know difference between mutable and immutable data structures and their pros and cons.
Structural immutability means that you <em>can</em> change the contents of you data, but <em>can not</em> change their structure.
It gives better performance than plain immutable objects, but also keep your concurrent programs easier than with
full mutability. Plain old array is an example. Read it to know more.</p>

<h3>4. <a href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP: a fractal of bad design</a></h3>

<blockquote><p>Virtually every feature in PHP is broken somehow</p></blockquote>

<p>Whole article is a criticism of bad PHP language design.</p>

<blockquote><p>PHP was originally designed explicitly for non-programmers (and, reading between the lines, non-programs)</p></blockquote>

<p>Total destroy. I mean it - total.</p>

<blockquote><p>Array... This one datatype acts as a list, ordered hash, ordered set,
sparse list, and occasionally some strange combination of those.
How does it perform? What kind of memory use will there be?
Who knows? Not like I have other options, anyway.</p></blockquote>

<p>As I never know PHP, and hope won't, that article was one of the funniest things I ever read.</p>

<blockquote><p>equality operator is not transitive...comparison is not even consistent</p></blockquote>

<p>If you PHPist don't go away, just read it. Maybe it will change your life.</p>

<blockquote><p>Genericism... There is none. If a function might need to do two slightly different things, PHP just has two functions.</p></blockquote>

<p>Stop quoting. Just read it.</p>

<h3>5. <a href="http://grimoire.ca/mysql/choose-something-else">Do Not Pass This Way Again</a></h3>

<blockquote><p>Considering MySQL? Use something else. Already on MySQL? Migrate.</p></blockquote>

<p>This article logically continues previous one, but for now critisism on MySQL.
Perhaps, it is not powerful as PHP version, but still worth to read.</p>

<h3>6. <a href="http://www.omsn.de/blog/big-arrays-in-java">Big arrays in Java</a></h3>

<p>Two articles of hate in a row, and currently Java? No way.
How much we hate Java so we love it. By the way, JDK8 is soon.</p>

<p>Maybe this post not so expressive as previous ones, but it reveals capability I never knew of.
How to create array in Java with size greater than <code>Integer.MAX_VALUE</code>. Use the undocumented
class <code>sun.misc.Unsafe</code>. Just note this only works in SunJDK and OpenJDK.</p>

<h3>7. <a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-4.html">State of the Lambda</a></h3>

<p>If we started about JDK8...</p>

<p>The most interesting feature set in expected JDK8 is Project Lambda.</p>

<p>Functional interfaces and functions without all that finals in lexical scope and anonymous classes,
common patterns for list processing like <code>map</code>, <code>reduce</code> and <code>filter</code>,
parallelism, streams, method references and lot more comming soon.</p>

<p><em>What is the default method implementation in the interface?!</em></p>

<h3>8. <a href="http://gamedev.tutsplus.com/articles/roundups/fantastic-gamedev-tutorials-from-across-the-web/">40+ Fantastic Game Development Tutorials From Across the Web</a></h3>

<p>Have you ever had the passion to write your own game?</p>

<p>I had. Because I like games and I even tried. Unfortunately, not so succesful as expected, but anyway.</p>

<blockquote><p>We need to go deeper</p></blockquote>

<p>Honestly, it's not a joke that I post link to another digest. It gathers a lot of gamedev tutorials and if
you really interested in gamedev, you'll find a lot of there including game algorithms,
popular engine tutorials, math behind the games, design questions and more useful tips. Great stuff.</p>

<h3>9. <a href="http://stackoverflow.com/questions/14415881/how-to-pair-socks-from-a-pile-efficiently">How to pair socks from a pile efficiently?</a></h3>

<p>Bored to pair your socks every time? Learn how to do it efficiently.</p>

<p>At first glance it is a humorous question, indeed it is, but also it is an interesting real-world
problem with variety of algorithms can be applied. I think all algorithm courses should be teached
that way.</p>

<h3>10. <a href="http://stackoverflow.com/questions/234075/what-is-your-best-programmer-joke/1284458">What is your best programming joke</a></h3>

<blockquote><p>If you put a million monkeys at a million keyboards, one of them will eventually write a Java program.</p>

<p>The rest of them will write Perl programs.</p></blockquote>

<p>If you have an hour or two reserved for laughing, just read this. A <strong>lot</strong> of
crazy programming jokes. Stackoverflow community is amazing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Analysis: Facebook Hacker Cup 2013]]></title>
    <link href="http://mishadoff.github.com/blog/data-analysis-facebook-hacker-cup/"/>
    <updated>2013-02-01T12:42:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/data-analysis-facebook-hacker-cup</id>
    <content type="html"><![CDATA[<p>What programming language is most used?</p>

<!-- more -->


<p>To answer this question we use results from the qualification round
of <a href="https://www.facebook.com/hackercup">Facebook Hacker Cup 2013</a></p>

<p>If you only interested in statistics, <a href="#stats">skip!</a></p>

<h3>0. Intro</h3>

<p>As you may know, Facebook Hacker Cup is a programming contest. You have programming
problem and you need to solve it, in most cases in efficient way. You get input file
and you need to submit the output file in less than 6 minutes. Pretty simple.
The interesting part you need to submit your source code, that can be reviewed by
any of contestants after round.</p>

<p>These sources we use to get programming language statistics.</p>

<h3>1. Data</h3>

<p>Primary resource in statistics is data.</p>

<p>We have <a href="https://www.facebook.com/hackercup/scoreboard?round=185564241586420">scoreboard</a> page
(<em>You must be logged to FB to see results</em>) and interested in all links named <em>source</em>.
Open every link manually takes much time, so we will use automated approach
and will write program. Yes, in clojure.</p>

<h4>Dependencies</h4>

<p>For facebook authentification we can use:</p>

<ul>
<li><a href="https://github.com/DerGuteMoritz/clj-oauth2">OAuth authentification</a></li>
<li><a href="https://developers.facebook.com/">Facebook app</a></li>
<li><a href="http://seleniumhq.org/">Selenium</a></li>
</ul>


<p>I didn't think too much about alternatives,
because I wanted to try selenium in clojure. It's a time!</p>

<p>In few words, selenium provides capability to perform programmatically
browser events. Often used in automation. To use selenium in clojure program
just add <code>[clj-webdriver "0.6.0-beta2"]</code> to your project dependencies.</p>

<p>To simplify HTTP GET access we use library <code>[clj-http "0.6.3"]</code> and for
additional help <code>[org.clojure/clojure-contrib "1.2.0"]</code>.</p>

<p>In code we use following <em>requires</em></p>

<p><code>clojure
(:require [clj-http.client :as http])
(:require [clj-webdriver.taxi :as web])
(:require [clj-webdriver.core :as c])
(:require [clojure.contrib.math :as math])
</code></p>

<h4>Automation</h4>

<p>Before we will automate actions to gather sources we need to decide
what these actions are?</p>

<ul>
<li>Run browser</li>
<li>Open facebook url</li>
<li>Login to facebook

<ul>
<li>Enter login</li>
<li>Enter password</li>
<li>Press submit</li>
</ul>
</li>
<li>Go to scoreboard page</li>
<li>Process each page <code>loop [1..n]</code>

<ul>
<li>Go to page <code>n</code></li>
<li>Get all links</li>
<li>Filter links with sources</li>
<li>Process each link <code>loop [1..k]</code>

<ul>
<li>Go to link url <code>k</code></li>
<li>Get all page source</li>
<li>Filter out source code</li>
<li>Generate file name</li>
<li>Write source to file</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Pretty clear, right? Let's code it sequentially.</p>

<h4>Implementation</h4>

<ul>
<li><em>Run browser</em> and <em>Open facebook url</em></li>
</ul>


<p><code>clojure
(web/set-driver! {:browser :firefox} "http://facebook.com")
</code></p>

<ul>
<li><em>Login to facebook</em></li>
</ul>


<p><code>clojure
(web/input-text "#email" username)
(web/input-text "#pass" password)
(web/submit "#pass")
</code></p>

<ul>
<li><em>Go to scoreboard page</em></li>
</ul>


<p><code>clojure
(web/to "https://www.facebook.com/hackercup/scoreboard?round=185564241586420")
</code></p>

<ul>
<li><em>Process each page</em></li>
</ul>


<p><code>clojure
(doseq [page-num (range 1 (inc 114))]
  (process-page page-num))
</code></p>

<p>Number of pages is hardcoded. It's ok.
What is <code>process-page</code> method?</p>

<p>``` clojure
(defn process-page [n]
  (let [url (str "https://www.facebook.com/hackercup/scoreboard?round=185564241586420&amp;page=" n)]</p>

<pre><code>(web/to url)
(doseq [e (web/find-elements {:css "a"})
        :let [url (c/attribute e "href")]
        :when (and url (.startsWith url "https://fbcdn-dragon-a.akamaihd.net/"))]
  (process-url url))))
</code></pre>

<p>```</p>

<p>First of all,  we concat scoreboard link with page number to get actual link to each page.
Then we go to that page obtain all <code>a</code> elements, get their <code>href</code> values and filter
to save only ones that contain source code.</p>

<ul>
<li><em>Process each url</em></li>
</ul>


<p>``` clojure
(defn process-url [url]
  (let [source-code (:body (http/get url))</p>

<pre><code>    file-name (generate-filename url)]
(spit file-name source-code)))
</code></pre>

<p>```</p>

<p>In this part we obtain html source of url and get its <code>:body</code> tag.
As all source urls contain just plain text, we don't need additional
filtering. Just save it to file.</p>

<ul>
<li><em>Generate file name</em></li>
</ul>


<p>I don't want to name file as url. That's why for naming we use following
function: <code>timestamp + underscore + absolute value of url hashcode</code></p>

<p><code>clojure
(defn generate-filename [url]
  (str DIRECTORY (System/currentTimeMillis) "_" (math/abs (hash url)) ".txt"))
</code></p>

<p><code>DIRECTORY</code> is just <code>def</code> for folder where you want to place all sources.</p>

<p>Whole script source available <a href="https://github.com/mishadoff/clj-statistic-tools/blob/master/src/clj_statistic_tools/fbhackercup2013.clj">here</a></p>

<h4>Execution</h4>

<p>To run that script you need to write in clojure REPL
<code>(run "username" "password")</code>, with correct values for <em>username</em> and <em>password</em>, obviously.</p>

<p>It works some time. <em>Some time</em> equals to eight hours on my machine. Long enough.
But it's ideal time for <em>night crawling</em>!</p>

<p>In the morning I had all work done.</p>

<p><code>
ls -1 | wc -l &amp;&amp; du
</code></p>

<p>prints</p>

<p><code>
20348
291120  .
</code></p>

<p>Good sign. We have more than 20K of source codes with total size almost 300Mb.</p>

<h3>2. Analysis</h3>

<p>Data is good. But no one interested in raw data, so we need process it.</p>

<p>Basically, we need to detect programming language by source file.
No extensions.</p>

<p>You can <a href="https://www.bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html">write your own classifier</a>
or use some existing tool.</p>

<p>I did few-minutes research on this topic and found
<a href="https://github.com/github/linguist">linguist</a> project.
It is written in <em>Ruby</em> and used in <a href="https://gist.github.com/">Gist</a> to
detect snippet language. Exactly what we need!</p>

<p><em>Unfortunately, I do not know ruby. I even could not build and run linguist classifier to
detect language in my files. Rvm, gems and modules driving me crazy. I surrendered.</em></p>

<p>Another solution to use javascript library <a href="http://softwaremaniacs.org/soft/highlight/en/">Highlight.js</a>.
It is used in syntax coloring, but have automatic language detection. Again, javascript and
reading files from filesystem... Don't tell me about Node.js</p>

<p>I decided to write my own "classifier". Honestly, it's just regexp matching mechanism
on common language constructions: keywords, imports, most used functions, etc.</p>

<p>Iterative approach has been used.</p>

<p>Select some popular language construction say <code>#include &lt;iostream&gt;</code> and filter it as <code>C</code>. After filtering
we detect some subset of <code>C</code> language, remove them from all files list and repeat again with another construction.</p>

<p><em>I don't know how <code>C++</code> different from <code>C</code>, so I accept them both as interchangeable languages but call it <code>C/C++</code>.
By the way, <code>C - C++ = 0</code>, so we assume they are equal.</em></p>

<p>I developed some number of patterns (they can be reviewed
<a href="https://github.com/mishadoff/clj-statistic-tools/blob/master/src/clj_statistic_tools/fbhackercup2013.clj">here</a>)
and processed all gathered source files.</p>

<p>Unfortunately, not all files were processed succesfully. I reviewed approximately 2000 files manually, few
new languages were detected but big amount of them were the crap: input data, binary files, some text information.</p>

<p>I think we don't lose too much if we say <em>only 99% of files were processed</em>.</p>

<h3><a id="stats"></a>3. Statistics</h3>

<p><img src="http://i.imgur.com/sWyfLqv.png" alt="" /></p>

<p>If you don't like this visualization, you can create your own. Here is data:</p>

<p>```
C/C++          10524
Java            3117
Python          3102
C#              1233
PHP              821
Ruby             488
Perl             142
Pascal/Delphi    136
Javascript       109
Haskell           85
Scala             72
Clojure           29
Go                28
Visual Basic      19
F#                12
Scheme             8
OCaml              7
Common Lisp        6
Lua                5
Matlab             4
Cocoa              3
Groovy             2
Dart               2
awk                1
Powershell         1
bash               1
Kotlin             1
ActionScript       1</p>

<h2>Dylan              1</h2>

<p>crap             192</p>

<h2>not detected     196</h2>

<p>TOTAL          20348
```</p>

<h3>4. Conclusion</h3>

<ul>
<li>Top 5 was predicted but it's extremely crazy that C/C++ occur more than 50%</li>
<li>Python has almost the same amount as Java</li>
<li>Good occurence of functional languages: Haskell, F#, Scala, Clojure, Ocaml</li>
<li>29 Clojure files that means there ~10 clojurists.</li>
<li>Two languages I never heard of:
<a href="http://www.dartlang.org/">Dart</a> and
<a href="http://opendylan.org/">Dylan</a></li>
<li><em>Parenthesis</em> languages still used: Common Lisp, Scheme and Clojure (of course)</li>
<li>Respect to matlabists</li>
<li>Few <em>exotic languages</em> used: awk, powershell, bash</li>
<li><a href="http://kotlin.jetbrains.org/">Kotlin</a> becomes popular!</li>
</ul>


<p><em>Warning:</em> Do not treat this statistics as real-world pattern. It is a programming competition with
a lot of geeks, they can use all they want. Also do not blame their code for quality. It was created just for
correctness and speed. Pay attention to code quality in production, but always remember:</p>

<blockquote><p>Your code may be elegant, by mine fucking works.</p>

<p>-- <a href="http://omniti.com/seeds/your-code-may-be-elegant">Leon Fayer</a></p></blockquote>

<br />


<p><strong>P.S.</strong> First of all, it is not high-accurate statistics. As I am not
programming guru, I don't know all possible languages' constructions
so it is likely that one construction overlapped with another. In that case
only first one will be checked. Ideally, would be good to have language
detecting library in clojure for future analysis. <em>Maybe</em>, I will do it.
Second of all, code presented here is not beautiful, not optimized, have a lot
of hardcode, but it works. Just in the spirit of Facebook Hacker Cup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 013]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-013/"/>
    <updated>2013-01-25T16:33:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-013</id>
    <content type="html"><![CDATA[<blockquote><p>Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=13">http://projecteuler.net/problem=13</a></p>

<!-- more -->


<p><em>Assume, here is a huge amount of digits. In any case, you can always find them in permalink.</em></p>

<p>What is the problem to sum one-hundred numbers?</p>

<p><code>clojure
(reduce + numbers)
</code></p>

<p>Done.</p>

<p>Are you kidding me? Not so fast. The question is <em>what type of number you must choose</em>
to sum all these numbers. <code>int</code>? <code>long</code>? <code>looooong</code>? <code>super long long</code>?</p>

<p>Technique to sum very long numbers called
<a href="http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic">Bignum arithmetic</a>.
To solve that problem you just need to implement this technique... or use already implemented.</p>

<p>Java (<em>yeah we talking about it</em>) support long arithmetics with
<a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html">BigInteger</a>.
And clojure does.</p>

<p><code>clojure
(reduce + (map bigint numbers))
</code></p>

<p>With that function you'll get the big number.
Just truncate first 10 digits and you are good.</p>

<p><code>clojure
(apply str (take 10 (str (reduce + (map bigint numbers)))))
</code></p>

<p>(for [i "<a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem013.clj">GitHub</a>"] i)</p>

<p><strong>P.S.</strong> Ideally, last line should be wrapped
with <code>(read-string ...)</code> to produce number type. But we using
manual submission, so it is fair.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 012]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-012/"/>
    <updated>2013-01-22T19:45:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-012</id>
    <content type="html"><![CDATA[<blockquote><p>What is the value of the first triangle number to have over five hundred divisors?</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=12">http://projecteuler.net/problem=12</a></p>

<!-- more -->


<blockquote><p>The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.</p>

<p>The first ten terms would be:</p>

<p>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</p>

<p>Let us list the factors of the first seven triangle numbers:</p></blockquote>

<pre><code> 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
</code></pre>

<blockquote><p>We can see that 28 is the first triangle number to have over five divisors.</p>

<p>What is the value of the first triangle number to have over five hundred divisors?</p></blockquote>

<p>When we see infinite sequence of some numbers, first thing that we do is implement it
with using <em>lazy sequences</em>. Simple explanation and example for Fibonacci numbers
can be found in <a href="/blog/clojure-euler-problem-002">Clojure Euler: Problem 002</a>.</p>

<p>We have an easy case, so we implement triangle number as
sum of all integers below:</p>

<p><code>clojure
(defn triangle-number [n]
  (reduce + (range 1 (inc n))))
</code></p>

<p>Don't miss the possibility reduce complexity from <code>O(n)</code> to <code>O(1)</code>.
Just apply <a href="http://en.wikipedia.org/wiki/Arithmetic_progression">arithmetic progression</a> formula.</p>

<p><code>clojure
(defn triangle-number [n]
  (* n (/ (+ n 1) 2)))
</code></p>

<p>Okey, we did small optimization (<em>not so small</em>) here and we have a function that calculates
triangle number for <code>n</code>. Let's find all of them!</p>

<p><code>clojure
(def triangles (map triangle-number (iterate inc 1)))
</code></p>

<p><code>triangles</code> refers to lazy sequence of <em>triangle numbers</em>.</p>

<blockquote><p>Do not evaluate lazy seqs!</p></blockquote>

<p>Use limit functions as <code>take</code>, <code>take-while</code>, <code>drop</code>, <code>drop-while</code> to test the
sequence values, or build other lazy seqs with <code>filter</code>, <code>map</code>, etc.</p>

<p>Now, we need a function to calculate number of divisors.</p>

<p><code>clojure
(defn num-of-divisors [n]
  (* 2 (count (filter #(= (mod n %) 0) (range 2 (inc (int (sqrt n))))))))
</code></p>

<p>If we remember <a href="/blog/clojure-euler-problem-003">Clojure Euler: Problem 003</a>
then we know that using <code>sqrt(n)</code> instead of <code>n</code> as upper bound for divisors
saves much time.
Don't forget mutiply that value by two, as you skip number after <code>sqrt(n)</code>.</p>

<p>Last step: to calculate number over 500 divisors</p>

<p><code>clojure
(first (drop-while #(&lt; (num-of-divisors %) 500) triangles))
</code></p>

<p>We got the result, but spent ~11 secs. Too much.</p>

<p><em>How can we improve our solution?</em></p>

<p>There is theorem about
<a href="http://en.wikipedia.org/wiki/Integer_factorization#Prime_decomposition">Prime Factorization</a>
states:</p>

<blockquote><p>Every positive integer has a unique prime factorization</p></blockquote>

<p>For example: 15 = 3<sup>1</sup> * 5<sup>1,</sup> 18 = 2<sup>1</sup> * 3<sup>2</sup> and so on.</p>

<p>Not hard to see that number of divisors from such factorization can be obtained
by multiplying all prime powers incremented by one.</p>

<p>For example number 18 have 6 divisors (1, 2, 3, 6, 9, 18).
If we take factorization 18 = 3<sup>1</sup> * 5<sup>1,</sup> then number of divisors is
equal to (1 + 1) * (2 + 1) = 6. You see, the same.
Not hard to prove this theorem or
<a href="http://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic#Proof">read the proof</a>.</p>

<p>Stop math, we need to code, so let's code that.</p>

<p>First of all, we need factorization method:</p>

<p>``` clojure
(defn factorize [n]
  (loop [x n [p &amp; ps] primes factors []]</p>

<pre><code>(cond (= 1 x) factors
      (zero? (mod x p)) (recur (/ x p) primes (conj factors p))
      :else (recur x ps factors))))
</code></pre>

<p>```</p>

<p>It uses <code>primes</code> from <code>clojure.contrib.lazy-seqs</code>.
This method prints all factors (<em>including duplicates</em>) for <code>n</code>.</p>

<p>For example:</p>

<p><code>clojure
(factorize 18) =&gt; [2 3 3]
</code></p>

<p>But instead of actual values of divisors, we just need their count.</p>

<p><code>clojure
(defn factorize-count [n]
  (reduce * (map (comp inc count) (vals (group-by identity (factorize n))))))
</code></p>

<p>Calculate the result again:</p>

<p><code>clojure
(first (drop-while #(&lt; (factorize-count %) 500) triangles))
</code></p>

<p>Bingo! It gives the correct result in less than 3 seconds.
Not bad as improvement.</p>

<p>{:code "<a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem012.clj">GitHub</a>"}</p>

<p><strong>P.S.</strong> If you test-addicted person, you, probably, point out
that function <code>num-of-divisors</code> yields incorrect result for input <code>1</code>.
We can live with that, because our needed number is much greater than 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Critical Software Bugs: Part 1]]></title>
    <link href="http://mishadoff.github.com/blog/critical-software-bugs-part-1/"/>
    <updated>2013-01-20T18:48:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/critical-software-bugs-part-1</id>
    <content type="html"><![CDATA[<p>Little journey through the history of most critical software bugs
with some code examples.</p>

<p><em>Do not try to reproduce any of these!</em></p>

<!-- more -->


<h3>Intro</h3>

<blockquote><p>Every last bug is the last but one.</p></blockquote>

<p><strong>Bugs</strong> are bad. Some of them cause uncomfortable work, more actions
than expected, inconsistency, layout issues, etc.
Some of them "<a href="http://en.wikipedia.org/wiki/Undocumented_feature">not a bug</a>" at all.</p>

<p><strong>Bad bugs</strong> much worse. They cause data corruption, invalid data representation,
unavailability to perform action, losing integrity and so on.</p>

<p>There are <strong>critical bugs</strong> with painful consequences. They can damage the health, nature, people
break buildings, technics. Theoretically, they
<a href="http://www.washingtonpost.com/wp-srv/inatl/longterm/coldwar/shatter021099b.htm">can lead to World War III</a>.
Hope, it's just theoretically.</p>

<p>If you are software engineer, you definitely will commit the bugs. No panacea.
But if we aware about common mistakes, then less likely we make that mistakes.</p>

<p>This article is review of famous most critical software bugs
including brief history, consequences, root causes, possible solutions, code examples and some advices.</p>

<h3><a href="http://en.wikipedia.org/wiki/Mariner_1">Mariner 1</a> (1962)</h3>

<p><strong>History:</strong>
In 1962, spacecraft <em>Mariner 1</em> was guided by computer program with error causes
racket do not follow its expected trajectory. To prevent tragic consequences, racket
was destoyed immediately.</p>

<p><strong>Consequences:</strong> Money, $18 million.</p>

<p><strong>Reason:</strong>
There are tons of versions about what type of error it was, but official version
is <em>missing hyphen</em> ('-') in program. Maybe it's just a myth for publicity,
but, anyway, if the reason of bug is incorrect handwritten formula transcription
from paper to computer, it's sad.</p>

<p>Probably, the root cause of that is writer and computer operator were different people.
It's common case for that times. <em>Programming</em> was synonym to the <em>scientific calculations</em> not
an enterprise, as nowadays. That's why scientist, programmer, and operator could be
different people.</p>

<p>Related story, it's why zero symbol has a period or diagonal line inside - to prevent
confusing with "big O" for "typer" person. Just compare <code>0</code> and <code>O</code>.</p>

<p><strong>Solution:</strong>
It's hardly can be a problem today (as it was 50 years ago), but if you write for somebody on the paper, write it accurate.
If you type into computer from someone's paper sheet, check, re-check and double re-check
what you typing. Ask if you have concerns. Especially, if it is the program for spaceship.</p>

<p>In very <em>far-fetched</em> example missing minus sign can result into invalid computation:</p>

<p>``` java
double getDiscountPercent() {</p>

<pre><code>return 0.25; // instead of return -0.25;
</code></pre>

<p>}</p>

<p>double calculatePrice(double initial) {</p>

<pre><code>return initial * (1.0 + getDiscountPercent());
</code></pre>

<p>}
```</p>

<p>That way instead of paying $75, you pay $125.</p>

<p><strong>Lesson:</strong> Always check your manual rewriting actions.</p>

<h3><a href="http://en.wikipedia.org/wiki/Siberian_pipeline_sabotage">Siberian pipeline sabotage</a> (1982)</h3>

<p><strong>History:</strong> Cold war. Soviet Union steal technology for managing gas pipelines from Canada. This
technology intentionally contained the bug (<a href="http://en.wikipedia.org/wiki/Logic_bomb">Logic Bomb</a>), developed by CIA
for sabotage purposes. Bomb triggered.</p>

<p><strong>Consequences:</strong> The greatest non-nuclear explosion in the world.</p>

<p><strong>Reason:</strong> Every microship from stolen technology would
work fine just for 10 million cycles, after that switches to another mode.</p>

<p>They <em>used someone's code</em>.</p>

<p><strong>Solution:</strong></p>

<blockquote><p>You shall not steal</p>

<p>-- <a href="http://en.wikipedia.org/wiki/Ten_Commandments">Ten Commandments</a></p></blockquote>

<p>Honestly, if someone's technology used for critical areas, like gas
transportation, it must be reviewed and tested. 100 times.</p>

<p>Story can be translated as:</p>

<p>I found memory card on the city dump.
Card contained one shell script <code>please-execute-me.sh</code>.
I <em>executed</em> it. System crashed. Who's guilty? Just me.</p>

<p>Use software from trusted sources.</p>

<p>In modern software world, we often use someone's libraries, frameworks,
APIs to build our own applications. We <em>expect</em> that code is <em>reviewed</em> and <em>tested</em>.
If not, we can help to do it. How we can be sure these libs without logic bombs?</p>

<p>Trust or review the sources. That's why I love open source software.</p>

<p>Logic bomb detection is not that hard. Just find the code that causes error
and see the reason of that error. Again, code review helps <em>to prevent</em> the
logic bomb instead of <em>fixing it</em>. Build application to production only from
version control system (<em>which is controlled, right?</em>)</p>

<p>Just for educational purposes: simple example of time-triggered logic bomb</p>

<p>``` java
public class LogicBombRunner {</p>

<pre><code>    public static void main(String[] args) {
            Thread thread = new Thread(new LogicBomb());
            thread.start();
    }
</code></pre>

<p>}</p>

<p>class LogicBomb implements Runnable {</p>

<pre><code>    private long toStop;
    private final long TIME_TO_TRIGGER = 1000 * 60 * 60 * 24 * 100;

    public LogicBomb() {
            toStop = System.currentTimeMillis() + TIME_TO_TRIGGER;
    }

    @Override
    public void run() {
            while (true) {
                    if (System.currentTimeMillis() &lt; toStop) {
                            System.out.println("System works fine.");
                            try {
                                    Thread.sleep(1000);
                            } catch (InterruptedException e) {
                                    e.printStackTrace();
                            }
                    } else {
                            System.out.println("Logic bomb triggered.");
                            throw new RuntimeException();
                    }
            }
    }
</code></pre>

<p>}</p>

<p>```</p>

<p>Yes. It throws <code>RuntimeException</code> after approximately 100 days from <code>LogicBomb</code> object creation.</p>

<p><strong>Lesson:</strong> Do not steal. Trust to very limited circle of people.</p>

<h3><a href="http://en.wikipedia.org/wiki/Therac-25">Therac-25</a> (1985 - 1987)</h3>

<p><strong>History:</strong> Therac-25 was a medical device for radiation therapy.
It could deliver either beta-particles or X-rays. Unfortunately,
operating system for controling the device was written with error,
that causes sad results.</p>

<p><strong>Consequences:</strong> At least 2 patients died, 4 patients were given overdose,
approximately 100 times intended dose.</p>

<p><strong>Reason:</strong> Investigation concluded the common reason was a
<em>bad software design</em>, <em>development practices</em> and a <em>set of bugs</em>
instead of some particular critical bug.</p>

<p>These bad practices and bugs include:</p>

<ul>
<li>No code review</li>
<li>Poor exception handling</li>
<li>No integration testing until device was assembled in the hospital</li>
<li>Poor hardware design</li>
<li><em>Bad code</em> reuse</li>
<li>Concurrency issues</li>
</ul>


<p><strong>Solution:</strong> Code review its a must. Even if you working
alone in the team, show sources to some your friend (programmer).
Two pair of eyes can spot the mistake two times more.</p>

<p><em>Poor exception handling</em>. If failure occurs, no one knows about that failure.
Never handle exception like that:</p>

<p>``` java
catch (SomeException e) {</p>

<p>}
```</p>

<p>In 99% there are must be a proper handling. If you don't know how
to handle, rethrow it, possible with wrapping:</p>

<p><code>java
catch (SomeException e) {
   throw new SpecificException(e);
}
</code></p>

<p>Much better to throw responsibility for handling one level up
in method signature:</p>

<p><code>java
void method() throws SomeException
</code></p>

<p>If your real intention to left catch block empty, say this:</p>

<p><code>java
catch (SomeExcpetion e) {
  // swallowing this exception is intended
}
</code></p>

<p><em>Bad code reuse</em>. <a href="http://en.wikipedia.org/wiki/Code_reuse">Code reuse</a> is a good thing.
Except the case when you reuse something with errors.</p>

<p>For example, I have following method for testing if number is even in some of my
previous projects (<em>yes, look at your code that was written few years ago</em>):</p>

<p>``` java
static boolean isEven(int num) {</p>

<pre><code>return num % 2 != 1;
</code></pre>

<p>}
```</p>

<p>This method returns incorrect result <code>true</code> for all negative odd numbers. Just because
<code>%</code> operator returns <code>-1</code> except <code>1</code> for negative numbers. Better do <em>NOT</em> reuse such method.
Just write new. And replace old method immediately.</p>

<p>``` java
static boolean isEven(int num) {</p>

<pre><code>return num % 2 == 0;
</code></pre>

<p>}
```</p>

<p><em>Concurrency</em>. Software world hardest issues are concurrency issues.</p>

<blockquote><p>You have a problem and decide to use threads.
Two now problems have you.</p>

<p>-- Some guy from internet</p></blockquote>

<br>


<blockquote><p>You have a problem and decide to use locks.
Now you have</p>

<p>-- Some another guy from internet</p></blockquote>

<p>If you know that some object will be shared between threads, one solution to
add <code>synchronized</code> (<a href="http://en.wikipedia.org/wiki/Monitor_%28synchronization%29">Monitor object</a>)
to each read/write state method. It will slow
your work with that object but prevent a lot of unexpected errors.</p>

<p>Although, there are much flexible synchronization mechanisms in java that
plain old <code>synchronized</code> as <a href="http://en.wikipedia.org/wiki/Semaphore_%28programming%29">semaphores</a>,
<a href="http://en.wikipedia.org/wiki/Mutual_exclusion">mutexes</a>,
<a href="http://en.wikipedia.org/wiki/Read_write_lock_pattern">read-write locks</a>.</p>

<p>I reccomend to use java package <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/package-summary.html">java.util.concurrent</a>.
It consists of a lot of concurrency techniques, like <code>Synchronizers</code>, <code>Executors</code>,
<code>Atomics</code>, <code>Concurrent Collections</code>, <code>Futures</code>, <code>Callbacks</code> etc.</p>

<p><strong>As a bonus:</strong> Good books about concurrency in Java:</p>

<ul>
<li><a href="http://www.goodreads.com/book/show/127932.Java_Concurrency_in_Practice">Java Concurrency in Practice</a></li>
<li><a href="http://www.goodreads.com/book/show/629608.Concurrent_Programming_in_Java">Concurrent Programming in Java</a></li>
</ul>


<p><strong>Lesson:</strong> Always handle exceptions. Pay more attention to concurrency issues.</p>

<h3><a href="http://en.wikipedia.org/wiki/MIM-104_Patriot">Patriot Missile</a> (1991)</h3>

<p><strong>History:</strong> In 1991, American battery fired Patriot Missile to intercept Iraq missile.
Interception failed because of system bug in time step calculation.
Iraq missile destroyed an American Army barracks.</p>

<p><strong>Consequences:</strong> 28 soldiers died, 100 injured.</p>

<p><strong>Reason:</strong> Floating point rounding error. System's internal clock was calculating
time by 0.1 seconds step (0.1, 0.2, 0.3, ...). As <code>0.1 = 1/10</code> have infinite binary representation
<code>0.0001100110011001100110011001100110011001100110011001100..</code>
and for this calculation 24-bit register was used,
register hold just <code>0.00011001100110011001100</code> introducing truncating error
<code>0.00000000000000000000000110011</code> what is approximately <code>0.0000001</code> in decimal.</p>

<p>Small enough, huh?</p>

<p>Not really, Multiplying this number for 100 hours gives:</p>

<pre><code>0.0000001 * 100 * 60 * 60 * 10 = 0.36 sec
</code></pre>

<p>During that time Iraq missile travels a half kilometer, and was out of tracking radius
for Patriot Missile. Bad things happen.</p>

<p><strong>Solution:</strong> Floats are very error-prone if we don't handle them correctly.</p>

<p>Predict the output of the following code:</p>

<p>``` java
for (double d = 0.0; d != 1.0; d = d + 0.1) {</p>

<pre><code>System.out.println("Iteration");
</code></pre>

<p>}
```</p>

<p>Infinite loop. The same problem as described above.</p>

<p>One solution is to use float that have exact binary representation.
<code>0.125</code>, <code>0.25</code>, <code>0.5</code> for example.
But this greatly reduces the space of allowed values and give less flexibility.</p>

<p>Another solution to use big decimal or ratio types.
Java, as example, have out-of-the-box <code>BigDecimal</code> class. Loop above rewritten with
that class works as expected:</p>

<p>``` java
BigDecimal init = new BigDecimal("0.0");
BigDecimal bound = new BigDecimal("1.0");
BigDecimal step = new BigDecimal("0.1")</p>

<p>for (BigDecimal d = init; !d.equals(bound); d = d.add(step)) {</p>

<pre><code>    System.out.println(d);
</code></pre>

<p>}
```</p>

<p>One disadvantage it has slower execution than with floats. Consider trade-off
between time and accuracy. If human lives on the stake, it's not relevant choice.</p>

<p><code>Ratio</code> class can be defined without any problems and used similar way.</p>

<p><strong>Lesson:</strong> If you need very accurate calculations use big decimals or ratios.</p>

<h3><a href="http://en.wikipedia.org/wiki/Mars_Climate_Orbiter">Mars Climate Orbiter</a> (1998)</h3>

<p><strong>History:</strong> Again about space. In 1998, communication with Mars Climate Orbiter
was lost, because of changed trajectory. Space probe was crashed near Mars.</p>

<p><strong>Consequences:</strong> Money, $327 million</p>

<p><strong>Reason:</strong> Navigation system design was developed by another team.
To represent Force they used <a href="http://en.wikipedia.org/wiki/Pound-force">pound-force</a>
from <a href="http://en.wikipedia.org/wiki/Imperial_units">Imperial units</a>
instead of <a href="http://en.wikipedia.org/wiki/Newton_%28unit%29">Newton</a>
from <a href="http://en.wikipedia.org/wiki/Metric_system">metric system</a>.</p>

<pre><code>1 Newton = 0.22 pound-force
</code></pre>

<p>Without provided conversion between them system failed.</p>

<p>Issue resemble to using dates in different timezones, but much more critical.</p>

<p><strong>Solution:</strong> First of all, at least one science-aware person must perform code review.
At least for code blocks with formulas and calculations. If there are comments about using pound-force,
the problem easy spotted. Second of all, received code must be tested on model
instead of physical machine. This is also, likely, detects the issue.
Developer who wrote that less guilty, but still guilty.</p>

<p>There are different approaches to implement this in java:</p>

<p>very bad approach, we don't know what units are used:</p>

<p><code>java
new Force(1.533);
</code></p>

<p>better (still bad) approach to indicate with comment:</p>

<p><code>java
// force in Newtons!
new Force(1.533);
</code></p>

<p>better (still bad) approach to indicate different constructors for different units:</p>

<p><code>java
new ForceInNewtons(1.533);
</code></p>

<p>I prefer approach where you specifies a <em>value</em> and <em>unit</em> in the constructor, and
they converted to something common unit (metric) convenient for use in internal representation:</p>

<p>``` java
enum ForceUnit {
  NEWTON,
  POUND_FORCE
}</p>

<p>new Force(1.533, ForceUnit.NEWTON);
```</p>

<p>A bit more code, but it is understandable and easy to use for different unit systems.
Unit conversion method can be defined either at the <code>enum ForceUnit</code> or <code>class Force</code> level.</p>

<p><strong>Lesson:</strong> Always explicitly indicate what units used in your code.</p>

<p><em>To be continued.</em></p>

<h3>Links</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/List_of_software_bugs">List of Software Bugs</a></li>
<li><a href="http://www5.in.tum.de/~huckle/bugse.html">Collection of Software Bugs</a></li>
<li><a href="http://www.wired.com/software/coolapps/news/2005/11/69355?currentPage=all">History's Worst Software Bugs</a></li>
<li><a href="http://www.sundoginteractive.com/sunblog/posts/top-ten-most-infamous-software-bugs-of-all-time">Top Ten Most Infamous Software Bugs Of All Time</a></li>
<li><a href="http://nssdc.gsfc.nasa.gov/nmc/spacecraftDisplay.do?id=MARIN1">NASA Mariner 1</a></li>
<li><a href="http://www.wired.com/culture/lifestyle/news/2004/03/62806">Soviets Burned By CIA Hackers?</a></li>
<li><a href="http://courses.cs.vt.edu/cs3604/lib/Therac_25/Therac_1.html">An Investigation of the Therac-25 Accidents</a></li>
<li><a href="http://seeri.etsu.edu/SECodeCases/ethicsC/PatriotMissile.htm">An Analysis of the Patriot Missile System</a></li>
<li><a href="http://www.ima.umn.edu/~arnold/disasters/patriot.html">The Patriot Missile Failure</a></li>
<li><a href="http://www.tysknews.com/Depts/Metrication/mystery_of_orbiter_crash_solved.htm">Mystery of Orbiter Crash Solved</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
