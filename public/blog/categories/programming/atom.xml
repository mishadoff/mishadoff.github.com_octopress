<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2013-01-13T18:44:31+02:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 010]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-010/"/>
    <updated>2012-12-15T00:23:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-010</id>
    <content type="html"><![CDATA[<blockquote><p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</p>

<p>Find the sum of all the primes below two million.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=10">http://projecteuler.net/problem=10</a></p>

<!-- more -->


<p>We have already worked with prime numbers in
<a href="/blog/clojure-euler-problem-003/">Problem 003</a> and
<a href="/blog/clojure-euler-problem-007/">Problem 007</a>. We also decided that
the best way to work with prime numbers in clojure to use <code>primes</code> lazy-seq
from <code>clojure.contrib.lazy-seqs</code>.</p>

<p>Gentle reminder: Just add proper <code>:use</code> to your file:</p>

<p><code>clojure
(:use [clojure.contrib.lazy-seqs :only (primes)])
</code></p>

<p>Then, the simplest problem solution to use <code>take-while</code> stream and <code>reduce</code> for sum:</p>

<p><code>clojure
(reduce + (take-while #(&lt; % 2000000) primes))
</code></p>

<p>Again, one-line solution. Let's run it.</p>

<p>Finding result on my nachine takes ~12 seconds. Small enough, but maybe somehow it can be improved?</p>

<h3>Sieve of Eratosthenes</h3>

<p><a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a> - ancient algorithm
for finding prime numbers. The best explanation how it works with picture from wiki:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="" /></p>

<p>Our first naive implementation:</p>

<p>```clojure
(defn sieve-1 []
  (loop [nums (set (cons 2 (range 3 2000000 2))) n 3]</p>

<pre><code>(if (&gt; n 2000000) (reduce + nums)
    (recur (clojure.set/difference nums (set (range (* n n) 2000000 n))) (inc n)))))
</code></pre>

<p>```</p>

<p><em>Note:</em> <a href="http://clojuredocs.org/clojure_core/clojure.set/difference">clojure.set/difference</a> function
find the difference between two sets.</p>

<p>This recursive implementation is even worse than our oneliner, it calculates the result in ~24 seconds.</p>

<p>Primary optimisation is to use <code>(* n n)</code> as recursion base instead of <code>n</code>. Because of there are no prime
numbers if we crossed greater than square root of maximum. Problem evolves.</p>

<p>``` clojure
(defn sieve-2 []
  (loop [nums (set (cons 2 (range 3 2000000 2))) n 3]</p>

<pre><code>(if (&gt; (* n n) 2000000) (reduce + nums)
    (recur (clojure.set/difference nums (set (range (* n n) 2000000 n))) (inc n)))))
</code></pre>

<p>```</p>

<p>~21 seconds. Still worse.</p>

<p>Why we increment by 1 on recursion call? If we starting our <code>n</code> value from <code>3</code> we don't need
to go over even numbers.</p>

<p>```clojure
(defn sieve-3 []
  (loop [nums (set (cons 2 (range 3 2000000 2))) n 3]</p>

<pre><code>(if (&gt; (* n n) 2000000) (reduce + nums)
    (recur (clojure.set/difference nums (set (range (* n n) 2000000 n))) (+ n 2)))))
</code></pre>

<p>```</p>

<p>~13 seconds. Much better... than previous, still worse than first version.</p>

<p>If you looked at <code>difference</code> documentation, take a look at its implementation under "Source".
Nothing prevent us to pass sequence as second argument instead of set. Just removing casting to set.</p>

<p>``` clojure
(defn sieve-4 []
  (loop [nums (set (cons 2 (range 3 2000000 2))) n 3]</p>

<pre><code>(if (&gt; (* n n) 2000000) (reduce + nums)
    (recur (clojure.set/difference nums (range (* n n) 2000000 n)) (+ n 2)))))
</code></pre>

<p>```</p>

<p>~6 seconds. Wow! It's better than original solution. That means our efforts were not wasteful.</p>

<p>Unfortuantely, we stopped improve our function. But if you want more, other major improvements
can be done in the following areas:</p>

<ul>
<li>Use non-persistent set to save prime numbers. It prevent overhead on new objects.</li>
<li>Use "wheel trick" that can be found in the sources of <code>primes</code> from <code>clojure.contrib.lazy-seqs</code>.</li>
<li>Use dynamic step of iteration. We changed <code>(inc n)</code> to <code>(+ n 2)</code>, but probably there is smarter solution.</li>
<li>Do not use <code>(reduce +)</code> because it is linear algorithm. We init <code>nums</code> sequence with some arithmetic progression.
Its sum can be calculated in O(1) by formula. When we compose another sequence (second argument for <code>difference</code>)
its also an arithmetic progression and sum can be calculated in O(1). When doing differencem just subtract second sum
from first sum, and it will be current <code>nums</code> sum.</li>
</ul>


<p>There are much more optimisations can be done to improve prime numbers performace.
If you interested, read nice Christophe Grand's post
<a href="http://clj-me.cgrand.net/2009/07/30/everybody-loves-the-sieve-of-eratosthenes/">Everybody Loves The Sieve Of Erathosthenes</a></p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem010.clj">(str "Git" "Hub")</a></p>

<p><strong>P.S</strong> Honestly, I am OK with 12 seconds. But 6 seconds is better. We performed improvements
just to show the point <strong>if you want to improve something, probably, you can do it</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 009]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-009/"/>
    <updated>2012-12-11T17:41:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-009</id>
    <content type="html"><![CDATA[<blockquote><p> A Pythagorean triplet is a set of three natural numbers, a &lt; b &lt; c, for which, a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup></p>

<p>For example, 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup></p>

<p>There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=9">http://projecteuler.net/problem=9</a></p>

<!-- more -->


<p>Thinking about clever way to solve it...</p>

<p>Nothing good came up in your mind? Try bruteforce.</p>

<p>Again, the idea behind bruteforce for this problem to iterate over all possible values
for <code>a</code>, <code>b</code> and <code>c</code>, that sums to <code>1000</code> and compose Pythagorean triplet.
That's why we need predicate to test if three numbers compose triplet:</p>

<p><code>clojure
(defn is-triplet? [a b c]
  (= (+ (* a a) (* b b)) (* c c)))
</code></p>

<p>Then our bruteforce solution looks like this:</p>

<p>``` clojure
(first (for [a (range 1 1000) b (range 1 1000) c (range 1 1000)</p>

<pre><code>         :when (and (is-triplet? a b c) (= (+ a b c) 1000))] (* a b c)))
</code></pre>

<p>```</p>

<p>It finds the right solution, in ~45 seconds. Bad enough.</p>

<h3>Trick #1</h3>

<p>Do not iterate on <code>c</code> variable, because knowing <code>a</code> and <code>b</code> we always
can calculate <code>c = 1000 - a - b</code>.</p>

<p>Problem solution transformed into next one:</p>

<p>``` clojure
(first (for [a (range 1 1000) b (range 1 1000)</p>

<pre><code>         :let [c (- 1000 a b)]
         :when (is-triplet? a b c)] (* a b c)))
</code></pre>

<p>```</p>

<h3>Trick #2</h3>

<p>Use rule <code>a &lt; b &lt; c</code> from problem definition. Then our iteration will be:</p>

<p><code>clojure
(for [a (range 1 1000) b (range a (- 1000 a))])
</code></p>

<h3>Trick #3</h3>

<p><code>is-triplet?</code> predicate use 3 multiplications, addition and comparison.
We can add to <code>:when</code> section, predicate that compare <code>c</code> to <code>b</code>. This is also
slightly reduce number of <code>is-triplet?</code> execution.</p>

<p><code>clojure
:when (and (&gt; c b) (is-triplet? a b c))
</code></p>

<p>Now solution found in ~45 msecs. 1000 times faster. Not bad.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem009.clj">(apply str (reverse "buHtiG"))</a></p>

<p><strong>P.S.</strong> Unfortunately, there was nothing in this problem about new clojure
functions, programming and even problem was not challenging. But you see the way how
we solve it. We tried "bad" approach with knowing about all its disadvantages.
One more step and we improved it and got right solution. So it is not that bad
approach to try simple solution, even if it is wrong.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 008]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-008/"/>
    <updated>2012-11-27T22:53:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-008</id>
    <content type="html"><![CDATA[<blockquote><p>Find the greatest product of five consecutive digits in the 1000-digit number.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=8">http://projecteuler.net/problem=8</a></p>

<p><em>Large number under the cut.</em></p>

<!-- more -->


<p><code>
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
</code></p>

<p>Idea behind this problem is pretty straightforward:</p>

<ol>
<li>Init <code>maximum</code> with some small value, zero would be good.</li>
<li>Take first 5 digits, calculate the product.</li>
<li>If product is greater than our current <code>maximum</code>, reassign it.</li>
<li>Shift, to take other 5 digits, and back to the step 1.</li>
</ol>


<p>A simple optimization can be applied: if our last element of 5 digit group is zero,
then skip 5 shifts. But it's details.</p>

<p>Let's make our problem little harder to get more from clojure.</p>

<p>Assume that these digits stored in the file. First thing we need: to read the file.</p>

<p><code>clojure
(slurp "path/to/the/file")
</code></p>

<p><a href="http://clojuredocs.org/clojure_core/clojure.core/slurp">slurp</a> is the simplest
function to read file content (<em>In fact, not only files</em>).
It just returns string representation of the whole file.</p>

<p>Then we need to break one large string into symbols.</p>

<p><code>clojure
(seq "helloyo") =&gt; (\h \e \l \l \o \y \o)
</code></p>

<p><a href="http://clojuredocs.org/clojure_core/clojure.core/seq">seq</a> return a sequence with linear access
to collection. If applied to string, return sequence of characters.</p>

<p>But, there are some garbage in the file we don't want, new lines for example.</p>

<p><code>clojure
(remove #(= \newline %) [\h \e \l \l \o \newline \y \o])
</code></p>

<p>(<em>slash</em>) + something - represents character in clojure.
<code>\newline</code> is a new line, known as <code>\n</code> in other languages.</p>

<p>Now we have long sequence with all digits from file.
Need to get all consecutive groups with 5 letters.</p>

<p><code>clojure
(partition 5 1 [\h \e \l \l \o \y \o]) =&gt; [[\h \e \l \l \o] [\e \l \l \o \y] ... ]
</code></p>

<p><a href="http://clojuredocs.org/clojure_core/clojure.core/partition">partition</a>
is an excelent function for such tasks. We specify <code>5</code> - size of partition,
and <code>1</code> shift size. It generates all consecutive groups with 5 elements till the end.</p>

<p>Calulating the product for each group gives us the solution.</p>

<p><code>clojure
(reduce * [1 2 3 4])
</code></p>

<p>Not so fast.</p>

<p>You, probably, get <code>ClassCastException</code>.</p>

<p>After reading the file, we just get bunch of characters,
instead of digits in mathematical sense. And applied mathematical operation <code>*</code> to them.
So, simply speaking, <code>\1</code> is not <code>1</code>.</p>

<p>That's why we need to transform every digit character to it's actual digit value.</p>

<p><code>clojure
(map #(- (int %) 48) [\1 \2 \3]) =&gt; [1 2 3]
</code></p>

<p>This awful implementation do the work.</p>

<ul>
<li>Cast each character to int, get the <a href="http://en.wikipedia.org/wiki/ASCII">ASCII</a>
representation for digit.</li>
<li>From each ASCII value we subtract <code>48</code> and get digit value.</li>
</ul>


<p>Applying <code>product</code> of digits defined earlier we get solution to this problem.</p>

<p>Again, full code on <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem008.clj">GitHub</a>.</p>

<p><strong>P.S.</strong> <code>slurp</code> function very powerful and has may applications. You can specify encoding
for reading as you want or read whole html page by url. But it is also very dangerous function,
because reads all file contents to the memory and can take considerable amount of time. If you have
a large file, say 15GB, read it line by line with buffered reader. Also, note
<a href="http://clojuredocs.org/clojure_core/clojure.core/spit">spit</a> function. It is opposite to <code>slurp</code> -
writes string to the file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 007]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-007/"/>
    <updated>2012-11-20T15:37:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-007</id>
    <content type="html"><![CDATA[<blockquote><p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>

<p>What is the 10001st prime number?</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=7">http://projecteuler.net/problem=7</a></p>

<!-- more -->


<p>It's also pretty clear problem to make you more familiar with prime numbers.
As I said in <a href="/blog/clojure-euler-problem-003">Clojure Euler: Problem 003</a>,
big amount of Project Euler problems devoted to prime numbers so it is <strong>MUST HAVE</strong> (<em>I don't like this phrase either</em>)</p>

<p>You need to implement by yourself effective prime number algorithm. And only after that use one from library.
As we do.</p>

<p><code>clojure
(:use [clojure.contrib.lazy-seqs :only (primes)])
</code></p>

<p>This line import just one symbol <code>primes</code> to your namespace. It's a prime numbers lazy sequence. Lazy sequences briefly covered
in <a href="/blog/clojure-euler-problem-002">Clojure Euler: Problem 002</a> or <a href="http://en.wikipedia.org/wiki/Lazy_evaluation">Wikipedia article</a>,
that's enough for now.</p>

<p>Return to question.</p>

<blockquote><p>What is the 10001st prime number?</p></blockquote>

<p>No problem.</p>

<p><code>clojure
(last (take 10001 primes))
</code></p>

<p>Two lines of code: one for import, one for solution. What can be simpler?</p>

<p>Note, that <a href="http://clojuredocs.org/clojure_core/clojure.core/last">last</a> return last element of the sequence and works in linear time.</p>

<p>Another one problem solved in few <strike>seconds</strike> minutes.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem007.clj">GitHub</a></p>

<p><strong>P.S.</strong> Actually, I lied. In linked solution I use 6 lines of code: namespace declaration, use, <em>empty line</em>,
comment with executing time, function declaration and, finally, solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Magic. Part 3: Finally]]></title>
    <link href="http://mishadoff.github.com/blog/java-magic-part-3-finally/"/>
    <updated>2012-11-18T19:39:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/java-magic-part-3-finally</id>
    <content type="html"><![CDATA[<p>Every experienced java programmer should know that <code>finally</code> block always executed. But is it true?</p>

<!-- more -->


<p>It depends on our definition of program execution. But, generally speaking, <strong>yes</strong>.</p>

<h3>Normal program execution</h3>

<p><em>Aha, look at this</em>, someone might retort:</p>

<p><code>java
try {
  System.exit(1);
} finally {
  System.out.println("I'm here, man");
}
</code></p>

<p><em>You just said, finally block always executed?</em></p>

<p>Well. In that case no, because we speaking about normal flow of program execution.
This is <em>abnormal</em>.</p>

<p>From the <a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/finally.html">official tutorial</a></p>

<blockquote><p>Note: If the JVM exits while the try or catch code is being executed, then the finally block may not execute.</p></blockquote>

<p>Your counter question might be: <em>If second line of that code always exectued?</em></p>

<p><code>java
System.out.println("Line 1");
System.out.println("Line 2");
System.out.println("Line 3");
</code></p>

<p>Sure, because it's linear flow. Nothing can break...<strong>BANG</strong>...<code>Electricity unavailable. Program stopped.</code></p>

<p>What about this? It's also abnormal program execution, and we can't guarantee anything for 100%.
In fact, this is the same as <code>System.exit(1)</code> or <code>reset</code> button on your computer or whatever.</p>

<p>That's why, we are talking about <em>normal</em> program execution. Only <em>normal</em>.</p>

<blockquote><p>I said yes? I meant no!</p></blockquote>

<h3>Perpetuum Mobile</h3>

<p>Consider the following code:</p>

<p>``` java
try {
  while (true) {</p>

<pre><code>System.out.println("I print here some useful information");
</code></pre>

<p>  }
} finally {
  System.out.println("Let me run");
}
```</p>

<p>Will be the line <em>"Let me run"</em> printed? Maybe yes, if printing error to standard output appear. Almost always the answer is no.</p>

<p>In that case, there are no difference between simple statement and finally block. None of them will be executed, throw this example away.</p>

<h3>Threads</h3>

<p>What about threads? We know that execution flow controlled by threads and they can be interrupted.</p>

<p>Assume that we have thread that perform some work, and other thread kills first one right before finally block. Finally wasn't executed.</p>

<p>Assume that we have deadlock between two threads, right before finally line. The same thing.</p>

<p>From the <a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/finally.html">same tutorial</a></p>

<blockquote><p>...if the thread executing the try or catch code is interrupted or killed, the finally block may not execute even though the application as a whole continues.</p></blockquote>

<p>So, we can treat thread like a program, and make one effective rule:</p>

<p><strong>Rule 1</strong>. Finally executes always, except the case where controlling program or thread was aborted.</p>

<h3>Finally we return</h3>

<p>Ok, now we know when finally is not executed. But do we know when finally is executed?</p>

<p>Consider the example:</p>

<p>``` java
int someFunc() {
  try {</p>

<pre><code>return 0;
</code></pre>

<p>  } finally {</p>

<pre><code>return 1;
</code></pre>

<p>  }
}
```</p>

<p>The result is obviously <code>1</code>. Just because <code>finally</code> is always executed.</p>

<p>Consider, next example:</p>

<p>``` java
int someFunc() {
  try {</p>

<pre><code>throw new RuntimeException();
</code></pre>

<p>  } finally {</p>

<pre><code>return 1;
</code></pre>

<p>  }
}
```</p>

<p>The result is <code>1</code> again. And it's a problem. We just lose the exception.
Such issue known as <em>exception swallowing</em>. It is very dangerous, because client's code expect either exception or some value, but it always get only value.</p>

<p>One more less imaginary example.</p>

<p>``` java
String deposit(int amount) throws DAOException {
  try {</p>

<pre><code>return dao.deposit(amount);
</code></pre>

<p>  } finally {</p>

<pre><code>return "OK";
</code></pre>

<p>  }
}
```</p>

<p>The logic behind <code>finally</code> is to have some default value, and our <code>deposit</code> method throws the <code>DAOException</code> where client code is
responsible for its handling. Unfortunately, perhaps compiler forces you to handle this <code>DAOException</code> it never occurs. And string "OK" will be returned.</p>

<p><strong>Rule 2</strong>. Never use <code>return</code> from <code>finally</code> block.</p>

<h3>Instead of conclusion</h3>

<p>A lot of programmers are aware about this common mistake. But some are not.
Maybe these two simple rules give you a tiny light on coward <code>finally</code>.</p>
]]></content>
  </entry>
  
</feed>
