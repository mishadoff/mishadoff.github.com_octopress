<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.io/"/>
  <updated>2014-03-28T19:49:04+02:00</updated>
  <id>http://mishadoff.github.io/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Numberto: Expressions]]></title>
    <link href="http://mishadoff.github.io/blog/numberto-expressions/"/>
    <updated>2014-03-24T00:25:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/numberto-expressions</id>
    <content type="html"><![CDATA[<p>Numberto has new features!</p>

<!-- more -->

<p>In <a href="/blog/announcing-numberto">previous post</a>
I wrote about simple clojure library <a href="https://github.com/mishadoff/numberto">numberto</a> for experiments with numbers.</p>

<p>New version of <em>numberto</em> has a bunch of new features.</p>

<h3 id="expressions">Expressions</h3>

<p>Expressions package provides two functions: <code>eval-infix</code> to evaluate infix expression
and <code>infix-&gt;prefix</code> to build prefix lisp-style expression from mathematical notation.</p>

<p>Let’s give it alias for simplicity</p>

<p><code>clojure
(def e eval-infix)
</code></p>

<p>Evaluate simple math expression</p>

<p><code>clojure
(e "1+2") =&gt; 3
</code></p>

<p>or more complex</p>

<p><code>clojure
(e "1+2*(3-4/2)") =&gt; 3
</code></p>

<p>handle priorities</p>

<p><code>clojure
(e "2+2*2") =&gt; 6
</code></p>

<p>and left/right associativity</p>

<p><code>clojure
(e "1024/2/2/2/2") =&gt; 64
(e "2^3^4") =&gt; 2417851639229258349412352N
</code></p>

<p>Oh, what’s this? Long numbers? Sure, ratios and floats supported as well</p>

<p><code>clojure
(e "1/3") =&gt; 1/3
(e "1.1/0.9") =&gt; 1.2222222222222223
</code></p>

<p>Unary operations</p>

<p><code>clojure
(e "(-1)^100") =&gt; 1
</code></p>

<p>functions and symbols</p>

<p><code>clojure
(e "sin(e) + sqrt(pi)") =&gt; 2.183235141408425
</code></p>

<p>vararg functions</p>

<p><code>clojure
(e "sum(1,2,3,sum())/max(1,2)") =&gt; 3
</code></p>

<p>You can also provide bindings for unknown functions and symbols</p>

<p><code>clojure
(e "factorial(n)/20"
   {:bindings
     {"factorial" #(reduce *' (range 1 (inc %)))
      "n" 10}})
=&gt; 181440
</code></p>

<p>Worth to mention that you can easily redefine existing
or define your own new unary, binary operations, functions
and symbols. Just add additional properties to <code>eval-infix</code></p>

<p><code>clojure
;; return current time in millis
(e "now()" {:bindings {"now" #(.getTime (java.util.Date.))}}) =&gt; some long number
;; override priorities
(e "1+2*3" {:binary-ops {"+" {:function + :priority 100}}}) =&gt; 9
</code></p>

<p><code>infix-&gt;prefix</code> has exactly the same functionality, but it builds prefix expression instead.</p>

<p><code>clojure
(infix-&gt;prefix "(1+2)*3-(4/avg(3,5)-sum(1))")
=&gt;
"(- (* (+ 1 2) 3) (- (/ 4 (avg 3 5)) (sum 1)))"
</code></p>

<p>It can be useful if you googled some formula but bored to translate it manually to clojure.</p>

<p>For example, take the <a href="http://en.wikipedia.org/wiki/Simpson%27s_rule">Simpson’s rule</a></p>

<p><img src="http://upload.wikimedia.org/math/1/a/0/1a0fb4456375307fdde8ab85954d95be.png" alt="" /></p>

<p><code>clojure
(infix-&gt;prefix "(b-a)/6*(f(a)+4*f((a+b)/2)+f(b))")
=&gt;
"(* (/ (- b a) 6) (+ (+ (f a) (* 4 (f (/ (+ a b) 2)))) (f b)))"
</code></p>

<h4 id="implementation">Implementation</h4>

<p>Would be good to try <a href="https://github.com/Engelberg/instaparse">instaparse</a> for such purpose,
but I decided to use custom implementation using standard
<a href="http://en.wikipedia.org/wiki/Shunting-yard_algorithm">Shunting-yard algorithm</a>.
Just couple of hacks added to handle unaries and vararg functions.
Code is awful. If you really want to dig in - run debug mode.</p>

<p><code>clojure
(binding [*DEBUG* true]
  (e "1+2"))
</code></p>

<h4 id="limitations">Limitations</h4>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>No way to define non-prefix unary operation, like “10!” or “</td>
          <td>10</td>
          <td>”</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Can not handle simplified math form, like “2x^2 + 3^x + 5”.
Multiplication sign should be declared explicitly</li>
  <li>Not able to simplify ops in lisp-style expression. <code>(* (* 1 2) 3)</code> instead of <code>(* 1 2 3)</code></li>
  <li>False positives handling. Some stupid expressions indicates about error <code>(e "1+")</code>, some not <code>(e "1+()1)</code>. I still working on this, but it is not critical.</li>
</ul>

<h3 id="solvers">Solvers</h3>

<p>Here is the puzzle:</p>

<blockquote>
  <p>You have four numbers [3, 4, 5, 6].<br />
You have four binary operations [+, -, *, /] and parentheses ()</p>

  <p>How to insert operations between numbers to get number 42?</p>
</blockquote>

<p>Hah, that simple <code>3*4 + 5*6 = 42</code></p>

<p>Ok, get <code>42</code>, but you forced to use one division <code>/</code>.</p>

<p>Not so obvious?</p>

<p><code>
(solve-insert-ops-num [3 4 5 6] 42) =&gt;
([42N "3+45-6"] [42N "3/4*56"] [42N "3*4+5*6"])
</code></p>

<p>If you use <code>solve-insert-ops</code> function it gives all possible values can be obtained by inserting operations between numbers.</p>

<p><code>clojure
(solve-insert-ops [3 4 5 6]) =&gt; ;; long list
</code></p>

<p>Default implementation uses 4 basic operations, no parens and no restrictions. Instead, you can override options</p>

<p>to use parens, specify level</p>

<p><code>clojure
(solve-insert-ops-num [3 4 5 6] 42 {:parens 1}) =&gt;
([42N "3+45-6"] [42N "(3+45)-6"] [42N "3+(45-6)"]
 [42N "3/4*56"] [42N "(3/4)*56"] [42N "3/(4/56)"]
 [42N "3*4+5*6"] [42N "(3*4)+5*6"] [42N "3*4+(5*6)"])
</code></p>

<p>limit some operations</p>

<p><code>clojure
(solve-insert-ops-num [3 4 5 6] 42 {:rules [[:max "*" 1]]}) =&gt;
([42N "3+45-6"] [42N "3/4*56"])
</code></p>

<p><code>:max</code>, <code>:min</code>, <code>:max-in-a-row</code>, <code>:min-in-a-row</code> options are supported.</p>

<p>Add new operations (supported by expressions package)</p>

<p><code>clojure
(solve-insert-ops-num [3 4 5 6] 80
                      {:ops ["+" "-" "*" "/" "^"]
                       :rules [[:max "^" 1]]}) =&gt;
([80N "3^4+5-6"])
</code></p>

<p>Keep in mind, always limit time consuming operations (<em>like</em> <code>^</code>) as it builds all possible permutations and you can wait your answer forever.</p>

<p>There are also couple of <em>new</em> interesting things, like
getting digits of <code>pi</code>, <code>e</code>, <code>sqrt(n)</code>, ratio numbers up to desired level and other. <a href="https://github.com/mishadoff/numberto/blob/master/doc/intro.md">Check it out</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 4]]></title>
    <link href="http://mishadoff.github.io/blog/programming-digest-4/"/>
    <updated>2013-11-25T22:50:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/programming-digest-4</id>
    <content type="html"><![CDATA[<p>How to live in the Kingdom of Nouns, why mathematicians cry, filling gaps in algorithms, portion of clojure, STM, HTTP and more.</p>

<!-- more -->

<h3 id="execution-in-the-kingdom-of-nounshttpsteve-yeggeblogspotcom200603execution-in-kingdom-of-nounshtml">1. <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Execution in the Kingdom of Nouns</a></h3>

<p>Another great Steve Yegge’s post. Not a post, a tale about <em>Javaland</em>, a place where all verbs are owned by nouns. Accept it like an analogy between OOP and FP.</p>

<blockquote>
  <p>Verbs in Javaland are responsible for all the work, but as they are held
in contempt by all, no Verb is ever permitted to wander about freely.
If a Verb is to be seen in public at all,
it must be escorted at all times by a Noun.</p>
</blockquote>

<p>Of course <em>to be escorted</em> must be replaced by <strong>VerbEscorter</strong>.</p>

<blockquote>
  <p>The Verb “execute”, and its synonymous cousins “run”, “start”, “go”,
“justDoIt”, “makeItSo”, and the like, can perform the work of any
other Verb by replacing it with an appropriate Executioner and a
call to execute(). Need to wait? Waiter.execute().
Brush your teeth? ToothBrusher(myTeeth).go().
Take out the garbage? TrashDisposalPlanExecutor.doIt().
No Verb is safe; all can be replaced by a Noun on the run.</p>
</blockquote>

<p>You are not forced to use functions everywhere, but use them where it is appropriate to simplify solution and avoid <a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">enterprise hell</a>. You know, not everything is an object. The same way not everything is a function. </p>

<h3 id="a-mathematicians-lamenthttpwwwmaaorgexternalarchivedevlinlockhartslamentpdf">2. <a href="http://www.maa.org/external_archive/devlin/LockhartsLament.pdf">A Mathematician’s Lament</a></h3>

<p>Long paper by Paul Lockhart about problems in mathematical education.</p>

<blockquote>
  <p>Math class is stupid and boring. - Students.</p>
</blockquote>

<p>Author claims that mathematics is an art, instead of some practical thing. Of course, it can be applied in real world and it is, but it’s not primary goal of math.</p>

<blockquote>
  <p>A mathematician, like a painter or poet is a maker
of patterns. If his patterns are more permanent than theirs,
it is because they are made wit <em>ideas</em>.</p>
</blockquote>

<p>Very exciting reading.</p>

<h3 id="algorithmshttpcstheorystackexchangecomquestions19759core-algorithms-deployed1977319773">3. <a href="http://cstheory.stackexchange.com/questions/19759/core-algorithms-deployed/19773#19773">Algorithms</a></h3>

<p>Algorithms are not just devils you need to learn for CS course or to prepare for interview. You can <em>apply</em> them to solve real-world problems. This SO answer provides links and some explanations where specific algorithm is used in linux kernel, chromium browser and some utils.</p>

<blockquote>
  <p>…
Red-Black trees are used for scheduling, virtual memory management,
to track file descriptors and directory entries, etc.</p>
</blockquote>

<blockquote>
  <p>grep, implements the Boyer-Moore algorithm</p>
</blockquote>

<blockquote>
  <p>fgrep implements the Aho-Corasick string matching algorithm.
…</p>
</blockquote>

<p>Even Bubblesort has its <a href="https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/drivers/media/common/saa7146/saa7146_hlp.c">application</a>!</p>

<h3 id="rich-hickeys-greatest-hitshttpthechangelogcomrich-hickeys-greatest-hits">4. <a href="http://thechangelog.com/rich-hickeys-greatest-hits/">Rich Hickey’s Greatest Hits</a></h3>

<p>I’m huge Rich Hickey’s fan. It’s just a list of his most interesting presentations. Definitely, must see.</p>

<p><img src="http://farm4.staticflickr.com/3229/2613013337_bcc9c7857d.jpg" alt="" /></p>

<ul>
  <li><a href="http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey">Are We There Yet (2009)</a></li>
  <li><a href="http://www.youtube.com/watch?v=f84n5oFoZBc">Hammock Driven Development (2010)</a></li>
  <li><a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple Made Easy (2011)</a></li>
  <li><a href="http://www.infoq.com/presentations/Value-Values">The Value of Values (2012)</a></li>
  <li><a href="http://www.youtube.com/watch?v=ROor6_NGIWU">The Language of the System (2012)</a></li>
  <li><a href="http://www.infoq.com/presentations/Design-Composition-Performance">Design, Composition and Performance (2013)</a></li>
</ul>

<h3 id="clojure-persistent-vectorhttphypirioncommusingsunderstanding-persistent-vector-pt-1">5. <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">Clojure Persistent Vector</a></h3>

<p>Two parts explanation how clojure vector works.</p>

<p>Yeah, simple square brackets <code>[1 2 3]</code> in clojure have a lot complex things under the hood. Moreover, it gives understanding not only how vectors work, but how all other persistent structures can be implemeted in efficient manner.</p>

<h3 id="software-transactional-memoryhttpjavaociwebcommarkstmarticlehtml">6. <a href="http://java.ociweb.com/mark/stm/article.html">Software Transactional Memory</a></h3>

<p>Have you heard about STM?</p>

<p>It’s a good model for concurrency control, like database transactions, but on memory. Much simpler and less error-prone to use. This article explain STM basics with some implementation details. </p>

<p>For my attempt to implement STM refer <a href="http://www.slideshare.net/mishadoff/implementing-stm-in-java">presentation</a></p>

<h3 id="a-software-developers-huide-to-httphttpodetocodecomarticles741aspx">7. <a href="http://odetocode.com/articles/741.aspx">A Software Developer’s Huide to HTTP</a></h3>

<p>Five Parts article of looking at HTTP from developer’s perspective. Worth reading to dig into some details. </p>

<h3 id="ideas-for-computinghttpsgithubcomsamsquireideas">8. <a href="https://github.com/samsquire/ideas">100 Ideas for Computing</a></h3>

<p>Great list, perhaps most ideas are already partially implemented.</p>

<blockquote>
  <p>This is a vision for how computing could be.
I began writing ideas down a number of years ago,
this is a selection of ideas old and new.</p>
</blockquote>

<p>Some of them are <a href="https://github.com/samsquire/ideas#68-right-click-outsource">great</a>:</p>

<blockquote>
  <p>Task management between computers is an unsolved problem in desktop
environments. Many users have multiple devices. Sending tasks,
inputs or outputs to different computers is painful. Usually sending
audio to be played through another computer, taking control of an
application running on another computer, sharing files or
streaming data to other machines requires special software. </p>
</blockquote>

<p>It would be great to have the same in reverse order also. I get a phone call, but phone is far away. Much better to click on current machine <em>Accept Call</em> and to talk. Security can be a challenging.</p>

<p>Some <a href="https://github.com/samsquire/ideas#18-shortcut-format">problematic</a>:</p>

<blockquote>
  <p>Keyboard shortcuts are configured differently in each program.
Shortcut configuration should be in a standard format.
This way you can load them and share them between operating
systems and share configurations between applications.</p>
</blockquote>

<p>This reminds me of xkcd comics:</p>

<p><img src="http://imgs.xkcd.com/comics/standards.png" alt="" /></p>

<p>Some ideas are <a href="https://github.com/samsquire/ideas#31-mounting-source-code">not so great</a>:</p>

<p><em>Mounting source code</em> does not solve a problem at all, it’s just adds a bit of sugar to project structure and adds more pain to build tools.</p>

<h3 id="top-10-lists-common-java-mistakeshttpjavadzonecomarticlestop-10-lists-common-java">9. <a href="http://java.dzone.com/articles/top-10-lists-common-java">Top 10 Lists Common Java Mistakes</a></h3>

<p>Metalist of Top 10 items of Top 10 java pitfalls.</p>

<p>Hundred times discussed, but if you are java programmer, you may refresh your knowledge. List of common java pitfalls includes:</p>

<blockquote>
  <p>Using Singletons</p>
</blockquote>

<blockquote>
  <p>The GOF religion</p>
</blockquote>

<blockquote>
  <p>Return null from API methods</p>
</blockquote>

<p>By the way, this list contains some other useful java things, like top 10 java people and top 15 worst Computer Software blunders. Not worst, but definitely bad.</p>

<h3 id="rare-are-gc-talkshttpfurious-waterfall-55herokucomruby-guideinternalsgchtml">10. <a href="http://furious-waterfall-55.heroku.com/ruby-guide/internals/gc.html">Rare Are GC Talks</a></h3>

<p>Different Garbage Collector algorithms briefly explained. Bookshelf used as an analogy:</p>

<blockquote>
  <p>Bookshelf - Memory, Books - Objects.</p>
</blockquote>

<p>Ruby GC implementation discussed, but you are not forced to know ruby to understand that. By the way, article contains a lot of links to more detailed GC algorithms explanation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 022]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-022/"/>
    <updated>2013-10-20T13:22:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-022</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Using <a href="http://projecteuler.net/project/names.txt">names.txt</a>
a 46K text file containing over five-thousand first names,
begin by sorting it into alphabetical order. Then working out the alphabetical
value for each name, multiply this value by its alphabetical
position in the list to obtain a name score.</p>

  <p>For example, when the list is sorted into alphabetical order,
COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.
So, COLIN would obtain a score of 938 x 53 = 49714.</p>

  <p>What is the total of all the name scores in the file?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=22">http://projecteuler.net/problem=22</a></p>

<!-- more -->

<p>Problem is very easy, assuming you know how to work with files.</p>

<p>First of all read the file, clojure has awesome simple function <code>slurp</code>, discussed in <a href="/blog/clojure-euler-problem-008">Clojure Euler: Problem 008</a>.</p>

<p><code>clojure
(slurp "names.txt")
</code></p>

<p>Then, you need to select all words in that file:</p>

<p><code>clojure
(re-seq #"\w+" (slurp "names.txt"))
</code></p>

<p>It return a list with the names. How that simple, yeah?</p>

<p>Next two steps are:</p>

<ul>
  <li>sort list in ascending order, what is done by calling <code>sort</code> function</li>
  <li>calculate score for each word</li>
</ul>

<p>By the way, <code>score</code> consists of two parts. First of all, you must calculate natural score of the word, without its actual position in sorted list, and then you must multiply that score on its position.</p>

<p>First part looks like this:</p>

<p><code>clojure
(defn score [string]
  (reduce + (map #(- (int %) 64) string)))
</code></p>

<p>Convert each character to its positional number in alphabet. For example the character “A” (<em>capitalized</em>) has ascii value of <code>65</code>. If we substract <code>64</code> it becomes <code>1</code>, what means “A” is a first letter in alphabet and so on.</p>

<p>To track positions in list we use
<a href="http://clojuredocs.org/clojure_core/clojure.core/map-indexed">map-indexed</a>
function. It works almost the same way as map, except it accept function of two arguments, index of item in current list, and item itself.</p>

<p>For example:</p>

<p><code>clojure
(map-indexed #(vec [%1 %2]) ["a" "b" "c"]) =&gt; ([0 "a"] [1 "b"] [2 "c"])
</code>
As indices start from zero, do not forget increment!</p>

<p>Bind all together</p>

<p><code>clojure
(reduce +
        (map-indexed #(* (inc %1) (score %2)) 
                     (sort (re-seq #"\w+" (slurp "names.txt"))))))
</code></p>

<p>Solved! <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem022.clj">Code is here</a></p>

<p><em>P.S.</em> Actually, this code is not elegant. We need to read from the end to the beginning of expression. And it can be solved by Threading Macro. Read the nice <strong>Fogus</strong> <a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">explanation</a></p>

<p>Our last solution, becomes transformed to:</p>

<p><code>clojure
(-&gt;&gt; "names.txt"
	(slurp)
	(re-seq #"\w+")
	(sort)
	(map-indexed #(* (inc %1) (score %2)))
	(reduce +))
</code></p>

<p>Way more readable, huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 021]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-021/"/>
    <updated>2013-10-05T15:24:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-021</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Evaluate the sum of all the amicable numbers under 10000.</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=21">http://projecteuler.net/problem=21</a></p>

<!-- more -->

<blockquote>
  <p>Let d(n) be defined as the sum of proper divisors of n
(numbers less than n which divide evenly into n).</p>

  <p>If d(a) = b and d(b) = a, where a != b, then a and b are an
amicable pair and each of a and b are called amicable numbers.</p>

  <p>For example, the proper divisors of 220 are
1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.
The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.</p>
</blockquote>

<p>We can do it <em>bruteforcely</em>, but we won’t.</p>

<p>Let start with the function <code>d</code>. We call it <code>sum-of-proper-divisors</code></p>

<p><code>clojure
(defn sum-of-proper-divisors [n]
  (let [base (filter #(zero? (mod n %)) (range 2 (Math/sqrt n)))]
    (reduce + 1 (concat (map #(/ n %) base) base))))
</code></p>

<p>Bad approach to find all divisors: to iterate on all numbers from 1 to <code>n</code>
and check if it is divisor or not.
Instead, we iterate from 1 to <code>sqrt(n)</code>, find one divisor and
calculate another symmetric divisor.</p>

<p>For example, take number <code>10</code>.
We iterating from <code>2</code> to <code>(sqrt 10)</code>. Number <code>2</code> is divisor, so we divide <code>(/ 10 2)</code>, get <code>5</code> which is also divisor. And so on.</p>

<p>This is predicate checks where two numbers amicable or not:</p>

<p><code>clojure
(defn amicable? [a b]
  (and (not (= a b))
       (= a (sum-of-proper-divisors b))
       (= b (sum-of-proper-divisors a))))
</code></p>

<p>Obvious enough, just consider that we skip case where <code>(= a b)</code>.</p>

<p>The last part is to use our functions to obtain result.</p>

<p><code>clojure
(reduce +
  (let [sums (vec (map sum-of-proper-divisors (range 1 10000)))]
    (for [i (range 1 10000)]
      (if (amicable? i (nth sums (dec i))) i 0))))
</code></p>

<p>Just generate all sums, and check if another number <code>i</code> produce the amicable pair. Done!</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem021.clj">Code</a></p>

<p><strong>P.S.</strong> Take a look at the last snippet. <code>vec</code> is really important there.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing numberto]]></title>
    <link href="http://mishadoff.github.io/blog/announcing-numberto/"/>
    <updated>2013-09-01T04:23:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/announcing-numberto</id>
    <content type="html"><![CDATA[<p>All you need to play with numbers!</p>

<!-- more -->

<p><a href="https://github.com/mishadoff/numberto">numberto</a>
- simple clojure library with a bunch of functions operating on numbers.</p>

<p>I created this project for two reasons:</p>

<ol>
  <li>Solving problems on <a href="http://projecteuler.net">Project Euler</a>, <a href="http://www.4clojure.com/">4Clojure</a> and just playground with numbers needed common functions. I just extracted them to separate util library.</li>
  <li>Practice to develop clojure project with unit tests, continuos integration, documentation and publishing to clojars.</li>
</ol>

<h3 id="get-it">Get it</h3>

<p>Current version is <code>0.0.2</code> available to download on
<a href="https://clojars.org/numberto/versions/0.0.2">Clojars</a> or
as lein dependency <code>[numberto "0.0.2"]</code></p>

<h3 id="example-usage">Example usage</h3>

<p><code>clojure
(number-&gt;roman 19) =&gt; "XIX"
(take 10 fibonacci) =&gt; (1 1 2 3 5 8 13 21 34 55)
(shift-right 123456789 3) =&gt; 789123456
(count-digits (! 100000)) =&gt; 456574
(factorize 234) =&gt; [2 3 3 13]
</code></p>

<p>Can you read long numbers?</p>

<p><code>clojure 
(number-name 16532561257523723757234781264) =&gt;
"sixteen octillion five hundred thirty two septillion five hundred sixty one sextillion
two hundred fifty seven quintillion five hundred twenty three quadrillion seven hundred
twenty three trillion seven hundred fifty seven billion two hundred thirty four million
seven hundred eighty one thousand two hundred sixty four"
</code></p>

<h3 id="structure">Structure</h3>

<p>Each logical set of functions moved to separate namespace. Here is the list of namespaces:</p>

<ul>
  <li><strong>Converters</strong>.
number to digits, char to digit, roman to arabic</li>
  <li><strong>Math</strong>.
Often used functions, such as <code>count-digits</code>, <code>shuffle-num</code>, <code>reverse-num</code> and some from common math <code>abs</code>, <code>gcd</code>, <code>lcm</code></li>
  <li><strong>Seqs</strong>.
Various lazy sequences: <code>fibonacci</code>, <code>farey</code>, <code>palindromes</code>.</li>
  <li><strong>Primes</strong>.
Prime numbers lazy sequence, factorization and totient function</li>
  <li><strong>Factorial</strong>.
Standard and Improved version of factorial</li>
  <li><strong>Generators</strong>.
Generate random numbers</li>
  <li><strong>Printers</strong>.
Pretty print for long numbers</li>
</ul>

<p>Check out <a href="https://github.com/mishadoff/numberto/blob/master/doc/intro.md">detailed intro</a></p>

<p><strong>P.S.</strong> I still experimenting, so expect a lot of changes between versions until make something stable. Comments and advices are welcome!</p>
]]></content>
  </entry>
  
</feed>
