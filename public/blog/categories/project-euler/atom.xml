<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: project-euler | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/blog/categories/project-euler/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2012-11-10T19:23:51+02:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 005]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-005/"/>
    <updated>2012-11-09T19:01:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-005</id>
    <content type="html"><![CDATA[<blockquote><p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.</p>

<p>What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=5">http://projecteuler.net/problem=5</a></p>

<!-- more -->


<p>It's a tricky problem. First look gives us straightforward solution:
Take a number, test if it evenly divisible by all of needed numbers, if yes - we good,
otherwise increment number and test again, and again, and again...</p>

<p>No, really, assume it's our function to test divisibility by all 20 numbers:</p>

<p>``` clojure
(defn evenly-divisible-by-20? [n]
  (zero? (reduce +</p>

<pre><code>(for [i (range 2 21)]
  (mod n i)))))
</code></pre>

<p>```</p>

<p>Awful implementation, but keeps the idea.
If sum of all remainders equals to zero, then every remainder equals to zero.
Now, using this function we write naive implementation:</p>

<p>``` clojure</p>

<pre><code>(first
  (drop-while #(not (evenly-divisible-by-20? %)) (iterate inc 1)))
</code></pre>

<p>```</p>

<p>Note, function <a href="http://clojuredocs.org/clojure_core/clojure.core/drop-while">drop-while</a>
similar to take-while, but skips values until they meet predicate condition.</p>

<p>Waiting for result? Take a cup of tea and wait a little. Still waiting? Wait a little more...</p>

<p>I did not post exact answer here, but result greater than 100 millions.
And obviously this linear algorithm will work considerable amount of time.
So, stop the execution and let's see at the problem from the other end.</p>

<p><em>What is the smallest number that evenly divisible by 1 and 2?</em>
Obviously 2.</p>

<p><em>What is the smallest number that evenly divisible by 2 and 3?</em>
A bit harder, but answer is 6.</p>

<p><em>What is the smallest number that evenly divisible by 4 and 5?</em>
20.</p>

<blockquote><p>Oh, it's just multiplication</p></blockquote>

<p>Unfortunately, no. Take numbers <code>4</code> and <code>6</code>, multiplication gives us <code>24</code> and it will be evenly divisible by <code>4</code> and <code>6</code>, but
this number is not the <em>smallest</em>. Snmallest number for this case will be <code>12</code>.</p>

<p>There is a function, that finds smallest number divisible by 2 different numbers.
This function called <a href="http://en.wikipedia.org/wiki/Least_common_multiple">Least Common Multiple</a>(<em>lcm</em>).
There are lot of different methods to calculate it, but we will use one that uses
<a href="http://en.wikipedia.org/wiki/Greatest_common_divisor">Greatest Common Divisor</a>(<em>gcd</em>)</p>

<p><img src="http://upload.wikimedia.org/math/5/b/3/5b3f3c62dd59cc5594af7b2ece3798fb.png" alt="" /></p>

<p>Where <em>gcd</em> calculated according to <a href="http://en.wikipedia.org/wiki/Euclidean_algorithm">Euclid's algorithm</a></p>

<p>``` clojure
(defn gcd [n k]
  (loop [a n b k]</p>

<pre><code>(if (zero? b) a (recur b (mod a b)))))
</code></pre>

<p>```</p>

<p>Using formula above, our <em>lcm</em> function will look like this:</p>

<p><code>clojure
(defn lcm [n k]
  (/ (abs (* n k)) (gcd n k)))
</code></p>

<p>You see, here we need <code>abs</code> function. Nothing hard to implement it, but if we remember
<a href="">previous problem</a> there are was a reference
to <code>clojure.contrib.math</code> library. <code>abs</code> there and we can use it, just add to your namespace definition</p>

<p><code>clojure
(:use [clojure.contrib.math])
</code></p>

<p>Oh look, even <code>lcm</code> and <code>gcd</code> functions there. Excellent.</p>

<p>Now we can solve the problem. Remember the <code>reduce</code> function?</p>

<p><code>clojure
(reduce lcm (range 1 21))
</code></p>

<p>Actually, this one-liner is solution. And it gives us correct result.</p>

<p>What happens here? We iteratively (<em>with using reduce</em>) find the lcm for <code>1</code> and <code>2</code>,
then for result and <code>3</code>, for result and <code>4</code> and so on.</p>

<p><strong>Great!</strong> One more problem solved!</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem005.clj">GitHub</a></p>

<p><strong>P.S.</strong> One lesson we learned here. Be aware about library functionality. It helps you
to solve problems and avoid coward mistakes. For example, we have incorrect above implementation
for <code>lcm</code> function. If we call <code>(lcm 0 0)</code> program fails with <code>DivideByZero</code> exception.
It still solve our problem, but in future uses can be an additional problem.
But in lib implementation this error is covered. And we can be sure that <em>almost always</em> libs contain much less
errors that your <em>new fancy wheel</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 003]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-003/"/>
    <updated>2012-10-30T19:12:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-003</id>
    <content type="html"><![CDATA[<blockquote><p>The prime factors of 13195 are 5, 7, 13 and 29.</p>

<p>What is the largest prime factor of the number 600851475143?</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=3">http://projecteuler.net/problem=3</a></p>

<!-- more -->


<p>If you familiar with <a href="http://en.wikipedia.org/wiki/Prime_number">prime numbers</a>, you apparently know basic algorithms to find them,
if not, I advice to get familiar with it. There are lot of problems devoted to prime numbers on Project Euler. So, read 10 minutes about prime numbers, and go on.</p>

<p>In few words, prime number is a number starting from 2 that has no divisors except <em>1</em> and <em>itself</em>.
Exposing this logic on all numbers, we can simply find first prime numbers: <code>2, 3, 5, 7, 11, ...</code></p>

<p>To implement function that search for prime numbers we can implement predicate, that test whether number is prime or not:</p>

<p>``` clojure
(defn prime? [n]
   (= 2 (reduce +</p>

<pre><code>            (for [i (range 1 (inc n))]
              (if (= 0 (mod n i)) 1 0)))))
</code></pre>

<p>```</p>

<p>We iterate from 1 up to number and calculate reminder of division number by iteration counter.
If result is zero we return 1, otherwise we return 0.
For each number we get list with length of that number that marked with 1 for exact divisors.
For example for <code>6</code> list will be <code>(1 1 1 0 0 1)</code>, and for <code>7</code> list will be <code>(1 0 0 0 0 0 0 1)</code>.
Than we calculate sum of this list, which represents number of divisors. If count is two, that means number is prime.
This is simplest algorithm for testing prime number, built from prime number definition.</p>

<p>Performing small optimization you can see that in lists above, first and last elements are always equals to 1.
We can just drop them. Another optimization is we don't need go on when we found at least one remainder.
And I'm pretty sure you can find lot of flaws in this implementation.</p>

<p>But the most useful optimization is assumption that we don't need iterate to <code>n</code>, we can iterate to <code>sqrt(n)</code>.
This is based on fact that if we found some number <code>a</code> that is divisor of <code>n</code>, then there is another number <code>b = n / a</code>.
And <code>b</code> is also divisior of <code>n</code>. Little transformation gives us <code>a * b = n</code>. Assume <code>a &lt; b</code>, so if we found <code>a</code> we don't need to seek for <code>b</code>.
Number <code>n</code> is not prime. Maximum value of a achieved when <code>a</code> equals to <code>b</code>, <code>a^2 = n</code>, <code>a = sqrt(n)</code>.
This is reduce complexity of algorithm from <code>O(n)</code> to <code>O(sqrt(n))</code>.</p>

<p>In <a href="http://mishadoff.github.com/blog/clojure-euler-problem-002/">previous problem</a> we mentioned <code>clojure.contrib.lazy-seqs</code> package,
where we have primes lazy sequence. Let's use it!</p>

<p>Algorithm for solving our problem is following:</p>

<ol>
<li>Iterate through all prime number that less than square root of number</li>
<li>If this number is divisor add it to list</li>
<li>Find maximum from that list</li>
</ol>


<p>To transform statements above into clojure, we get:</p>

<p>``` clojure
(defn greatest-prime-of [number]
  (reduce max (filter #(zero? (mod number %))</p>

<pre><code>                  (take-while #(&lt; % (sqrt number)) primes))))
</code></pre>

<p>```</p>

<p>Something new here:</p>

<ul>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/max">max</a> - function that returns the greatest number of its arguments.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/zero_q">zero?</a> - predicate that test whether number is equal to zero or not.
The same as <code>#(= 0 %)</code>.</li>
<li><a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.math/sqrt">sqrt</a> - function from <code>clojure.contrib.math</code>. Name is obvious.</li>
</ul>


<p>Now, we want to find result. Run the line</p>

<p><code>clojure
(greatest-prime-of 600851475143))
</code></p>

<p><strong>Congratulations!</strong> Third problem solved.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem003.clj">GitHub</a> for lazy!</p>

<p><strong>P.S.</strong> Instead of using <code>clojure.contrib.math</code> for square root we could just write <code>(Math/sqrt n)</code> and got rid of dependency.
But for me is better to reuse something that was implemented in library. It's tested and worked, where your implementation can miss some point.
If you have time, dig more into <code>clojure.contrib.math</code>. It needs about 8 minutes. There are only 8 functions,
but you will probably reinvent them all the time:
<a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.math/expt">expt</a>,
<a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.math/abs">abs</a>,
<a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.math/sqrt">sqrt</a>,
<a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.math/round">round</a> and others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 002]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-002/"/>
    <updated>2012-10-15T18:46:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-002</id>
    <content type="html"><![CDATA[<blockquote><p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>

<p>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</p>

<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=2">http://projecteuler.net/problem=2</a></p>

<!-- more -->


<p>This is not hard problem with objective to make you familliar with <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci numbers</a>
(this numbers will appear in a lot of next problems). It can be implemented with the straightforward manner with the following rules applied:</p>

<ul>
<li><code>F(0) = 1</code></li>
<li><code>F(1) = 1</code></li>
<li><code>F(n) = F(n-1) + F(n-2)</code></li>
</ul>


<p>So, we can define simple recursive function to calculate n-th number of Fibonacci sequence in clojure:</p>

<p>``` clojure
(defn fib [n]
  (if (or (= n 1) (= n 0)) 1</p>

<pre><code>(+ (fib (- n 1)) (fib (- n 2)))))
</code></pre>

<p>```</p>

<p>It's probably not the best implementation of Fibonacci numbers, but it shows the idea.
We can check that it works correctly by calling <code>(map fib (range 10))</code> that produces sequence <code>(1 1 2 3 5 8 13 21 34 55)</code>.
Problem appears when we try to calculate <code>40th</code> number. Calling that function on my machine takes ~20 seconds. Not good.</p>

<p>The reason of such bad performance is repeated calculations. Let's see how expanded call <code>(fib 40)</code>.
It produces <code>(+ (fib 39) (fib 38))</code>, where <code>(fib 39)</code> expanded to <code>(+ (fib 38) (fib 37))</code> and <code>(fib 38)</code> to <code>(+ (fib 37) (fib 36))</code> etc.
The growth with factor of 2. And with these two expansions we calculated 2 values that we calculated before, <code>37th</code> and <code>38th</code>.</p>

<p>We can make better if we producing our sequence in direct order, instead of reverse. This way function will be more complex than previous:</p>

<p>``` clojure
(defn fib-seq [n]
  ((fn [a b c seq]</p>

<pre><code>(cond (= 1 n) [1]
      (= c n) seq
      :else (recur b (+ a b) (inc c) (conj seq (+ a b)))))
</code></pre>

<p>   1 1 2 [1 1]))
```</p>

<p>Let's see what's new clojure features we used:</p>

<ol>
<li>We define function inside function. Why we did this? All is because we used "helper"-function for accumulate current Fibonacci sequence.
It used only in function <code>fib-seq</code>, so we don't need to define it at the root level. It closed for using for everyone, except <code>fib-seq</code>.</li>
<li>Next thing we define anonymous function by keyword <code>fn</code>. Basically it's the right thing to define functions. <code>defn</code> just shortcut for <code>(def (fn [] ))</code>, and..</li>
<li>..we pass default (initialization) values for helper function <code>1 1 2 [1 1]</code>.</li>
<li>I skip logic of helper function here. It is pretty straightforward, just notice two new clojure functions that we used.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/cond">cond</a> - similar to switch-case structure in C-style languages.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/conj">conj</a> - add value to collection. Dependant on collection type,
insert new value in different places. For our case we using vector, so we add this value to the end of vector.</li>
</ol>


<p>Now we can call <code>(fib-seq 40)</code> and it calculates all 40 values very quickly. Nice.</p>

<p>But let's return to problem description <em>"... whose values do not exceed 4 million..."</em>.
How do we know how many values we need to take that do not exceed 4 million? 50? 100? 112?
This is drawback of our <code>fib-seq</code> function and we need to rewrite it...or take a look at clojure mechanism called lazy sequences.</p>

<h3>Lazy sequences</h3>

<p>In few words, lazy sequence is infinite sequence of some values, that calculates due to some expression.
The main idea here is the word <em>lazy</em> that means we evaluate expressions when they are needed.
For example, sequence of natural numbers is a lazy sequence. Clojure supports lazy sequences along with operations on them.
So, we can combine sequences, limit, filter etc. Java do not support lazy sequences but similar functionality can be implemented with generators concept.
Generator interface provides method <code>next()</code> to retrieve next value in the sequence, and that method evaluates value.
But this approach is very poor with comparison to clojure lazy sequences.</p>

<p>Lazy sequences in clojure can be treated like ordinary sequences. Obviously some methods make no sense, due to infinity of sequence (<code>count</code>, <code>last</code>, etc.)
There are way to define lazy sequences by using macro <code>lazy-seq</code>. But most common way to do it with the function iterate.
It takes function <code>f</code>, and initial value <code>a</code>, and produces lazy sequence <code>(a, f(a), f(f(a)),...)</code>.
For example lazy sequence of natural numbers we can define as following: <code>(iterate inc 1)</code>. Then we can play with this sequence as we want.</p>

<p><strong>WARNING:</strong> <em>Never call lazy sequence without limiting functions. It tries to evaluate all, and... You know, never call.</em></p>

<p>Now, we have a little understanding what lazy sequence is, and can implement Fibonacci lazy sequence.</p>

<p><code>clojure
(defn fib-seq-lazy []
  (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))
</code></p>

<p>Ok, What's here:</p>

<ol>
<li>Read from the end. We apply anonymous function to vector <code>[1 1]</code> and produce lazy sequence with <code>iterate</code>.</li>
<li>Note double square brackets in anonymous function definition. Outer brackets indicate function variables.
Inner brackets indicate that we take one parameter to function as argument.
This parameter is a sequence and we map to <code>a</code> and <code>b</code>, first and second elements in that sequence.
For example for first call, <code>a</code> bound to <code>1</code>, <code>b</code> bound to <code>1</code>.</li>
<li>Our iterate produces lazy sequence with following format <code>([1 1] [1 2] [2 3] [3 5] [5 8] ...)</code>.
Our Fibonacci sequence is just first value of each pair, and we using...</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/map">map</a> - takes function and applies it to each element of collection.
This function also produces lazy sequence.</li>
<li>To gather all in one we get lazy sequence that represent Fibonacci numbers <code>(1 1 2 3 5 8 ...)</code>.</li>
</ol>


<p>Now we have to implement functionality that in problem description. Immediately, code:</p>

<p><code>clojure
(reduce +
  (filter even? (take-while #(&lt; % 4000000) (fib-seq-lazy))))
</code></p>

<p>Another one(<em>two</em>)-liner. Good.</p>

<ol>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/take-while">take-while</a> - takes values from sequence (includes lazy sequences) while condition is true.</li>
<li><code>#(&lt; % 4000000)</code> - <code>#()</code> it's <a href="http://en.wikipedia.org/wiki/Tautology_%28rhetoric%29">shorter shortcut</a> for anonymous function.
In our case predicate return true if value lower than 4 millions. Exacly what we need.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/filter">filter</a> - return all values for which predicate return true.
Instead of take-while it proceed all sequence till the end, and, obviously, do not accept lazy sequences.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/even_q">even?</a> - predicate that return true, if number is even.
Note: this is common way to append function name with question mark to indicate that this function is predicate (return true or false). Just convention.</li>
<li>And, finally, sum all of them.</li>
</ol>


<p><strong>Congratulations!</strong> We just solved Project Euler Problem 2.</p>

<p>There are also few optimisations to get result faster, but <a href="http://en.wikipedia.org/wiki/KISS_principle">KISS</a>.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem002.clj">GitHub</a> for lazy!</p>

<p><strong>P.S.</strong> We could use <code>clojure-contrib</code> library, which is often deployed with standard <code>clojure-core</code>.
<code>clojure-contrib.lazy-seqs</code> library contains method <code>(fibs)</code> that also produces lazy Fibonacci sequence.
And interestingly it implemented the same way as we did.
There are two more lazy sequences: prime numbers and powers of 2.
It's good practice to use existing functionality and not invent vehicle.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 001]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-001/"/>
    <updated>2012-10-12T17:38:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-001</id>
    <content type="html"><![CDATA[<blockquote><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>

<p>Find the sum of all the multiples of 3 or 5 below 1000.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=1">http://projecteuler.net/problem=1</a></p>

<!-- more -->


<p>The simplest problem and nothing hard to solve it in standard iterative way (C-style pseudocode):</p>

<p><code>c
int s = 0;
for (int i=0; i &lt; 1000; i++) {
  if ((i % 3 == 0) || (i % 5 == 0)) s+=i;
}
</code></p>

<p>We get result immediately. But loop that changes value of some variable it's not a functional approach.
Let's rewrite this solution in <a href="http://en.wikipedia.org/wiki/Recursion">recursive</a> way in clojure:</p>

<p>``` clojure
(loop [i 0 s 0]
  (if (= i 1000) s</p>

<pre><code>(if (or (= 0 (mod i 3))
        (= 0 (mod i 5))) (recur (inc i) (+ s i))
                         (recur (inc i) s))))
</code></pre>

<p>```</p>

<p>Just few words what we are doing here:</p>

<ol>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/loop">loop</a> - create binding between names and values in scope of loop body.
For now, think about loop like a function definition with two variables <code>i</code> and <code>s</code> along with calling such function with arguments <code>i=0, s=0</code>.
<code>i</code> is a loop counter, <code>s</code> is an accumulator variable that holds current sum.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/mod">mod</a> - calculates remainder of division two numbers.
<a href="http://clojuredocs.org/clojure_core/clojure.core/inc">inc</a> - increment value, similar to <code>(+ i 1)</code>.</li>
<li><em>Recursion base case:</em> if we have <code>i</code> value equals to <code>1000</code>, then we finished our work and return current accumulator value <code>s</code>. Otherwise,</li>
<li><em>Recursion step:</em> if current <code>i</code> value is multiply of <code>3</code> or multiply of <code>5</code>, we add counter value to accumulator,
increment loop counter and call this function with these new arguments. Otherwise, we just increment value and call function.
This way we recursively go back to the first line of function with changed values until we get recursion base condition as true and return accumulator.
Recursion call performed by <a href="http://clojure.org/special_forms#recur">recur</a>.</li>
</ol>


<p>This can be a bit harder to understand than iterative style, but we have a couple of pros there.</p>

<ol>
<li>There are no variables. There are values and names bound to that values.
That means that we can't change one value to another inside loop. That's why we recursively call this function with changed values.
Such trick helps to avoid hard-to-spot error-prone situations where iteration counter changed inside the loop.</li>
<li>This is more flexible way than iteration. We can pass as much arguments as we want, move forward-backward,
select dynamic iterative step and even select any stop condition.</li>
<li>Safety. We are completely safe that our loop is pure local. It can not change anything outside.
All garbage he left was cleared after returning value (<em>Ecologists are very happy!</em>)</li>
</ol>


<p><strong>Congratulations!</strong> Problem solved, but let's find more elegant way.</p>

<p>We can split our problem into two simpler problems:</p>

<ol>
<li>Find sum of all multiples of <code>3</code> below <code>1000</code></li>
<li>Find sum of all multiples of <code>5</code> below <code>1000</code></li>
<li>Add these two sums</li>
</ol>


<p>Stop, stop! What about numbers that multiples of <code>3</code> and multiples of <code>5</code>, like <code>15, 30, 45,...</code>? We add them twice.
Good catch. Let's just subtract them once from total sum:</p>

<ol>
<li>Find sum of all multiples of <code>3</code> below <code>1000</code></li>
<li>Find sum of all multiples of <code>5</code> below <code>1000</code></li>
<li>Find sum of all multiples of <code>15</code> below <code>1000</code></li>
<li>Add sum 1 to sum 2 and subtract sum 3.</li>
</ol>


<p>You see the repeated <em>"Find sum of all..."</em>. It's clear definition of function. Let's implement it.</p>

<p><code>clojure
(defn sum-of [d] (reduce + (range 0 1000 d)))
</code></p>

<p>One line! Excited?
Brief description, what we wrote:</p>

<ol>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/defn">defn</a> indicates function definition.
We called function <code>sum-of</code>, it accepts one argument <code>d</code> (multiple of what?).
As you, probably notice, we do not enforced to specify type of function argument, as well as function returning type.
All it's because clojure is <a href="http://en.wikipedia.org/wiki/Dynamic_programming_language">dynamic</a> language.
Dynamic languages have pros and cons over static, but we omit their differences. For now.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/reduce">reduce</a> takes two parameters: function of two arguments and collection,
and applies that function to first two values, than to result and next value, again, again, until the end of collection.
So, for example <code>(reduce * [2 3 4 5])</code> calculates <code>(* 2 3)</code> that is <code>6</code>, calls <code>(reduce * [6 4 5])</code>, then calls <code>(reduce * [24 5])</code> and finally returns <code>120</code>.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/range">range</a> function generates list. As you see it takes three parameters,
but there are overloaded versions that takes 2, 1 or even 0 values. <code>(range 0 1000 d)</code> start generation from <code>0</code>,
next value will be <code>previous plus d</code>, until we exceed <code>1000</code>. Exclusively. So, <code>(range 0 10 3)</code> returns <code>(0 3 6 9)</code>.</li>
</ol>


<p>Ok. We have function <em>"Find sum of all..."</em> and almost all work is done. Just call this function with proper arguments and you'll get the result:</p>

<p><code>clojure
(+ (sum-of 3) (sum-of 5) (- (sum-of 15)))
</code></p>

<p>Done. In functional, clear, concise way in two lines of code.</p>

<p><strong>Note:</strong> our <a href="http://en.wikipedia.org/wiki/Big_O_notation">algorithm complexity</a> is <code>O(n)</code>.
If we remember school course of math, we realize that all our sequences are <a href="http://en.wikipedia.org/wiki/Arithmetic_progression">arithmetic progressions</a>.
That means for caluclating sum of sequence we don't need count sum in usual way, we just can use formula:</p>

<p><img src="http://upload.wikimedia.org/math/a/f/e/afe20f89d7bfdbd0a191168d80eb8077.png"></p>

<p><code>n</code> is a count of numbers in a sequence, <code>a1</code> - first value, <code>an</code> - last value.
Now we can reimplement our <code>sum-of</code> function next way:</p>

<p>``` clojure
(defn sum-of [d]
  (let [a1 d</p>

<pre><code>    an (- 999 (mod 999 d))
    n (quot 999 d)]
(/ (* cnt (+ a1 an)) 2)))
</code></pre>

<p>```</p>

<p>More harder to understand, but doable. New language syntax appears (999 used as we have <em>"below 1000"</em> in problem description):</p>

<ol>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/let">let</a> - creates a lexical context for expression.
In fact, it's just separate block of code, with names, that exist only in scope of that block.
After let we evaluates some expression and gives some values to the result.</li>
<li><code>a1</code> - first element of sequence, just step value <code>d</code>.</li>
<li><code>an</code> - last element of sequence. We don't know last element, so we need to calculate it.
Little trick: find the remainder of division 999 by d, and subtract it from 999.</li>
<li><code>n</code> - count of numbers in a sequence. We also don't know this value. It just will be integer number of division 999 by d.
Exactly what <a href="http://clojuredocs.org/clojure_core/clojure.core/quot">quot</a> function does.</li>
<li>And finally, the expression - formula for sum of arithmetic progression.</li>
</ol>


<p>Actually, we reduced readability of our code, but improved algorithmic complexity from <code>O(n)</code> to <code>O(1)</code>.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem001.clj">GitHub</a> for lazy.</p>

<p><a href="http://tryclj.com/">Try clojure online!</a></p>

<p><strong>P.S.</strong> Programming not tied to some problem is nothing. That's why, in first problem I prefer <code>O(n)</code> solution.
It still solves problem in appropriate time and have more readable code. If <code>n</code> grow, I'll think about switching to <code>O(1)</code> strategy, but not for now.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler/"/>
    <updated>2012-10-11T16:51:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler</id>
    <content type="html"><![CDATA[<p>Finally decided to post here my solutions to <a href="http://projecteuler.net/">Project Euler</a> implemented in <a href="http://clojure.org/">Clojure</a>.</p>

<!-- more -->


<p>As all in my life, frequency of posts with solutions will be mood-dependent.</p>

<p>The main reason for this series to provide a little introduction to clojure programming language during the solving interesting problems.</p>

<p>I'll also try do my best to explain some general terms, why this approach better or worse than others,
suggest alternative solutions or thoughts on problem and provide code.
You allowed to copy that code, calculate the result and past answer directly in Project Euler site, but I don't see any sense to do this.
Problem solving process gives more fun, than result. Approximately <a href="http://en.wikipedia.org/wiki/E_%28mathematical_constant%29">2.718282</a> times more.</p>
]]></content>
  </entry>
  
</feed>
