<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2013-04-01T23:53:32+03:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Golf: Game of Life]]></title>
    <link href="http://mishadoff.github.com/blog/code-golf-game-of-life/"/>
    <updated>2013-03-07T17:59:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/code-golf-game-of-life</id>
    <content type="html"><![CDATA[<p>Conway’s Game of Life in a tweet.</p>

<!-- more -->

<p>Recently, my friend pointed out me an article <a href="http://trelford.com/blog/post/140.aspx">Life in a tweet</a>
where <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a> was implemented in one tweet
(<em>less than 140 characters</em>) in Ruby and F#. I took this challenge.</p>

<h3 id="tweet">Tweet</h3>

<p>Here is the final version in <code>137</code> characters of Clojure:</p>

<p><code>clojure
(fn[g r](reduce(fn[i j](update-in i j(fn[v](get[v 1]
(-(apply +(map #(get-in g% 0)(for[a[-1 0 1]b[-1 0 1]]
(map + j[a b]))))v 2)0))))g r))
</code></p>

<h3 id="sugared-version">“Sugared” version</h3>

<p>Translate tweet to more readable code:</p>

<p><code>clojure
(defn step-sugar [grid range]
  (let [count-neighbours ;; determine number of neighbours
        (fn[[i j]]
          (reduce + (map #(get-in grid % 0)
                         (for[a [-1 0 1] b [-1 0 1]]
                           [(+ i a) (+ j b)]))))
        new-value  ;; calculate new value for cell
        (fn [v [i j]]
          (let [c (- (count-neighbours [i j]) v)]
            (cond (= 3 c) 1
                  (= 2 c) v
                  :else 0)))
        evolve-cell ;; update cell in a grid
        (fn[g i] (update-in g i #(new-value % i)))]
    (reduce evolve-cell grid range)))
</code></p>

<p>Actually, this version is cheating,
due to passing one extra-parameter <code>range</code> that contains all indices
need to be updated in form <code>[[0 1] [1 1]]...</code></p>

<p>On the other side it gives us two features:</p>

<ul>
  <li><strong>Works for rectangular grid</strong>. Although, initial
implementation assumes the world is square.</li>
  <li><strong>Specific part of world can be updated</strong>. It gives possibility
to update specific area in the world, for example <em>west organisms evolve faster</em>.</li>
</ul>

<p>To use this function you need:</p>

<ul>
  <li>World</li>
</ul>

<p><code>clojure
(def grid [[0 0 0]
           [1 1 1]
           [0 0 0]])
</code></p>

<ul>
  <li>Evolution</li>
</ul>

<p><code>clojure
(defn evolution [g]
  (let [p (count g) q (count (get g 0))
        range (for [i (range p) j (range q)][i j])]
    (iterate #(step-sugar % range) g)))
</code></p>

<ul>
  <li>Visualization</li>
</ul>

<p><code>clojure
(defn print-grid [g]
  (doseq [s (map #(apply str (replace {0 "." 1 "⚫"} %)) g)]
    (println s)))
</code></p>

<h3 id="testing">Testing</h3>

<p>To make sure results are correct use the following
<code>run</code> function and compare results to some common
<a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Examples_of_patterns">examples</a>.</p>

<p><code>clojure
(defn run [grid]
  (doseq [g (evolution grid)]
    (print-grid g)
    (Thread/sleep 1000)))
</code></p>

<p>Pattern examples:</p>

<p>``` clojure
(def block [[0 0 0 0]
            [0 1 1 0]
            [0 1 1 0]
            [0 0 0 0]])</p>

<p>(def glider [[0 0 1 0 0 0 0 0]
             [1 0 1 0 0 0 0 0]
             [0 1 1 0 0 0 0 0]
             [0 0 0 0 0 0 0 0]
             [0 0 0 0 0 0 0 0]
             [0 0 0 0 0 0 0 0]])
```</p>

<p>Full history of implementation and more life patterns
<a href="https://github.com/mishadoff/prog-experiment/blob/master/clojure/life.clj">available here</a></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 016]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-016/"/>
    <updated>2013-03-05T01:31:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-016</id>
    <content type="html"><![CDATA[<blockquote>
  <p>2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.</p>

  <p>What is the sum of the digits of the number 2^1000 ?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=16">http://projecteuler.net/problem=16</a></p>

<!-- more -->

<p>Are you kidding me?</p>

<ul>
  <li>Find 1000th <em>power of two</em></li>
  <li>Sum its digits</li>
</ul>

<p>In <a href="/blog/clojure-euler-problem-008/">Clojure Euler: Problem 008</a> we
learned how to sum digits in the number. Just gentle reminder:</p>

<p><code>clojure
(defn sum-of-digits [n]
  (reduce + (map #(- (int %) 48) (seq (str n)))))
</code></p>

<p>Now, let’s create sequence of powers of two:</p>

<p><code>clojure
(defn powers-of-2 []
  (iterate (partial * 2) 1))
</code></p>

<p>Unfortunately, this sequence throws <code>integer overflow</code> on the <code>64th</code> element.
We can fix that using <em>long arithmetics</em>, which known as <code>BigInteger</code> in Java.
Change <code>1</code> to <code>1N</code>.</p>

<p><code>clojure
(iterate (partial * 2) 1N)
</code></p>

<p>Another way is to use <strong>automatic promotion</strong> operator (<code>+'</code>, <code>*'</code>).
If result of some operation is not suitable for some type,
instead of invalid computation and runtime exception, clojure automatically promotes
the type to suitable one (<em>for example</em> <code>Long.MAX_VALUE +' 1</code> <em>works fine and produces
 correct result with type of</em> <code>BigInteger</code>):</p>

<p><code>clojure
(iterate (partial *' 2) 1)
</code></p>

<p>Choose <code>powers-of-2</code> that you prefer and final result will look like this:</p>

<p><code>clojure
(sum-of-digits (last (take 1001 (powers-of-2))))
</code></p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem016.clj">github</a></p>

<p><strong>P.S.</strong> Automatic promotion is a beatiful thing. But be aware about losing in
speed of calculations. Also, no way back. If promotion happened, <em>depromotion</em> won’t.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 015]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-015/"/>
    <updated>2013-02-19T00:38:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-015</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Starting in the top left corner of a 2 x 2 grid, there are 6 routes
(without backtracking) to the bottom right corner.</p>

  <p>How many routes are there through a 20 x 20 grid?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=15">http://projecteuler.net/problem=15</a></p>

<!-- more -->

<p><img src="http://projecteuler.net/project/images/p_015.gif" alt="" /></p>

<p>Picture is always a huge help to find correct the solution.
Let’s see the pattern here, with another picture</p>

<p><em>Warning:</em> If you don’t understand art, don’t look at that picture.</p>

<p><img src="http://i.imgur.com/WNEQNxG.png" alt="" /></p>

<p>It’s a solution for 3 x 3 grid. We trying to process it by steps:</p>

<ul>
  <li>At the start we located at the top left corner <code>[0, 0]</code>. There is just one case
to be at the start so we put <code>1</code> to that point.</li>
  <li>Then we move either down <code>[1, 0]</code> or right <code>[0, 1]</code>, and we put <code>1</code>
on the edges of the second diagonal line.</li>
  <li>Obviously, the point <code>[1, 1]</code> we can reach either from <code>[0, 1]</code> or from <code>[1, 0]</code>,
so there are two routes, and so on.</li>
</ul>

<p>If you just output the numbers from each diagonal line you’ll get:</p>

<p>```
       1
      1 1
     1 2 1
    1 3 3 1</p>

<p>```</p>

<p>It’s famous <a href="http://en.wikipedia.org/wiki/Pascal%27s_triangle">Pascal’s triangle</a>.
Each element in this triangle obtained by sum of two closest elements from the upper row.</p>

<p>To get desired result we need to sum these numbers again, until we get one number.
But it’s also numbers from Pascal’s triangle.</p>

<p><code>
    1   3   3   1
      4   6   4
       10  10
         20
</code></p>

<p>We can treat Pascal’s triangle as a sequence, and each row is an element. Then the
following function calculates next row:</p>

<p><code>clojure
(defn routes-extend [lst]
  (let [size (count lst)]
    (for [i (range (inc size))]
      (if (or (= 0 i) (= size i)) 1
        (+ (nth lst (dec i)) (nth lst i))))))
</code></p>

<p>Usage:</p>

<p><code>
(routes-extend [1]) =&gt; [1 1]
(routes-extend [1 1]) =&gt; [1 2 1]
</code></p>

<p>Now we can build infinite sequence of Pascal’s triangle rows:</p>

<p><code>clojure
(iterate routes-extend [1])
</code></p>

<p>For <code>3 x 3</code> grid we had 7 diagonals, each of them represented one row.
Take a guess. For <code>n x n</code> grid we need to get <code>2 * n + 1</code> row. And take it
middle element, which, of course, will be with the index <code>n</code>.</p>

<p>That’s the final solution:</p>

<p><code>clojure
(let [n 20 d (inc (* n 2))]
  (nth (last (take d (iterate routes-extend [1]))) n))
</code></p>

<p>Problem solved.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem015.clj">Code</a></p>

<p><strong>P.S</strong> Two points I want to admit here. First of all, drawing pictures
and trying to understand problem with pictures is a powerful technique that must be
used for every problem.</p>

<p>Second of all, you can see that our algorithm has complexity of <code>O(n^2)</code>. But ideal
solution is <code>O(1)</code> with usage <a href="http://en.wikipedia.org/wiki/Binomial_coefficient">binomial coefficient</a>
<code>(2*n, n)</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 014]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-014/"/>
    <updated>2013-02-16T01:08:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-014</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Which starting number, under one million, produces the longest Collatz chain?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=14">http://projecteuler.net/problem=14</a></p>

<!-- more -->

<blockquote>
  <p>The following iterative sequence is defined for the set of positive integers:</p>

  <p>n → n/2 (n is even)</p>

  <p>n → 3n + 1 (n is odd)</p>

  <p>Using the rule above and starting with 13, we generate the following sequence:</p>

  <p>13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</p>

  <p>It can be seen that this sequence (starting at 13 and finishing at 1)
contains 10 terms. Although it has not been proved yet (Collatz Problem),
it is thought that all starting numbers finish at 1.</p>

  <p>Which starting number, under one million, produces the longest chain?</p>

  <p>NOTE: Once the chain starts the terms are allowed to go above one million.</p>
</blockquote>

<p>Sequences again.
So, first of all we need function to detect next collatz number.
It is pretty straightforward:</p>

<p><code>clojure
(defn collatz-next [n]
  (if (even? n) (/ n 2) (inc (* n 3))))
</code></p>

<p>Using this <em>next-element-generator</em> we can generate infinite collatz sequence,
starting from number <code>n</code>:</p>

<p><code>clojure
(iterate collatz-next n)
</code></p>

<p>But instead of infinite sequence, we stop processing when we reach <code>1</code> and calculate
count of collatz chain sequence:</p>

<p><code>clojure
(defn collatz-chain-length [n]
  (inc (count (take-while #(&gt; % 1) (iterate collatz-next n)))))
</code></p>

<p>Now we have almost all code logic and just use it: calculate collatz chain
for all numbers in range <code>[1..1000000]</code>, find maximum and output its index:</p>

<p><code>clojure
(first (reduce #(if (&gt; (second %1) (second %2)) %1 %2)
               (map #(list % (collatz-chain-length %)) (range 1 1000000))))
</code></p>

<p>Run it. Wait a minute. I mean minute <em>literally</em>.</p>

<p>The time of caclulation is slightly greater than <strong>one minute</strong> on my machine,
and I have no idea how to solve it another way.</p>

<p>I am sure there is a better algorithm than mine. But I don’t know it.
What I know is try to re-read problem definion if you are stuck. Especially that part:</p>

<blockquote>
  <p>13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</p>
</blockquote>

<p>So, for <code>13</code> the chain length is <code>10</code>, for <code>40</code> is <code>9</code>, for <code>20</code> is <code>8</code>,…</p>

<p>Got it?</p>

<p>Each time we calculate length we perform <em>repeated calculation</em>. If we know
chain length of <code>13</code>, and whole its path to <code>1</code> we don’t need to calculate length
for <code>40</code>, <code>20</code> and so on.</p>

<p>So the optimization is <em>somehow to cache the results</em>. But at first we need to rewrite
it to have recursive solution.</p>

<p>Here the first (<em>and final</em>) version:</p>

<p><code>clojure
(defn collatz-chain-recursive [n]
  (if (= n 1) 1
      (inc (collatz-chain-recursive (collatz-next n)))))
</code></p>

<p>Recursion is impressive at the point that its implementation
almost exactly follows the problem definition. It is easy to understand.</p>

<p>But, as you may notice our implementation not
<a href="http://en.wikipedia.org/wiki/Tail_call">tail-recursive</a> so we can
have troubles. Do not think about it unless we actually have them.</p>

<p>For the sake of fun let’s run this function instead of previous to
obtain the results.</p>

<p><strong>20 seconds</strong>, it is great. I even don’t think that
this simple recursive function gives such boost in performance.</p>

<p>One little tweak in result function:</p>

<p><code>clojure
(first
  (apply max-key second
         (map #(list % (collatz-chain-recursive %)) (range 1 1000000))))
</code></p>

<p>And we have <strong>~12 seconds</strong>.</p>

<p>Unexpected “The End”. Yeah, I love The Doors.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem014.clj">code-code</a></p>

<p><strong>P.S.</strong> I really wanted to explain technique called
<a href="http://en.wikipedia.org/wiki/Memoization">memoization</a> and
simple clojure function <a href="http://clojuredocs.org/clojure_core/clojure.core/memoize">memoize</a>,
but seems that caching result doesn’t have much sense here because
12 seconds is acceptable. We will have chance to introduce
memoization later, where it will be more useful. By the way, I am <em>lazy</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Analysis: Facebook Hacker Cup 2013]]></title>
    <link href="http://mishadoff.github.com/blog/data-analysis-facebook-hacker-cup/"/>
    <updated>2013-02-01T12:42:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/data-analysis-facebook-hacker-cup</id>
    <content type="html"><![CDATA[<p>What programming language is most used?</p>

<!-- more -->

<p>To answer this question we use results from the qualification round
of <a href="https://www.facebook.com/hackercup">Facebook Hacker Cup 2013</a></p>

<p>If you only interested in statistics, <a href="#stats">skip!</a></p>

<h3 id="intro">0. Intro</h3>

<p>As you may know, Facebook Hacker Cup is a programming contest. You have programming
problem and you need to solve it, in most cases in efficient way. You get input file
and you need to submit the output file in less than 6 minutes. Pretty simple.
The interesting part you need to submit your source code, that can be reviewed by
any of contestants after round.</p>

<p>These sources we use to get programming language statistics.</p>

<h3 id="data">1. Data</h3>

<p>Primary resource in statistics is data.</p>

<p>We have <a href="https://www.facebook.com/hackercup/scoreboard?round=185564241586420">scoreboard</a> page
(<em>You must be logged to FB to see results</em>) and interested in all links named <em>source</em>.
Open every link manually takes much time, so we will use automated approach
and will write program. Yes, in clojure.</p>

<h4 id="dependencies">Dependencies</h4>

<p>For facebook authentification we can use:</p>

<ul>
  <li><a href="https://github.com/DerGuteMoritz/clj-oauth2">OAuth authentification</a></li>
  <li><a href="https://developers.facebook.com/">Facebook app</a></li>
  <li><a href="http://seleniumhq.org/">Selenium</a></li>
</ul>

<p>I didn’t think too much about alternatives,
because I wanted to try selenium in clojure. It’s a time!</p>

<p>In few words, selenium provides capability to perform programmatically
browser events. Often used in automation. To use selenium in clojure program
just add <code>[clj-webdriver "0.6.0-beta2"]</code> to your project dependencies.</p>

<p>To simplify HTTP GET access we use library <code>[clj-http "0.6.3"]</code> and for
additional help <code>[org.clojure/clojure-contrib "1.2.0"]</code>.</p>

<p>In code we use following <em>requires</em></p>

<p><code>clojure
(:require [clj-http.client :as http])
(:require [clj-webdriver.taxi :as web])
(:require [clj-webdriver.core :as c])
(:require [clojure.contrib.math :as math])
</code></p>

<h4 id="automation">Automation</h4>

<p>Before we will automate actions to gather sources we need to decide
what these actions are?</p>

<ul>
  <li>Run browser</li>
  <li>Open facebook url</li>
  <li>Login to facebook
    <ul>
      <li>Enter login</li>
      <li>Enter password</li>
      <li>Press submit</li>
    </ul>
  </li>
  <li>Go to scoreboard page</li>
  <li>Process each page <code>loop [1..n]</code>
    <ul>
      <li>Go to page <code>n</code></li>
      <li>Get all links</li>
      <li>Filter links with sources</li>
      <li>Process each link <code>loop [1..k]</code>
        <ul>
          <li>Go to link url <code>k</code></li>
          <li>Get all page source</li>
          <li>Filter out source code</li>
          <li>Generate file name</li>
          <li>Write source to file</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>Pretty clear, right? Let’s code it sequentially.</p>

<h4 id="implementation">Implementation</h4>

<ul>
  <li><em>Run browser</em> and <em>Open facebook url</em></li>
</ul>

<p><code>clojure
(web/set-driver! {:browser :firefox} "http://facebook.com")
</code></p>

<ul>
  <li><em>Login to facebook</em></li>
</ul>

<p><code>clojure
(web/input-text "#email" username)
(web/input-text "#pass" password)
(web/submit "#pass")
</code></p>

<ul>
  <li><em>Go to scoreboard page</em></li>
</ul>

<p><code>clojure
(web/to "https://www.facebook.com/hackercup/scoreboard?round=185564241586420")
</code></p>

<ul>
  <li><em>Process each page</em></li>
</ul>

<p><code>clojure
(doseq [page-num (range 1 (inc 114))]
  (process-page page-num))
</code></p>

<p>Number of pages is hardcoded. It’s ok.
What is <code>process-page</code> method?</p>

<p><code>clojure
(defn process-page [n]
  (let [url (str "https://www.facebook.com/hackercup/scoreboard?round=185564241586420&amp;page=" n)]
    (web/to url)
    (doseq [e (web/find-elements {:css "a"})
            :let [url (c/attribute e "href")]
            :when (and url (.startsWith url "https://fbcdn-dragon-a.akamaihd.net/"))]
      (process-url url))))
</code></p>

<p>First of all,  we concat scoreboard link with page number to get actual link to each page.
Then we go to that page obtain all <code>a</code> elements, get their <code>href</code> values and filter
to save only ones that contain source code.</p>

<ul>
  <li><em>Process each url</em></li>
</ul>

<p><code>clojure
(defn process-url [url]
  (let [source-code (:body (http/get url))
        file-name (generate-filename url)]
    (spit file-name source-code)))
</code></p>

<p>In this part we obtain html source of url and get its <code>:body</code> tag.
As all source urls contain just plain text, we don’t need additional
filtering. Just save it to file.</p>

<ul>
  <li><em>Generate file name</em></li>
</ul>

<p>I don’t want to name file as url. That’s why for naming we use following
function: <code>timestamp + underscore + absolute value of url hashcode</code></p>

<p><code>clojure
(defn generate-filename [url]
  (str DIRECTORY (System/currentTimeMillis) "_" (math/abs (hash url)) ".txt"))
</code></p>

<p><code>DIRECTORY</code> is just <code>def</code> for folder where you want to place all sources.</p>

<p>Whole script source available <a href="https://github.com/mishadoff/clj-statistic-tools/blob/master/src/clj_statistic_tools/fbhackercup2013.clj">here</a></p>

<h4 id="execution">Execution</h4>

<p>To run that script you need to write in clojure REPL
<code>(run "username" "password")</code>, with correct values for <em>username</em> and <em>password</em>, obviously.</p>

<p>It works some time. <em>Some time</em> equals to eight hours on my machine. Long enough.
But it’s ideal time for <em>night crawling</em>!</p>

<p>In the morning I had all work done.</p>

<p><code>
ls -1 | wc -l &amp;&amp; du
</code></p>

<p>prints</p>

<p><code>
20348
291120  .
</code></p>

<p>Good sign. We have more than 20K of source codes with total size almost 300Mb.</p>

<h3 id="analysis">2. Analysis</h3>

<p>Data is good. But no one interested in raw data, so we need process it.</p>

<p>Basically, we need to detect programming language by source file.
No extensions.</p>

<p>You can <a href="https://www.bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html">write your own classifier</a>
or use some existing tool.</p>

<p>I did few-minutes research on this topic and found
<a href="https://github.com/github/linguist">linguist</a> project.
It is written in <em>Ruby</em> and used in <a href="https://gist.github.com/">Gist</a> to
detect snippet language. Exactly what we need!</p>

<p><em>Unfortunately, I do not know ruby. I even could not build and run linguist classifier to
detect language in my files. Rvm, gems and modules driving me crazy. I surrendered.</em></p>

<p>Another solution to use javascript library <a href="http://softwaremaniacs.org/soft/highlight/en/">Highlight.js</a>.
It is used in syntax coloring, but have automatic language detection. Again, javascript and
reading files from filesystem… Don’t tell me about Node.js</p>

<p>I decided to write my own “classifier”. Honestly, it’s just regexp matching mechanism
on common language constructions: keywords, imports, most used functions, etc.</p>

<p>Iterative approach has been used.</p>

<p>Select some popular language construction say <code>#include &lt;iostream&gt;</code> and filter it as <code>C</code>. After filtering
we detect some subset of <code>C</code> language, remove them from all files list and repeat again with another construction.</p>

<p><em>I don’t know how <code>C++</code> different from <code>C</code>, so I accept them both as interchangeable languages but call it <code>C/C++</code>.
By the way, <code>C - C++ = 0</code>, so we assume they are equal.</em></p>

<p>I developed some number of patterns (they can be reviewed
<a href="https://github.com/mishadoff/clj-statistic-tools/blob/master/src/clj_statistic_tools/fbhackercup2013.clj">here</a>)
and processed all gathered source files.</p>

<p>Unfortunately, not all files were processed succesfully. I reviewed approximately 2000 files manually, few
new languages were detected but big amount of them were the crap: input data, binary files, some text information.</p>

<p>I think we don’t lose too much if we say <em>only 99% of files were processed</em>.</p>

<h3 id="a-idstatsa3-statistics"><a id="stats"></a>3. Statistics</h3>

<p><img src="http://i.imgur.com/sWyfLqv.png" alt="" /></p>

<p>If you don’t like this visualization, you can create your own. Here is data:</p>

<p><code>
C/C++          10524
Java            3117
Python          3102
C#              1233
PHP              821
Ruby             488
Perl             142
Pascal/Delphi    136
Javascript       109
Haskell           85
Scala             72
Clojure           29
Go                28
Visual Basic      19
F#                12
Scheme             8
OCaml              7
Common Lisp        6
Lua                5
Matlab             4
Cocoa              3
Groovy             2
Dart               2
awk                1
Powershell         1
bash               1
Kotlin             1
ActionScript       1
Dylan              1
--------------------
crap             192
not detected     196
--------------------
TOTAL          20348
</code></p>

<h3 id="conclusion">4. Conclusion</h3>

<ul>
  <li>Top 5 was predicted but it’s extremely crazy that C/C++ occur more than 50%</li>
  <li>Python has almost the same amount as Java</li>
  <li>Good occurence of functional languages: Haskell, F#, Scala, Clojure, Ocaml</li>
  <li>29 Clojure files that means there ~10 clojurists.</li>
  <li>Two languages I never heard of:
<a href="http://www.dartlang.org/">Dart</a> and
<a href="http://opendylan.org/">Dylan</a></li>
  <li><em>Parenthesis</em> languages still used: Common Lisp, Scheme and Clojure (of course)</li>
  <li>Respect to matlabists</li>
  <li>Few <em>exotic languages</em> used: awk, powershell, bash</li>
  <li><a href="http://kotlin.jetbrains.org/">Kotlin</a> becomes popular!</li>
</ul>

<p><em>Warning:</em> Do not treat this statistics as real-world pattern. It is a programming competition with
a lot of geeks, they can use all they want. Also do not blame their code for quality. It was created just for
correctness and speed. Pay attention to code quality in production, but always remember:</p>

<blockquote>
  <p>Your code may be elegant, by mine fucking works.</p>

  <p>– <a href="http://omniti.com/seeds/your-code-may-be-elegant">Leon Fayer</a>
<br /></p>
</blockquote>

<p><strong>P.S.</strong> First of all, it is not high-accurate statistics. As I am not
programming guru, I don’t know all possible languages’ constructions
so it is likely that one construction overlapped with another. In that case
only first one will be checked. Ideally, would be good to have language
detecting library in clojure for future analysis. <em>Maybe</em>, I will do it.
Second of all, code presented here is not beautiful, not optimized, have a lot
of hardcode, but it works. Just in the spirit of Facebook Hacker Cup.</p>
]]></content>
  </entry>
  
</feed>
