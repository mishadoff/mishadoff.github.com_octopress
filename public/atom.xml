<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2012-11-06T20:53:43+02:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is greater: e^pi or pi^e?]]></title>
    <link href="http://mishadoff.github.com/blog/what-is-greater-e-pi-or-pi-e/"/>
    <updated>2012-11-06T16:00:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/what-is-greater-e-pi-or-pi-e</id>
    <content type="html"><![CDATA[<p>You can answer almost immediately using calculator, but what if you don&#8217;t have it?</p>

<!-- more -->


<p>I don&#8217;t remember the origin of this joke</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Magic. Part 2: 0xCAFEBABE]]></title>
    <link href="http://mishadoff.github.com/blog/java-magic-part-2-0xcafebabe/"/>
    <updated>2012-10-31T19:42:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/java-magic-part-2-0xcafebabe</id>
    <content type="html"><![CDATA[<p>Did you know that all java classes start with the same 4 bytes. In hex it&#8217;s <code>CAFEBABE</code>.</p>

<!-- more -->


<p>To make sure, create simple java file, call it <code>Hello.java</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hell, O&#39;World!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile it by <code>javac Hello.java</code>, and open <code>Hello.class</code> with hex-editor (<code>M-x hexl-mode</code> for emacs)</p>

<p><img src="http://mishadoff.github.com/images/cafebabe.png" title="cafebabe" alt="" /></p>

<p>James Gosling <a href="http://radio-weblogs.com/0100490/2003/01/28.html">explained</a> this:</p>

<blockquote><p>We used to go to lunch at a place called St Michael&#8217;s Alley.
According to local legend, in the deep dark past, the Grateful Dead used to perform there before they made it big.
It was a pretty funky place that was definitely a Grateful Dead Kinda Place.
When Jerry died, they even put up a little Buddhist-esque shrine.
When we used to go there, we referred to the place as Cafe Dead.
Somewhere along the line it was noticed that this was a HEX number.
I was re-vamping some file format code and needed a couple of magic numbers: one for the persistent object file, and one for classes.
I used CAFEDEAD for the object file format, and in grepping for 4 character hex words that fit after &#8220;CAFE&#8221; (it seemed to be a good theme)
I hit on BABE and decided to use it. At that time, it didn&#8217;t seem terribly important or destined to go anywhere but the trash-can of history.
So CAFEBABE became the class file format, and CAFEDEAD was the persistent object format. But the persistent object facility went away,
and along with it went the use of CAFEDEAD - it was eventually replaced by RMI.</p></blockquote>

<p><code>0xCAFEBABE</code> is <code>3405691582</code> in decimal.
If we sum all digits we get <code>43</code>. One more than <code>42</code> - <em>Ultimate Answer to the Life, the Universe, and Everything</em>.
By the way, <code>43</code> is a prime number. You see, magic everywhere. Even in the last sentence.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 004]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-004/"/>
    <updated>2012-10-31T19:30:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-004</id>
    <content type="html"><![CDATA[<blockquote><p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 x 99.</p>

<p>Find the largest palindrome made from the product of two 3-digit numbers.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=4">http://projecteuler.net/problem=4</a></p>

<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Palindrome">Palindrome</a> is very interesting thing.
It&#8217;s a sequence (of letters, numbers, words) that reads the same backwards. Examples: <em>MADAM</em>, <em>DID</em>, <em>2002</em>.
There are even some fun to compose palindrome sentences, like <code>He Goddam Mad Dog, eh?</code></p>

<p>Function to check if sequence is palindromic is very simple.
Compare first element with the last, second with the penultimate and so on.
It needs just <code>n/2</code> comparisons, so complexity of that algorithm is <code>O(n)</code>. Here is recursive solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">palindrome-recursive?</span> <span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">s</span><span class="p">)</span> <span class="nv">true</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nb">first </span><span class="nv">s</span><span class="p">)</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">last </span><span class="nv">s</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">rest </span><span class="p">(</span><span class="nb">butlast </span><span class="nv">s</span><span class="p">)))</span> <span class="nv">false</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note two functions: function <a href="http://clojuredocs.org/clojure_core/clojure.core/last">last</a> - gets last element of collection,
<a href="http://clojuredocs.org/clojure_core/clojure.core/butlast">butlast</a> - drops last element of collection.
Both they work in linear time, so you might assume overall complexity is <code>O(n^2)</code>.
Using vectors we can get index access, and perform test much faster, but this detail is not important for now.</p>

<p>Using more cleaner way (obviously not the best) to implement this, which in particular I prefer, is the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">palindrome?</span> <span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="nv">s</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">s</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Function <a href="http://clojuredocs.org/clojure_core/clojure.core/reverse">reverse</a>, returns given sequence in reverse order in linear time.
Overall complexity is also <code>O(n)</code>.</p>

<p>To test whether number is palindrome or not, we just cast it to string, then cast string to sequence of chars, and using above function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">palindrome-number?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">palindrome?</span> <span class="p">(</span><span class="nb">seq </span><span class="p">(</span><span class="nb">str </span><span class="nv">n</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Final solution is following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">reduce max </span><span class="p">(</span><span class="nb">filter </span><span class="nv">palindrome-number?</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">100</span> <span class="mi">1000</span><span class="p">)</span> <span class="nv">j</span> <span class="p">(</span><span class="nb">range </span><span class="nv">i</span> <span class="mi">1000</span><span class="p">)]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">i</span> <span class="nv">j</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We just generate all combinations of 3-digit numbers multiplication, filter palindromes, and find maximum. Done.</p>

<p>This technique (<em>wow, is this technique?</em>) called <a href="http://en.wikipedia.org/wiki/Brute-force_search">brute-force</a>.
It&#8217;s very consumable, because test each possible combination.
But it&#8217;s common algorithm to such sort of problems.
There are lot of clever brute force optimization to reduce set of possible values, but it is still brute force.
As you see, in the code above, we also used small optimization.
We iterate first multiplicand <code>i</code> from <code>100</code> to <code>1000</code> to cover all 3-digits numbers, and <code>j</code> iterated not from <code>100</code> but from <code>i</code>.
This is because multiplication <code>375 * 468</code> gives the same result as <code>468 * 375</code>. Just because <a href="http://en.wikipedia.org/wiki/Commutative_property">commutative property</a>.
Roughly, this reduces number of iterations by factor of 2.
Obviously, there are other optimizations, but they are not so value and reduces readability
(<em>If first number ends with 5 and second is even, then result ends with 0, and we skip this because in palindromic value 0 should be at the beginning</em>).</p>

<p><strong>Congratulations!</strong> 4 problems solved. And we know &#8220;so much&#8221; about clojure.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem004.clj">GitHub</a>.</p>

<p><strong>P.S.</strong> We create two separate functions for palindromes: one test sequence for palindrome,
second test number for palindrome and reuse first implementation. Some can say it&#8217;s not good,
because we write functionality that we not needed (function <code>palindrome?</code>).
Particularly, I agree. We could hide <code>palindrome?</code> implementation inside <code>palindrome-number?</code> or make it private.
But we haven&#8217;t did this and have function <code>palindrome?</code> that we can reuse in other problems. Also it shows important concept,
how we can reuse existing implementations to get new functionality. And again: maybe there is (<em>I&#8217;m sure there is</em>) another solution
which is more clever than bruteforce. But this solution works only <code>0.2</code> sec. on my machine, so this is ok.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 004]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-004/"/>
    <updated>2012-10-31T19:30:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-004</id>
    <content type="html"><![CDATA[<blockquote><p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 x 99.</p>

<p>Find the largest palindrome made from the product of two 3-digit numbers.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=4">http://projecteuler.net/problem=4</a></p>

<!-- more -->


<p><a href="http://en.wikipedia.org/wiki/Palindrome">Palindrome</a> is very interesting thing.
It&#8217;s a sequence (of letters, numbers, words) that reads the same backwards. Examples: <em>MADAM</em>, <em>DID</em>, <em>2002</em>.
There are even some fun to compose palindrome sentences, like <code>He Goddam Mad Dog, eh?</code></p>

<p>Function to check if sequence is palindromic is very simple.
Compare first element with the last, second with the penultimate and so on.
It needs just <code>n/2</code> comparisons, so complexity of that algorithm is <code>O(n)</code>. Here is recursive solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">palindrome-recursive?</span> <span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">s</span><span class="p">)</span> <span class="nv">true</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nb">first </span><span class="nv">s</span><span class="p">)</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">last </span><span class="nv">s</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">rest </span><span class="p">(</span><span class="nb">butlast </span><span class="nv">s</span><span class="p">)))</span> <span class="nv">false</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note two functions: function <a href="http://clojuredocs.org/clojure_core/clojure.core/last">last</a> - gets last element of collection,
<a href="http://clojuredocs.org/clojure_core/clojure.core/butlast">butlast</a> - drops last element of collection.
Both they work in linear time, so you might assume overall complexity is <code>O(n^2)</code>.
Using vectors we can get index access, and perform test much faster, but this detail is not important for now.</p>

<p>Using more cleaner way (obviously not the best) to implement this, which in particular I prefer, is the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">palindrome?</span> <span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="nv">s</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">s</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Function <a href="http://clojuredocs.org/clojure_core/clojure.core/reverse">reverse</a>, returns given sequence in reverse order in linear time.
Overall complexity is also <code>O(n)</code>.</p>

<p>To test whether number is palindrome or not, we just cast it to string, then cast string to sequence of chars, and using above function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">palindrome-number?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">palindrome?</span> <span class="p">(</span><span class="nb">seq </span><span class="p">(</span><span class="nb">str </span><span class="nv">n</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Final solution is following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">reduce max </span><span class="p">(</span><span class="nb">filter </span><span class="nv">palindrome-number?</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">100</span> <span class="mi">1000</span><span class="p">)</span> <span class="nv">j</span> <span class="p">(</span><span class="nb">range </span><span class="nv">i</span> <span class="mi">1000</span><span class="p">)]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">i</span> <span class="nv">j</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We just generate all combinations of 3-digit numbers multiplication, filter palindromes, and find maximum. Done.</p>

<p>This technique (<em>wow, is this technique?</em>) called <a href="http://en.wikipedia.org/wiki/Brute-force_search">brute-force</a>.
It&#8217;s very consumable, because test each possible combination.
But it&#8217;s common algorithm to such sort of problems.
There are lot of clever brute force optimization to reduce set of possible values, but it is still brute force.
As you see, in the code above, we also used small optimization.
We iterate first multiplicand <code>i</code> from <code>100</code> to <code>1000</code> to cover all 3-digits numbers, and <code>j</code> iterated not from <code>100</code> but from <code>i</code>.
This is because multiplication <code>375 * 468</code> gives the same result as <code>468 * 375</code>. Just because <a href="http://en.wikipedia.org/wiki/Commutative_property">commutative property</a>.
Roughly, this reduces number of iterations by factor of 2.
Obviously, there are other optimizations, but they are not so value and reduces readability
(<em>If first number ends with 5 and second is even, then result ends with 0, and we skip this because in palindromic value 0 should be at the beginning</em>).</p>

<p><strong>Congratulations!</strong> 4 problems solved. And we know &#8220;so much&#8221; about clojure.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem004.clj">GitHub</a>.</p>

<p><strong>P.S.</strong> We create two separate functions for palindromes: one test sequence for palindrome,
second test number for palindrome and reuse first implementation. Some can say it&#8217;s not good,
because we write functionality that we not needed (function <code>palindrome?</code>).
Particularly, I agree. We could hide <code>palindrome?</code> implementation inside <code>palindrome-number?</code> or make it private.
But we haven&#8217;t did this and have function <code>palindrome?</code> that we can reuse in other problems. Also it shows important concept,
how we can reuse existing implementations to get new functionality. And again: maybe there is (<em>I&#8217;m sure there is</em>) another solution
which is more clever than bruteforce. But this solution works only <code>0.2</code> sec. on my machine, so this is ok.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 003]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-003/"/>
    <updated>2012-10-30T19:12:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-003</id>
    <content type="html"><![CDATA[<blockquote><p>The prime factors of 13195 are 5, 7, 13 and 29.</p>

<p>What is the largest prime factor of the number 600851475143?</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=3">http://projecteuler.net/problem=3</a></p>

<!-- more -->


<p>If you familiar with <a href="http://en.wikipedia.org/wiki/Prime_number">prime numbers</a>, you apparently know basic algorithms to find them,
if not, I advice to get familiar with it. There are lot of problems devoted to prime numbers on Project Euler. So, read 10 minutes about prime numbers, and go on.</p>

<p>In few words, prime number is a number starting from 2 that has no divisors except <em>1</em> and <em>itself</em>.
Exposing this logic on all numbers, we can simply find first prime numbers: <code>2, 3, 5, 7, 11, ...</code></p>

<p>To implement function that search for prime numbers we can implement predicate, that test whether number is prime or not:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">prime?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">n</span><span class="p">))]</span>
</span><span class='line'>                  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="nv">i</span><span class="p">))</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We iterate from 1 up to number and calculate reminder of division number by iteration counter.
If result is zero we return 1, otherwise we return 0.
For each number we get list with length of that number that marked with 1 for exact divisors.
For example for <code>6</code> list will be <code>(1 1 1 0 0 1)</code>, and for <code>7</code> list will be <code>(1 0 0 0 0 0 0 1)</code>.
Than we calculate sum of this list, which represents number of divisors. If count is two, that means number is prime.
This is simplest algorithm for testing prime number, built from prime number definition.</p>

<p>Performing small optimization you can see that in lists above, first and last elements are always equals to 1.
We can just drop them. Another optimization is we don&#8217;t need go on when we found at least one remainder.
And I&#8217;m pretty sure you can find lot of flaws in this implementation.</p>

<p>But the most useful optimization is assumption that we don&#8217;t need iterate to <code>n</code>, we can iterate to <code>sqrt(n)</code>.
This is based on fact that if we found some number <code>a</code> that is divisor of <code>n</code>, then there is another number <code>b = n / a</code>.
And <code>b</code> is also divisior of <code>n</code>. Little transformation gives us <code>a * b = n</code>. Assume <code>a &lt; b</code>, so if we found <code>a</code> we don&#8217;t need to seek for <code>b</code>.
Number <code>n</code> is not prime. Maximum value of a achieved when <code>a</code> equals to <code>b</code>, <code>a^2 = n</code>, <code>a = sqrt(n)</code>.
This is reduce complexity of algorithm from <code>O(n)</code> to <code>O(sqrt(n))</code>.</p>

<p>In <a href="http://mishadoff.github.com/blog/clojure-euler-problem-002/">previous problem</a> we mentioned <code>clojure.contrib.lazy-seqs</code> package,
where we have primes lazy sequence. Let&#8217;s use it!</p>

<p>Algorithm for solving our problem is following:</p>

<ol>
<li>Iterate through all prime number that less than square root of number</li>
<li>If this number is divisor add it to list</li>
<li>Find maximum from that list</li>
</ol>


<p>To transform statements above into clojure, we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">greatest-prime-of</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce max </span><span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">number</span> <span class="nv">%</span><span class="p">))</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">take-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">%</span> <span class="p">(</span><span class="nf">sqrt</span> <span class="nv">number</span><span class="p">))</span> <span class="nv">primes</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Something new here:</p>

<ul>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/max">max</a> - function that returns the greatest number of its arguments.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/zero_q">zero?</a> - predicate that test whether number is equal to zero or not.
The same as <code>#(= 0 %)</code>.</li>
<li><a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.math/sqrt">sqrt</a> - function from <code>clojure.contrib.math</code>. Name is obvious.</li>
</ul>


<p>Now, we want to find result. Run the line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">greatest-prime-of</span> <span class="mi">600851475143</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Congratulations!</strong> Third problem solved.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem003.clj">GitHub</a> for lazy!</p>

<p><strong>P.S.</strong> Instead of using <code>clojure.contrib.math</code> for square root we could just write <code>(Math/sqrt n)</code> and got rid of dependency.
But for me is better to reuse something that was implemented in library. It&#8217;s tested and worked, where your implementation can miss some point.
If you have time, dig more into <code>clojure.contrib.math</code>. It needs about 8 minutes. There are only 8 functions,
but you will probably reinvent them all the time:
<a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.math/expt">expt</a>,
<a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.math/abs">abs</a>,
<a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.math/sqrt">sqrt</a>,
<a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.math/round">round</a> and others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 002]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-002/"/>
    <updated>2012-10-15T18:46:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-002</id>
    <content type="html"><![CDATA[<blockquote><p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>

<p>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, &#8230;</p>

<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=2">http://projecteuler.net/problem=2</a></p>

<!-- more -->


<p>This is not hard problem with objective to make you familliar with <a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci numbers</a>
(this numbers will appear in a lot of next problems). It can be implemented with the straightforward manner with the following rules applied:</p>

<ul>
<li><code>F(0) = 1</code></li>
<li><code>F(1) = 1</code></li>
<li><code>F(n) = F(n-1) + F(n-2)</code></li>
</ul>


<p>So, we can define simple recursive function to calculate n-th number of Fibonacci sequence in clojure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">))</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s probably not the best implementation of Fibonacci numbers, but it shows the idea.
We can check that it works correctly by calling <code>(map fib (range 10))</code> that produces sequence <code>(1 1 2 3 5 8 13 21 34 55)</code>.
Problem appears when we try to calculate <code>40th</code> number. Calling that function on my machine takes ~20 seconds. Not good.</p>

<p>The reason of such bad performance is repeated calculations. Let&#8217;s see how expanded call <code>(fib 40)</code>.
It produces <code>(+ (fib 39) (fib 38))</code>, where <code>(fib 39)</code> expanded to <code>(+ (fib 38) (fib 37))</code> and <code>(fib 38)</code> to <code>(+ (fib 37) (fib 36))</code> etc.
The growth with factor of 2. And with these two expansions we calculated 2 values that we calculated before, <code>37th</code> and <code>38th</code>.</p>

<p>We can make better if we producing our sequence in direct order, instead of reverse. This way function will be more complex than previous:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fib-seq</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">seq</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="nv">n</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">= </span><span class="nv">c</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">seq</span>
</span><span class='line'>          <span class="ss">:else</span> <span class="p">(</span><span class="nf">recur</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nb">conj seq </span><span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)))))</span>
</span><span class='line'>   <span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s see what&#8217;s new clojure features we used:</p>

<ol>
<li>We define function inside function. Why we did this? All is because we used &#8220;helper&#8221;-function for accumulate current Fibonacci sequence.
It used only in function <code>fib-seq</code>, so we don&#8217;t need to define it at the root level. It closed for using for everyone, except <code>fib-seq</code>.</li>
<li>Next thing we define anonymous function by keyword <code>fn</code>. Basically it&#8217;s the right thing to define functions. <code>defn</code> just shortcut for <code>(def (fn [] ))</code>, and..</li>
<li>..we pass default (initialization) values for helper function <code>1 1 2 [1 1]</code>.</li>
<li>I skip logic of helper function here. It is pretty straightforward, just notice two new clojure functions that we used.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/cond">cond</a> - similar to switch-case structure in C-style languages.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/conj">conj</a> - add value to collection. Dependant on collection type,
insert new value in different places. For our case we using vector, so we add this value to the end of vector.</li>
</ol>


<p>Now we can call <code>(fib-seq 40)</code> and it calculates all 40 values very quickly. Nice.</p>

<p>But let&#8217;s return to problem description <em>&#8220;&#8230; whose values do not exceed 4 million&#8230;&#8221;</em>.
How do we know how many values we need to take that do not exceed 4 million? 50? 100? 112?
This is drawback of our <code>fib-seq</code> function and we need to rewrite it&#8230;or take a look at clojure mechanism called lazy sequences.</p>

<h3>Lazy sequences</h3>

<p>In few words, lazy sequence is infinite sequence of some values, that calculates due to some expression.
The main idea here is the word <em>lazy</em> that means we evaluate expressions when they are needed.
For example, sequence of natural numbers is a lazy sequence. Clojure supports lazy sequences along with operations on them.
So, we can combine sequences, limit, filter etc. Java do not support lazy sequences but similar functionality can be implemented with generators concept.
Generator interface provides method <code>next()</code> to retrieve next value in the sequence, and that method evaluates value.
But this approach is very poor with comparison to clojure lazy sequences.</p>

<p>Lazy sequences in clojure can be treated like ordinary sequences. Obviously some methods make no sense, due to infinity of sequence (<code>count</code>, <code>last</code>, etc.)
There are way to define lazy sequences by using macro <code>lazy-seq</code>. But most common way to do it with the function iterate.
It takes function <code>f</code>, and initial value <code>a</code>, and produces lazy sequence <code>(a, f(a), f(f(a)),...)</code>.
For example lazy sequence of natural numbers we can define as following: <code>(iterate inc 1)</code>. Then we can play with this sequence as we want.</p>

<p><strong>WARNING:</strong> <em>Never call lazy sequence without limiting functions. It tries to evaluate all, and&#8230; You know, never call.</em></p>

<p>Now, we have a little understanding what lazy sequence is, and can implement Fibonacci lazy sequence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fib-seq-lazy</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map first </span><span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]]</span> <span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)])</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">])))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, What&#8217;s here:</p>

<ol>
<li>Read from the end. We apply anonymous function to vector <code>[1 1]</code> and produce lazy sequence with <code>iterate</code>.</li>
<li>Note double square brackets in anonymous function definition. Outer brackets indicate function variables.
Inner brackets indicate that we take one parameter to function as argument.
This parameter is a sequence and we map to <code>a</code> and <code>b</code>, first and second elements in that sequence.
For example for first call, <code>a</code> bound to <code>1</code>, <code>b</code> bound to <code>1</code>.</li>
<li>Our iterate produces lazy sequence with following format <code>([1 1] [1 2] [2 3] [3 5] [5 8] ...)</code>.
Our Fibonacci sequence is just first value of each pair, and we using&#8230;</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/map">map</a> - takes function and applies it to each element of collection.
This function also produces lazy sequence.</li>
<li>To gather all in one we get lazy sequence that represent Fibonacci numbers <code>(1 1 2 3 5 8 ...)</code>.</li>
</ol>


<p>Now we have to implement functionality that in problem description. Immediately, code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">filter </span><span class="nv">even?</span> <span class="p">(</span><span class="nb">take-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">%</span> <span class="mi">4000000</span><span class="p">)</span> <span class="p">(</span><span class="nf">fib-seq-lazy</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another one(<em>two</em>)-liner. Good.</p>

<ol>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/take-while">take-while</a> - takes values from sequence (includes lazy sequences) while condition is true.</li>
<li><code>#(&lt; % 4000000)</code> - <code>#()</code> it&#8217;s <a href="http://en.wikipedia.org/wiki/Tautology_%28rhetoric%29">shorter shortcut</a> for anonymous function.
In our case predicate return true if value lower than 4 millions. Exacly what we need.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/filter">filter</a> - return all values for which predicate return true.
Instead of take-while it proceed all sequence till the end, and, obviously, do not accept lazy sequences.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/even_q">even?</a> - predicate that return true, if number is even.
Note: this is common way to append function name with question mark to indicate that this function is predicate (return true or false). Just convention.</li>
<li>And, finally, sum all of them.</li>
</ol>


<p><strong>Congratulations!</strong> We just solved Project Euler Problem 2.</p>

<p>There are also few optimisations to get result faster, but <a href="http://en.wikipedia.org/wiki/KISS_principle">KISS</a>.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem002.clj">GitHub</a> for lazy!</p>

<p><strong>P.S.</strong> We could use <code>clojure-contrib</code> library, which is often deployed with standard <code>clojure-core</code>.
<code>clojure-contrib.lazy-seqs</code> library contains method <code>(fibs)</code> that also produces lazy Fibonacci sequence.
And interestingly it implemented the same way as we did.
There are two more lazy sequences: prime numbers and powers of 2.
It&#8217;s good practice to use existing functionality and not invent vehicle.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure + Emacs + Leiningen + nREPL]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-plus-emacs-plus-leiningen-plus-nrepl/"/>
    <updated>2012-10-13T18:19:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-plus-emacs-plus-leiningen-plus-nrepl</id>
    <content type="html"><![CDATA[<p>This article provides step-by-step instruction how to configure Clojure environment.</p>

<!-- more -->


<h3>Little history</h3>

<p>Long time I was using <a href="https://github.com/technomancy/swank-clojure">swank-clojure</a> as connector to my Clojure projects from Emacs <a href="http://common-lisp.net/project/slime/">SLIME</a>.
But, suddenly, I lost all my emacs preferences and needed to configure it again (<em>yeah, it&#8217;s my fault, this time I&#8217;ve created configuration on GitHub</em>).
So, when I entered to swank-clojure project page, I was a bit frustrated by the following message:
<em>&#8220;This project is no longer under active development. New users are strongly encouraged to try out</em> <a href="https://github.com/kingtim/nrepl.el">nrepl.el</a> <em>instead&#8221;</em>.
Ok, let&#8217;s see what nrepl is.</p>

<h3>Why emacs?</h3>

<p>I don&#8217;t know. I like lisp, and emacs created in (e)lisp.
Strange hotkeys like <code>C-x C-s</code>. Huge functionality, that you can configure all days. Internal package manager. Plenty of modes.
Mail client. Games. Whatever. Oh wait, I forgot text editor. I really, can&#8217;t find any great reason that convince somebody to use emacs as IDE. But I like it.</p>

<p>There is a good <a href="http://xkcd.com/378/">xkcd</a> comics about emacs.</p>

<p>By the way, there are lot of IDEs that can be configured much simpler way than described in this article:</p>

<ul>
<li><a href="http://clojure.bighugh.com/">Clojure Box</a> - emacs install, preconfigured for clojure. Only for Windows</li>
<li><a href="http://code.google.com/p/counterclockwise/">Counter Clockwise</a> - eclipse plugin</li>
<li><a href="http://www.enclojure.org/">Enclojure</a> - netbeans plugin</li>
<li><a href="http://plugins.intellij.net/plugin/?id=4050">La Clojure</a> - IDEA plugin</li>
<li><a href="http://www.vim.org/scripts/script.php?script_id=2501">VimClojure</a> - vim plugin</li>
<li><a href="http://www.chris-granger.com/2012/04/12/light-table---a-new-ide-concept/">Light Table</a> - new generation of IDEs?</li>
</ul>


<p>So, before reading, ask yourself, Do I really need emacs?</p>

<h3>Emacs</h3>

<p>First of all you need to install emacs, to get your future clojure coding environment. I&#8217;m using ubuntu, so I just type:</p>

<p><code>sudo apt-get install emacs</code></p>

<p>and it install emacs 23. If you using another OS, or do not trust package manager,
check <a href="http://www.gnu.org/software/emacs/">GNU Emacs official website</a> for installation instructions.</p>

<p>Also, you need to install emacs package-manager.</p>

<ol>
<li>Copy file <a href="http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el">package.el</a>
to your <code>~/emacs.d/</code> folder.</li>
<li>In your <code>~/.emacs</code> file add folowing lines:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(add-to-list 'load-path "~/.emacs.d/")
</span><span class='line'>(load "package")
</span><span class='line'>(require 'package)
</span><span class='line'>(add-to-list 'package-archives
</span><span class='line'>    '("marmalade" .
</span><span class='line'>      "http://marmalade-repo.org/packages/"))
</span><span class='line'>(package-initialize)</span></code></pre></td></tr></table></div></figure>


<p>These lines will be loaded after emacs restarted and install package manager.
To check if it works, type <code>M-x package-list-packages</code> and this show you list of emacs plugins, hope you will find something useful there.</p>

<h3>Leiningen</h3>

<p><a href="http://leiningen.org/">Leiningen</a> is a build tool for clojure. It also controls dependency management, automation, tests, etc.
Pretty like <a href="http://maven.apache.org/">maven</a> for Java.</p>

<p>To install lein 2 (it&#8217;s shorter name for Leiningen) do the following:</p>

<ol>
<li>Download <a href="https://raw.github.com/technomancy/leiningen/preview/bin/lein">lein script</a></li>
<li>Place it on your <code>$PATH</code></li>
<li>Make it executable</li>
</ol>


<p>On ubuntu this can be performed with the following commands:</p>

<pre><code>cd ~/
mkdir bin
</code></pre>

<p>Add line export <code>PATH=~/bin:$PATH</code> to your <code>~/.bashrc</code> file</p>

<pre><code>cd ~/bin
wget https://raw.github.com/technomancy/leiningen/preview/bin/lein
chmod +x lein
</code></pre>

<p>Execute lein, for first time it will download default lein package. To verify installation run <code>lein version</code>.
On my machine for the post date it prints: <code>Leiningen 2.0.0-preview10 on Java 1.6.0_24 OpenJDK 64-Bit Server VM</code></p>

<h3>nREPL</h3>

<p>We have already installed emacs package manager, so we can get nrepl from there.
It also needs emacs major mode <code>clojure-mode</code>, so type the following commands in emacs to install needed packages:</p>

<pre><code>M-x package-install clojure-mode
M-x package-install nrepl
</code></pre>

<p>Try <code>M-x nrepl-jack-in</code> to execute REPL, where you can play with clojure commands.</p>

<h3>Bind all together</h3>

<p>We have fully configured environment for clojure and how to use it?</p>

<p>Create new clojure project using lein:</p>

<p><code>lein new helloworld</code></p>

<p>Start nREPL server in emacs:</p>

<p><code>M-x nrepl-jack-in</code></p>

<p>Open core project file in emacs:</p>

<p><code>C-f helloworld/src/helloworld/core.clj</code></p>

<p>Write simple function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">helloworld.core</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">hello</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Hell, O&#39;World!&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compile it:</p>

<p><code>C-c C-k</code></p>

<p>Switch to nREPL buffer, change namespace and run hello function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">helloworld.core</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">hello</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Probably, you&#8217;ll get output:</p>

<pre><code>Hell, O'World!
nil
</code></pre>

<p><strong>Congratulations!</strong> You just created working clojure project.</p>

<p><strong>Note:</strong> this configuration covers only basic clojure+emacs environment.
There are plenty plugins to work with parenthesis, documentation, tests, auto-completion and lot more.
I&#8217;ll do my best to cover such plugins in the next sections. Also, emacs23 is an old version of emacs, verison 24
is currently available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 001]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-001/"/>
    <updated>2012-10-12T17:38:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-001</id>
    <content type="html"><![CDATA[<blockquote><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>

<p>Find the sum of all the multiples of 3 or 5 below 1000.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=1">http://projecteuler.net/problem=1</a></p>

<!-- more -->


<p>The simplest problem and nothing hard to solve it in standard iterative way (C-style pseudocode):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="n">s</span><span class="o">+=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get result immediately. But loop that changes value of some variable it&#8217;s not a functional approach.
Let&#8217;s rewrite this solution in <a href="http://en.wikipedia.org/wiki/Recursion">recursive</a> way in clojure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">i</span> <span class="mi">0</span> <span class="nv">s</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">i</span> <span class="mi">1000</span><span class="p">)</span> <span class="nv">s</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">i</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">i</span> <span class="mi">5</span><span class="p">)))</span> <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">s</span> <span class="nv">i</span><span class="p">))</span>
</span><span class='line'>                             <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">i</span><span class="p">)</span> <span class="nv">s</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just few words what we are doing here:</p>

<ol>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/loop">loop</a> - create binding between names and values in scope of loop body.
For now, think about loop like a function definition with two variables <code>i</code> and <code>s</code> along with calling such function with arguments <code>i=0, s=0</code>.
<code>i</code> is a loop counter, <code>s</code> is an accumulator variable that holds current sum.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/mod">mod</a> - calculates remainder of division two numbers.
<a href="http://clojuredocs.org/clojure_core/clojure.core/inc">inc</a> - increment value, similar to <code>(+ i 1)</code>.</li>
<li><em>Recursion base case:</em> if we have <code>i</code> value equals to <code>1000</code>, then we finished our work and return current accumulator value <code>s</code>. Otherwise,</li>
<li><em>Recursion step:</em> if current <code>i</code> value is multiply of <code>3</code> or multiply of <code>5</code>, we add counter value to accumulator,
increment loop counter and call this function with these new arguments. Otherwise, we just increment value and call function.
This way we recursively go back to the first line of function with changed values until we get recursion base condition as true and return accumulator.
Recursion call performed by <a href="http://clojure.org/special_forms#recur">recur</a>.</li>
</ol>


<p>This can be a bit harder to understand than iterative style, but we have a couple of pros there.</p>

<ol>
<li>There are no variables. There are values and names bound to that values.
That means that we can&#8217;t change one value to another inside loop. That&#8217;s why we recursively call this function with changed values.
Such trick helps to avoid hard-to-spot error-prone situations where iteration counter changed inside the loop.</li>
<li>This is more flexible way than iteration. We can pass as much arguments as we want, move forward-backward,
select dynamic iterative step and even select any stop condition.</li>
<li>Safety. We are completely safe that our loop is pure local. It can not change anything outside.
All garbage he left was cleared after returning value (<em>Ecologists are very happy!</em>)</li>
</ol>


<p><strong>Congratulations!</strong> Problem solved, but let&#8217;s find more elegant way.</p>

<p>We can split our problem into two simpler problems:</p>

<ol>
<li>Find sum of all multiples of <code>3</code> below <code>1000</code></li>
<li>Find sum of all multiples of <code>5</code> below <code>1000</code></li>
<li>Add these two sums</li>
</ol>


<p>Stop, stop! What about numbers that multiples of <code>3</code> and multiples of <code>5</code>, like <code>15, 30, 45,...</code>? We add them twice.
Good catch. Let&#8217;s just subtract them once from total sum:</p>

<ol>
<li>Find sum of all multiples of <code>3</code> below <code>1000</code></li>
<li>Find sum of all multiples of <code>5</code> below <code>1000</code></li>
<li>Find sum of all multiples of <code>15</code> below <code>1000</code></li>
<li>Add sum 1 to sum 2 and subtract sum 3.</li>
</ol>


<p>You see the repeated <em>&#8220;Find sum of all&#8230;&#8221;</em>. It&#8217;s clear definition of function. Let&#8217;s implement it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sum-of</span> <span class="p">[</span><span class="nv">d</span><span class="p">]</span> <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="mi">1000</span> <span class="nv">d</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>One line! Excited?
Brief description, what we wrote:</p>

<ol>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/defn">defn</a> indicates function definition.
We called function <code>sum-of</code>, it accepts one argument <code>d</code> (multiple of what?).
As you, probably notice, we do not enforced to specify type of function argument, as well as function returning type.
All it&#8217;s because clojure is <a href="http://en.wikipedia.org/wiki/Dynamic_programming_language">dynamic</a> language.
Dynamic languages have pros and cons over static, but we omit their differences. For now.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/reduce">reduce</a> takes two parameters: function of two arguments and collection,
and applies that function to first two values, than to result and next value, again, again, until the end of collection.
So, for example <code>(reduce * [2 3 4 5])</code> calculates <code>(* 2 3)</code> that is <code>6</code>, calls <code>(reduce * [6 4 5])</code>, then calls <code>(reduce * [24 5])</code> and finally returns <code>120</code>.</li>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/range">range</a> function generates list. As you see it takes three parameters,
but there are overloaded versions that takes 2, 1 or even 0 values. <code>(range 0 1000 d)</code> start generation from <code>0</code>,
next value will be <code>previous plus d</code>, until we exceed <code>1000</code>. Exclusively. So, <code>(range 0 10 3)</code> returns <code>(0 3 6 9)</code>.</li>
</ol>


<p>Ok. We have function <em>&#8220;Find sum of all&#8230;&#8221;</em> and almost all work is done. Just call this function with proper arguments and you&#8217;ll get the result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">sum-of</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">sum-of</span> <span class="mi">5</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">sum-of</span> <span class="mi">15</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done. In functional, clear, concise way in two lines of code.</p>

<p><strong>Note:</strong> our <a href="http://en.wikipedia.org/wiki/Big_O_notation">algorithm complexity</a> is <code>O(n)</code>.
If we remember school course of math, we realize that all our sequences are <a href="http://en.wikipedia.org/wiki/Arithmetic_progression">arithmetic progressions</a>.
That means for caluclating sum of sequence we don&#8217;t need count sum in usual way, we just can use formula:</p>

<p><img src="http://upload.wikimedia.org/math/a/f/e/afe20f89d7bfdbd0a191168d80eb8077.png"></p>

<p><code>n</code> is a count of numbers in a sequence, <code>a1</code> - first value, <code>an</code> - last value.
Now we can reimplement our <code>sum-of</code> function next way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sum-of</span> <span class="p">[</span><span class="nv">d</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a1</span> <span class="nv">d</span>
</span><span class='line'>        <span class="nv">an</span> <span class="p">(</span><span class="nb">- </span><span class="mi">999</span> <span class="p">(</span><span class="nf">mod</span> <span class="mi">999</span> <span class="nv">d</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">n</span> <span class="p">(</span><span class="nb">quot </span><span class="mi">999</span> <span class="nv">d</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="nv">cnt</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a1</span> <span class="nv">an</span><span class="p">))</span> <span class="mi">2</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>More harder to understand, but doable. New language syntax appears (999 used as we have <em>&#8220;below 1000&#8221;</em> in problem description):</p>

<ol>
<li><a href="http://clojuredocs.org/clojure_core/clojure.core/let">let</a> - creates a lexical context for expression.
In fact, it&#8217;s just separate block of code, with names, that exist only in scope of that block.
After let we evaluates some expression and gives some values to the result.</li>
<li><code>a1</code> - first element of sequence, just step value <code>d</code>.</li>
<li><code>an</code> - last element of sequence. We don&#8217;t know last element, so we need to calculate it.
Little trick: find the remainder of division 999 by d, and subtract it from 999.</li>
<li><code>n</code> - count of numbers in a sequence. We also don&#8217;t know this value. It just will be integer number of division 999 by d.
Exactly what <a href="http://clojuredocs.org/clojure_core/clojure.core/quot">quot</a> function does.</li>
<li>And finally, the expression - formula for sum of arithmetic progression.</li>
</ol>


<p>Actually, we reduced readability of our code, but improved algorithmic complexity from <code>O(n)</code> to <code>O(1)</code>.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem001.clj">GitHub</a> for lazy.</p>

<p><a href="http://tryclj.com/">Try clojure online!</a></p>

<p><strong>P.S.</strong> Programming not tied to some problem is nothing. That&#8217;s why, in first problem I prefer <code>O(n)</code> solution.
It still solves problem in appropriate time and have more readable code. If <code>n</code> grow, I&#8217;ll think about switching to <code>O(1)</code> strategy, but not for now.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp live-coding]]></title>
    <link href="http://mishadoff.github.com/blog/lisp-live-coding/"/>
    <updated>2012-10-11T17:14:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/lisp-live-coding</id>
    <content type="html"><![CDATA[<p>Very inspirational video about live coding with excellent electronic music, written in&#8230; lisp!</p>

<!-- more -->




<div class="embed-video-container"><iframe src="http://player.vimeo.com/video/2503257 "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler/"/>
    <updated>2012-10-11T16:51:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler</id>
    <content type="html"><![CDATA[<p>Finally decided to post here my solutions to <a href="http://projecteuler.net/">Project Euler</a> implemented in <a href="http://clojure.org/">Clojure</a>.</p>

<!-- more -->


<p>As all in my life, frequency of posts with solutions will be mood-dependent.</p>

<p>The main reason for this series to provide a little introduction to clojure programming language during the solving interesting problems.</p>

<p>I&#8217;ll also try do my best to explain some general terms, why this approach better or worse than others,
suggest alternative solutions or thoughts on problem and provide code.
You allowed to copy that code, calculate the result and past answer directly in Project Euler site, but I don&#8217;t see any sense to do this.
Problem solving process gives more fun, than result. Approximately <a href="http://en.wikipedia.org/wiki/E_%28mathematical_constant%29">2.718282</a> times more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Magic. Part 1: java.net.URL]]></title>
    <link href="http://mishadoff.github.com/blog/java-magic-part-1-java-dot-net-dot-url/"/>
    <updated>2012-10-11T16:30:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/java-magic-part-1-java-dot-net-dot-url</id>
    <content type="html"><![CDATA[<p>Recently, I found on reddit very interesting Java code snippet (slightly modified):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HashSet</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">();</span>
</span><span class='line'><span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://google.com&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://google.com&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">60000</span><span class="o">);</span>
</span><span class='line'><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://google.com&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>What do you think the output for lines 3 and 5 will be?</p>

<!-- more -->


<p>Definitely not <code>true, true</code> if the question was asked. Think for two minutes.</p>

<p>Ok. In most cases it will be <code>true, false</code> because you have internet connection (<em>How else you can read this?</em>).
Turn off your network cable or wi-fi, and you&#8217;ll get <code>true, true</code>.</p>

<p>The reason is in implementation of <code>hashCode()</code> and <code>equals()</code> methods for <code>URL</code> class.</p>

<p>Let&#8217;s see how hashCode calculated:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">hashCode</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hashCode</span><span class="o">;</span>
</span><span class='line'>  <span class="n">hashCode</span> <span class="o">=</span> <span class="n">handler</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">hashCode</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see hashCode is an instance variable that calculates once. Makes sense, <code>URL</code> is <a href="http://en.wikipedia.org/wiki/Immutable_object">immutable</a>.
What is handler? It&#8217;s an instance of one of <code>URLStreamHandler</code> subclasses, depends on protocol type (file, http, ftp), that have helper hashCode implementation.
Just look at <code>URL.hashCode()</code> javadoc:</p>

<blockquote><p>The hash code is based upon all the URL components relevant for URL comparison. As such, this operation is a blocking operation.</p></blockquote>

<p>Stop! <strong>BLOCKING OPERATION?!</strong></p>

<p><em>- Sorry, I couldn&#8217;t check email yesterday due to hashCode calculation.</em></p>

<p>or even better</p>

<p><em>- No, mom, I can&#8217;t watch porn, It&#8217;s hashCode, you know.</em></p>

<p>Ok, let it be blocking. Another exciting part, that handler <strong>resolves host IP address</strong> for hashCode calculation.
Tries to resolve, to be honest. If it can not do this, it calculates hashCode based on host, which is <em>google.com</em> for our example.
Shit happens when IP is dynamic, or host have request balancer that also changes host IP.
In that case we got different hashCodes for one host name, and will have two (or even more) instances in HashSet. Not good at all.
By the way, hashCode and equals performance is terrible because of <code>URLStreamHandler</code> opens <code>URLConnection</code>. But it&#8217;s another topic.</p>

<h3>How to avoid this?</h3>

<ul>
<li>Use <code>java.net.URI</code> instead of <code>java.net.URL</code>. It&#8217;s not the best choice though, but have deterministic hashCode implementation.</li>
<li>Do not use <code>java.net.URL</code> in collections. Good option to maintain collection of String objects (that represent host name) and get URL when needed.</li>
<li>Disable your network adapter during hashCode calculation. (<em>It&#8217;s a joke, but it helps</em>)</li>
<li>Use your own subclass of URLStreamHandler with proper implementation of hashCode.</li>
</ul>


<p>Finally, I&#8217;m pretty sure <code>java.net.URL</code> class has lot of useful applications. But not that way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, world!]]></title>
    <link href="http://mishadoff.github.com/blog/hello/"/>
    <updated>2012-10-10T16:10:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/hello</id>
    <content type="html"><![CDATA[<p>This is my first post.
It is always hard to begin something, but I&#8217;ll try.</p>

<!-- more -->


<h3>Why?</h3>

<p>I had blog earlier on <a href="http://mishadoff.livejournal.com">LiveJournal</a>, it was basically in Ukrainian, my native language.
But more time I was working on something, less time I had to write something.
Honestly, it even was not programming specific blog, just random thoughts, xposts, pictures, etc.
You know this shit. Also, it was very hard to maintain some posts, especially about programming, and I gave up.
Excellent proof is my failed attempt to share and explain Clojure solutions on <a href="http://projecteuler.net">Project Euler</a>.
Everything can be a reason: lack of readers, lack of feedback, not interesting topic, very specific topic,
bad writing style, terrible livejournal layout and so on. Probably, these are all my excuses or maybe I just lazy.</p>

<p>Now I&#8217;ve got something in my mind and have passion to share it.
No matter if somebody like it or not.
I really believe that if you share something for this world,
sooner or later somebody point you on your mistakes. And it&#8217;s a win.
You got knowledge that didn&#8217;t know earlier and can share it to someone else. Simple loop.</p>

<h3>What?</h3>

<p>I plan to be specific in this blog, so a big part will be about programming, especially Java and Clojure.
I also love puzzles and stupid self-made pictures (O_o) and they have reserved place in my blog.
Time to time can appear posts with reference to some clever people, if they have clever thoughts, of course.
Event reports, some critic, books, movies, music, games, humour.
Only God knows what else can appear in my mind and therefore in this blog, but I&#8217;ll try to be specific as much as possible.
Really.</p>

<h3>English?</h3>

<p>As you already understand I&#8217;m not native English speaker or writer or whatever. How many mistakes did you count?</p>

<p>I need some effort even for writing simple sentence in English (<em>Kiev is the capital of Ukraine - not this one</em>).
And no matter how long I check my grammar or spelling I will have some mistakes. Big deal.
Improve English is one of my goals, so it&#8217;s ok. <em>adding english in todo list</em></p>

<p>I also don&#8217;t exclude option, that some posts will be in Ukrainian or even in Russian.</p>

<h3>What else?</h3>

<p>I spent half an hour writing this first post and believe that in near future I have more structured thoughts than this bag of words above.
Good luck and welcome to my blog!</p>
]]></content>
  </entry>
  
</feed>
