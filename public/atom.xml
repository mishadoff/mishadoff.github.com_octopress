<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2013-06-07T17:20:05+03:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fast Factorial]]></title>
    <link href="http://mishadoff.github.com/blog/fast-factorial/"/>
    <updated>2013-06-07T01:08:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/fast-factorial</id>
    <content type="html"><![CDATA[<p>Factorial function is simple enough. But there is still some fun about it.
In <a href="http://mishadoff.github.com/blog/stirlings-approximation/">Stirling’s Approximation</a> article
we’ve seen how to calculate good factorial approximation faster than <em>exact</em> value.
By the way, there is an algorithm to calculate <em>exact</em> value of factorial faster
than “by definition”.</p>

<!-- more -->

<h3 id="factorials">Factorials</h3>

<p>Most of programming languages tutorials shows the following
approach to calculate factorial (<em>transformed to clojure</em>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">factorial</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">      <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="p">(</span><span class="nf">factorial</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Simple recursive solution.</p>

<p><em>Note:</em> Since clojure allows using <code>!</code> character in function name, it is good name for factorial.</p>

<p><code>(! 10)</code> works, <code>(! 20)</code> works, <code>(! 30)</code>…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nb">&gt; </span><span class="nv">ArithmeticException</span> <span class="nv">integer</span> <span class="nv">overflow</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oops.</p>

<p>Default clojure integer type is 64 bit (<code>Long</code>).
It does not fit well for <em>such large input</em>, so we rewrite function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">      <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">n</span> <span class="p">(</span><span class="nf">!</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just one character added, <code>*</code> became <code>*'</code>. It is automatic type promotion.
If type can not hold the value without losing precision, it automatically extends.
In this case, <code>Long</code> becames <code>BigInteger</code> and all works fine.</p>

<p><code>(! 30)</code> works, <code>(! 300)</code> works, <code>(! 3000)</code> works,
<code>(! 30000)</code>…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nb">&gt; </span><span class="nv">StackOverflowError</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Yet another overflow.</p>

<p>Well, stack size is limited. We don’t need to consume stackframes and
will use <code>loop/recur</code> approach.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">cur</span> <span class="nv">n</span> <span class="nv">acc</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">cur</span><span class="p">)</span> <span class="nv">acc</span>
</span><span class="line">        <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">cur</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">cur</span> <span class="nv">acc</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It is also recursive approach, but instead of saving so far calculated value
in stack, we pass it to the function as a parameter.
Clojure optimize tail recursion to iterative version and does not consume stack.
It succesfully calculates factorial for 30000,
and for any other value. Great!</p>

<p>If we look at the factorial as a calculation process, not definition, it means
“product of all numbers between 1 and n”. It is very concise for functional programming:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce </span><span class="nv">*</span><span class="o">&#39;</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">n</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Does not consume stack, no number overflow, but works
~2 times slower than <code>loop/recur</code> version.</p>

<p>I don’t know the reason, but it seems time wasted
by <code>reduce</code> for creating intermediate results. So we choose
previous <code>loop/recur</code> function as baseline factorial.</p>

<h3 id="fast-factorial">Fast Factorial</h3>

<p>Here is another way to calculate factorial.</p>

<p>Let’s consider example <code>12!</code>.</p>

<p>Factorial is a product of numbers <code>12! = 1 * 2 * 3 * ... * 11 * 12</code>.
Perform prime factorization of each number.
For example, prime factorization of <code>12</code> is <code>2 * 2 * 3</code>.</p>

<p>After that we get a factorization of the <code>12!</code>, which contains only prime numbers.
To find factorial value we can just multiply them all. But we do clever trick instead.</p>

<p>Group every prime number and its power.
E.g. if we have factorization <code>2 * 2 * 2 * 3 * 5</code> it becomes vector of pairs <code>[[2 3] [3 1] [5 1]]</code>.</p>

<p>To calculate power we have simple <code>power</code> implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">power</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce </span><span class="nv">*</span><span class="o">&#39;</span> <span class="p">(</span><span class="nb">repeat </span><span class="nv">n</span> <span class="nv">x</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Trick is using exponentiation by squaring, which reduce
exponentiation complexity from <code>O(n)</code> to <code>O(log n)</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">power</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">        <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">x</span>
</span><span class="line">        <span class="p">(</span><span class="nf">even?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">power*</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">x</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="mi">2</span><span class="p">))</span>
</span><span class="line">        <span class="p">(</span><span class="nf">odd?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">power*</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">x</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It is not tail-recursive solution and theoretically may cause
stackoverflow, but its not critical. It works well for large numbers.</p>

<p>Actually, we do not perform factorization. We just know that factorization of <code>n!</code> contains all prime numbers below or equal <code>n</code> and every number have some multiplicity. </p>

<p>The function calculates how many times prime number <code>k</code> occurs in factorial factorization for <code>n</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">find-power</span> <span class="p">[</span><span class="nv">n</span> <span class="nv">k</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">total</span> <span class="nv">n</span> <span class="nv">sum</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">/ </span><span class="nv">total</span> <span class="nv">k</span><span class="p">))]</span>
</span><span class="line">      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">i</span><span class="p">)</span> <span class="nv">sum</span>
</span><span class="line">          <span class="p">(</span><span class="nf">recur</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">sum</span> <span class="nv">i</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Binding all together:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">loop </span><span class="p">[[</span><span class="nv">h</span> <span class="o">&amp;</span> <span class="nv">t</span><span class="p">]</span>
</span><span class="line">         <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">power</span> <span class="nv">%</span> <span class="p">(</span><span class="nf">find-power</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nb">take-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">%</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">primes</span><span class="p">)))</span>
</span><span class="line">         <span class="nv">acc</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="k">if </span><span class="nv">h</span> <span class="p">(</span><span class="nf">recur</span> <span class="nv">t</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">h</span> <span class="nv">acc</span><span class="p">))</span> <span class="nv">acc</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://github.com/mishadoff/numberto/blob/master/src/numberto/factorial.clj">Code available here</a></p>

<p><em>Note:</em> <code>primes</code> is a function generates lazy-sequence of prime numbers. It can be taken from <code>clojure.contrib.lazy-seqs</code>.</p>

<h3 id="testing">Testing</h3>

<blockquote>
  <p>Anyway, why do you think it is faster?
You performing more calculations than just multiplying numbers.</p>
</blockquote>

<p>Let’s see.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 10 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">10</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">10</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 100 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">100</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">100</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 1000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 10000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 100000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">100000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">100000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 1000000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">1000000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">1000000</span><span class="p">))</span> <span class="nv">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nb">== </span><span class="mi">10</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.051054 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.137587 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">100</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.081365 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.376653 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">1000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 1.59252 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 3.212842 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">10000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 161.856965 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 76.452529 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">100000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 19403.375319 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 6372.35266 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">1000000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 2863893.471718 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 1079632.255919 msecs&quot;</span>
</span><span class="line"><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For small factorials <code>(&lt; 1000)</code> improved version works ~2 times slower.
Around the thousand it has the same performance as standard version.
And, finally, some win (up to 3 times) for larger numbers.</p>

<p>Theoretically, you can implement generalized factorial with these two algorithms
and switch between them, depending on input. But who really need it? </p>

<blockquote>
  <p>Question: What the complexity of this algorithm?</p>
</blockquote>

<p><strong>P.S.</strong> Enterprise lovers would say factorial complexity is <code>O(1)</code>.
Just precompute all values and save them to database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 018]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-018/"/>
    <updated>2013-05-17T00:26:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-018</id>
    <content type="html"><![CDATA[<blockquote>
  <p>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   3
</span><span class="line">  7 4
</span><span class="line"> 2 4 6
</span><span class="line">8 5 9 3</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>That is, 3 + 7 + 4 + 9 = 23.</p>

  <p>Find the maximum total from top to bottom of the triangle below:</p>

  <p>[Check out big triangle in original link]</p>

  <p>NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route.
However, Problem 67, is the same challenge with a triangle containing one-hundred rows;
it cannot be solved by brute force, and requires a clever method! ;o)</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=18">http://projecteuler.net/problem=18</a></p>

<!-- more -->

<p>As note says we can try every route and it will be just good.
Instead of that, we can behave much better with clever method.</p>

<p>(Some time ago, I gave basic explanation on my approach in <a href="http://stackoverflow.com/questions/8002252/euler-project-18-approach">StackOverflow question</a>)</p>

<p>We have example triangle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   3
</span><span class="line">  7 4
</span><span class="line"> 2 4 6
</span><span class="line">8 5 9 3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Instead of testing each route from top to the bottom, we moving from bottom
to the top and always select the best choice. As we want to find the max sum, we perform addition im place.</p>

<p>Assuming we on the 3rd line (2 4 6).</p>

<p><strong>From 2</strong> we can go either 8 or 5, 8 is better (maximize your sum), then you calculate first
sum <code>8 + 2 = 10</code>.</p>

<p><strong>From 4</strong> we can go either 5 or 9, 9 is better, <code>4 + 9 = 13</code>.</p>

<p><strong>From 6</strong> we can go either 9 or 3, 9 is better, <code>9 + 6 = 15</code>.</p>

<p>Now, we removing last row, because we processed all routes and selected best ones, and replacing
3rd row with calculated sums. Current triangle looks like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">    3
</span><span class="line">  7  4
</span><span class="line">10 13 15</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Repeat the same action until we get one number, which will be solution.</p>

<p>Let’s transform this idea to clojure.</p>

<p>First of all we need datastructure to represent triangle.
List of lists would be good:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">triangle</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">7</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="mi">2</span> <span class="mi">4</span> <span class="mi">6</span><span class="p">)</span> <span class="p">(</span><span class="mi">8</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">3</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we want to know, what direction generates the best sum.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">max-row</span> <span class="p">[</span><span class="nv">lst</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">reduce max </span><span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nf">partition</span> <span class="mi">2</span> <span class="mi">1</span> <span class="nv">lst</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It breaks list to pairs, and select max from each pair.
For example, <code>[8 5 9 3]</code> we split to <code>[[8 5] [5 9] [9 3]]</code>
and select max from each sublist <code>[8 9 9]</code>.</p>

<p>Just add this list to previous one</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">step-max</span> <span class="p">[</span><span class="nv">lst1</span> <span class="nv">lst2</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">map + </span><span class="p">(</span><span class="nf">max-row</span> <span class="nv">lst1</span><span class="p">)</span> <span class="nv">lst2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One iteration of <code>step-max</code> creates smaller triangle with sums on the bottom row.
But we need only one number.</p>

<p>Correct, <code>reduce</code> is ideal!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce </span><span class="nv">step-max</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">triangle</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem018.clj">code</a></p>

<p><strong>P.S.</strong> Problem 067 can be solved with the same code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 2]]></title>
    <link href="http://mishadoff.github.com/blog/programming-digest-2/"/>
    <updated>2013-04-22T14:43:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/programming-digest-2</id>
    <content type="html"><![CDATA[<p>Why math is needed for developers, what is REST, how to become experienced
developer…in 10 years, “coding it’s just writing” and some practice:
Naive Bayes Classifier, functional programming and Java 8.</p>

<!-- more -->

<h3 id="math-for-programmershttpsteve-yeggeblogspotcom200603math-for-programmershtml">1. <a href="http://steve-yegge.blogspot.com/2006/03/math-for-programmers.html">Math For Programmers</a></h3>

<p>Another great post by Steve Yegge about math. Math for developers.
As everyone might to retort, knowing math is not mandatory for software engineering field, but you know:</p>

<blockquote>
  <p>Math is… ummm, please don’t tell anyone I said this;
I’ll never get invited to another party as long as I live.
But math, well… I’d better whisper this, so listen up: (it’s actually kinda fun.)</p>
</blockquote>

<p>I totally agree. It’s a lot of fun.
Just read subreddit <a href="http://www.reddit.com/r/math/">math</a>, even if you don’t understand anything.</p>

<p>Pick your favourite math subject and try to dig more.
Statistics, Linear Algebra, Discrete Math, Combinatorics, Operation Research, Group Theory
and more; one of them can be a good start.</p>

<p>Does that really helps? Well, maybe. But it’s definitely improve your problem solving skill.</p>

<p>And believe. Math makes you a <em>better</em> programmer.</p>

<h3 id="how-i-explained-rest-to-my-wifehttptomaykocomwritingsrest-to-my-wife">2. <a href="http://tomayko.com/writings/rest-to-my-wife">How I Explained REST to My Wife</a></h3>

<p>Good article about how web works. I found it very useful for understanding
some parts I thought I understood. By the way, great examples.</p>

<blockquote>
  <p>Ryan: I can’t drive a cup and I can’t drink a car. But some verbs are almost universal like GET, PUT, and DELETE.</p>

  <p>Wife: You can’t DELETE a cup.</p>

  <p>Ryan: Well, okay, but you can throw it away.</p>
</blockquote>

<p>Unfortunately, author of this article take it down due to lot of complaints about
article gender-oriented nature. I don’t think it’s offensive and here is the link with
<a href="http://web.archive.org/web/20130116005443/http://tomayko.com/writings/rest-to-my-wife">copy from web archive</a></p>

<h3 id="programmer-competency-matrixhttpwwwindiangeeknetwp-contentuploadsprogrammer20competency20matrixhtm">3. <a href="http://www.indiangeek.net/wp-content/uploads/Programmer%20competency%20matrix.htm">Programmer Competency Matrix</a></h3>

<p>Do you think you are great programmer? Test yourself.</p>

<p><strong>Algorithms</strong></p>

<ul>
  <li><strong>2^n (Level 0)</strong>. Unable to find the average of numbers in an array
(It’s hard to believe but I’ve interviewed such candidates)</li>
  <li><strong>n^2 (Level 1)</strong>. Basic sorting, searching and data structure traversal and retrieval algorithms</li>
  <li><strong>n (Level 2)</strong>. Tree, Graph, simple greedy and divide and conquer algorithms, is able to understand
the relevance of the levels of this matrix.</li>
  <li><strong>log(n) (Level 3)</strong>. Able to recognize and code dynamic programming solutions, good knowledge of graph algorithms,
good knowledge of numerical computation algorithms, able to identify NP problems etc.</li>
</ul>

<p>In any case, this <em>test</em> helps you to build plan for programming
related skills and gives understanding what you need to know to become an expert.</p>

<h3 id="teach-yourself-programming-in-ten-yearshttpnorvigcom21-dayshtml">4. <a href="http://norvig.com/21-days.html">Teach Yourself Programming in Ten Years</a></h3>

<p>Article by Peter Norvig.
Great guy, I got to know from <a href="https://www.ai-class.com/">Artificial Intelligence</a> course.</p>

<p>His writing is critique of popular books, like “Learn Java in 21 Days”.
Peter explains that it is impossible to be a great
engineer in such short period, and to become an expert you need aproximately 10 years.</p>

<p>It reminds me a picture “How to become a C++ Developer in 21 Days”:</p>

<p><img src="http://i.imgur.com/3FckcgF.png" alt="" /></p>

<p>If you totally disagree with his idea, just test yourself in previous article.</p>

<h3 id="on-being-a-senior-engineerhttpwwwkitchensoapcom20121025on-being-a-senior-engineer">5. <a href="http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">On Being A Senior Engineer</a></h3>

<p>And logically continue. What behaviour differentiate senior engineer from “not senior” one?</p>

<blockquote>
  <p>Mature engineers seek out constructive criticism of their designs.</p>
</blockquote>

<p>Actually you could find more useful rules there and list of
<strong>The Ten Commandments of Egoless Programming</strong>.</p>

<blockquote>
  <ol>
    <li>Understand and accept that you will make mistakes.</li>
    <li>You are not your code.</li>
    <li>No matter how much “karate” you know, someone else will always know more.</li>
    <li>Don’t rewrite code without consultation.</li>
    <li>Treat people who know less than you with respect, deference, and patience.</li>
    <li>The only constant in the world is change. Be open to it and accept it with a smile.</li>
    <li>The only true authority stems from knowledge, not from position.</li>
    <li>Fight for what you believe, but gracefully accept defeat.</li>
    <li>Don’t be “the coder in the corner.”</li>
    <li>Critique code instead of people – be kind to the coder, not to the code.</li>
  </ol>
</blockquote>

<p>Note, that article touch some psychological aspect of person. So I don’t
think it can be 100% applied to everyone, but still worth to read.</p>

<h3 id="coding-its-just-writinghttpwwwcodinghorrorcomblog200811coding-its-just-writinghtml">6. <a href="http://www.codinghorror.com/blog/2008/11/coding-its-just-writing.html">Coding: It’s Just Writing</a></h3>

<p>Jeff Atwood explais basic the idea of:</p>

<blockquote>
  <p>The unexpected relationship between writing code and writing.</p>
</blockquote>

<p>To write good code, you must write good.</p>

<p>Article contains a reference to the book “The Elements of Style” with some quotes.</p>

<blockquote>
  <p>Vigorous writing is concise. A sentence should contain no unnecessary words,
a paragraph no unnecessary sentences, for the same reason that a drawing should
have no unnecessary lines and a machine no unnecessary parts.
This requires not that the writer make all his sentences short,
or that he avoid all detail and treat his subjects only in outline, but that every word tell.</p>
</blockquote>

<p>Read this book. Perhaps it is boring, it contains some advices to improve you writing skills.</p>

<h3 id="how-to-build-a-naive-bayes-classifierhttpswwwbionicspiritcomblog20120209howto-build-naive-bayes-classifierhtml">7. <a href="https://www.bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html">How To Build a Naive Bayes Classifier</a></h3>

<p>Now some practice.</p>

<p>Article is great explanation of how Naive Bayes Classifier work.
With pictures, code examples, common pitfalls and good sense of humour.</p>

<p>Although, it’s one of the simplest classification algorithms, but with some tweeks and
good train set it can give good results.</p>

<p><img src="https://www.bionicspirit.com/assets/img/conditional-prob-9a27ee0e.png" alt="" /></p>

<p>Here is the place where the math is needed. But article is so great,
that even monkey with banana (and degree in math) can understand how it works.</p>

<h3 id="functors-applicatives-and-monads-in-pictureshttpaditioposts2013-04-17-functorsapplicativesandmonadsinpictureshtml">8. <a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">Functors, Applicatives, And Monads In Pictures</a></h3>

<p>Number of articles that explain what is monad grow fast. Just another one.</p>

<p>Even if you don’t understand what Haskell and monad is, look at the cool pictures.</p>

<p><img src="http://adit.io/imgs/functors/fmap_just.png" alt="" /></p>

<h3 id="list-out-of-lambdahttpsteveloshcomblog201303list-out-of-lambda">9. <a href="http://stevelosh.com/blog/2013/03/list-out-of-lambda/">List Out Of Lambda</a></h3>

<p>Good introduction to functional programming. Not for beginners, I think.</p>

<blockquote>
  <p>This blog post is a thought exercise.
It’s not something you’d ever use for real code.
But just like a guitarist practices scales that she won’t ever play in a song,
we programmers should be exercising our brains every so often.</p>
</blockquote>

<p>How to implement fancy list, map, filter features with just
first-class functions. Basic operations on numbers included. JavaScript.</p>

<h3 id="everything-about-java-8httpwwwtechempowercomblog20130326everything-about-java-8">10. <a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">Everything about Java 8</a></h3>

<p>Let’s review again what will be in Java 8. Most wanted release ever.</p>

<p>In this overview you will test other important changes, not only lambdas.</p>

<p><em>Sad, that release postponed to early 2014 due to security issues.</em>
<em>But more time to play with developer preview features.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 017]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-017/"/>
    <updated>2013-04-09T21:13:00+03:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-017</id>
    <content type="html"><![CDATA[<blockquote>
  <p>If the numbers 1 to 5 are written out in words: one, two, three, four, five,
then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.</p>

  <p>If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=17">http://projecteuler.net/problem=17</a></p>

<!-- more -->

<p>To solve this problem we need some sort of mapping that defines association
between number and its string representation, e.g <code>123 = one hundred and twenty three</code>.</p>

<p>This can be done with maps in clojure in form <code>{:1 "one" :2 "two"}</code>.
But if pay more atention to this map, we see that key is a numeric value.
Exactly what plain arrays do.</p>

<p>Then we just define all mappings, obtain all arrays string elements, find their lengths and sum them.</p>

<p>One problem that providing mapping for each number between 1 and 1000 is a “bit” routine task, so we
need some formula to calculate representation instead of hardcoding it. We come to defining groups.</p>

<p>First group is just <em>first 20</em> numbers:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">first20</span> <span class="p">[</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span> <span class="s">&quot;four&quot;</span> <span class="s">&quot;five&quot;</span>
</span><span class="line">              <span class="s">&quot;six&quot;</span> <span class="s">&quot;seven&quot;</span> <span class="s">&quot;eight&quot;</span> <span class="s">&quot;nine&quot;</span> <span class="s">&quot;ten&quot;</span>
</span><span class="line">              <span class="s">&quot;eleven&quot;</span> <span class="s">&quot;twelve&quot;</span> <span class="s">&quot;thirteen&quot;</span> <span class="s">&quot;fourteen&quot;</span> <span class="s">&quot;fifteen&quot;</span>
</span><span class="line">              <span class="s">&quot;sixteen&quot;</span> <span class="s">&quot;seventeen&quot;</span> <span class="s">&quot;eighteen&quot;</span> <span class="s">&quot;nineteen&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: there is no “zero” as we don’t use it in spoken language.</p>

<p>Second group is numbers that divides 10:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">decas</span> <span class="p">[</span><span class="s">&quot;&quot;</span> <span class="s">&quot;ten&quot;</span> <span class="s">&quot;twenty&quot;</span> <span class="s">&quot;thirty&quot;</span> <span class="s">&quot;forty&quot;</span> <span class="s">&quot;fifty&quot;</span> <span class="s">&quot;sixty&quot;</span> <span class="s">&quot;seventy&quot;</span> <span class="s">&quot;eighty&quot;</span> <span class="s">&quot;ninety&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: empty first element here is used to reduce additional check. Its length is 0, that has no effect at all.</p>

<p>And the last ones are three used values:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">h</span> <span class="s">&quot;hundred&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">t</span> <span class="s">&quot;thousand&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">a</span> <span class="s">&quot;and&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The basic function will calculate the length string representation of some number.
Let’s call it <code>word-length</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">word-length</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">count </span><span class="nv">t</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">first20</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line">        <span class="p">(</span><span class="nb">&lt; </span><span class="nv">n</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">q</span> <span class="p">(</span><span class="nb">quot </span><span class="nv">n</span> <span class="mi">10</span><span class="p">)</span> <span class="nv">m</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)</span>
</span><span class="line">              <span class="nv">d</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">decas</span> <span class="nv">q</span><span class="p">))]</span>
</span><span class="line">          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span> <span class="nv">d</span>
</span><span class="line">              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">q</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">first20</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nb">+ </span><span class="nv">m</span> <span class="p">(</span><span class="nb">* </span><span class="mi">10</span> <span class="nv">q</span><span class="p">)))))</span>
</span><span class="line">                  <span class="p">(</span><span class="nb">+ </span><span class="nv">d</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">first20</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">m</span><span class="p">)))))))</span>
</span><span class="line">        <span class="p">(</span><span class="nb">&lt; </span><span class="nv">n</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">q</span> <span class="p">(</span><span class="nb">quot </span><span class="nv">n</span> <span class="mi">100</span><span class="p">)</span> <span class="nv">m</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="mi">100</span><span class="p">)]</span>
</span><span class="line">          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">word-length</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="nv">h</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">count </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="nv">h</span><span class="p">)</span> <span class="p">(</span><span class="nf">word-length</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nf">word-length</span> <span class="nv">m</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Little explanation:</p>

<ul>
  <li>If number is <code>1000</code> then the length of string “one” + “thousand”, 11.</li>
  <li>If number is lower than <code>100</code> then extract its decade part. If there is no
reminder for division by 10, the length is length of that decade part.</li>
  <li>Otherwise, if number in <code>first20</code>, length taken from array <code>first20</code>.</li>
  <li>Otherwise the length is decade part plus remainder.</li>
  <li>If number is lower than <code>1000</code> then extract hundred part. If there is no
reminder for division by 100, the length is “hundred” plus number of hundreds.</li>
  <li>Otherwise, the length is “hundred” plus number of hundreds, plus the word “and” and
recursively calculate the length of remainder, which is lower than <code>100</code>.</li>
</ul>

<p>Awful word-presentation of algorithm, because of… Reading code is much simpler, I know.</p>

<p>And the last part just sum up all word-lengths:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="nv">word-length</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1001</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check the code <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem017.clj">here</a>.</p>

<p>P.S. In fact algorithm is very simple, but needs some time to understand few branches.
By the way, the problem is little boring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Golf: Game of Life]]></title>
    <link href="http://mishadoff.github.com/blog/code-golf-game-of-life/"/>
    <updated>2013-03-07T17:59:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/code-golf-game-of-life</id>
    <content type="html"><![CDATA[<p>Conway’s Game of Life in a tweet.</p>

<!-- more -->

<p>Recently, my friend pointed out me an article <a href="http://trelford.com/blog/post/140.aspx">Life in a tweet</a>
where <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a> was implemented in one tweet
(<em>less than 140 characters</em>) in Ruby and F#. I took this challenge.</p>

<h3 id="tweet">Tweet</h3>

<p>Here is the final version in <code>137</code> characters of Clojure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">g</span> <span class="nv">r</span><span class="p">](</span><span class="nf">reduce</span><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">](</span><span class="nf">update-in</span> <span class="nv">i</span> <span class="nv">j</span><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">v</span><span class="p">](</span><span class="nf">get</span><span class="p">[</span><span class="nv">v</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="p">(</span><span class="nf">-</span><span class="p">(</span><span class="nb">apply </span><span class="nv">+</span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-in</span> <span class="nv">g%</span> <span class="mi">0</span><span class="p">)(</span><span class="nf">for</span><span class="p">[</span><span class="nv">a</span><span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span><span class="nv">b</span><span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]]</span>
</span><span class="line"><span class="p">(</span><span class="nb">map + </span><span class="nv">j</span><span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]))))</span><span class="nv">v</span> <span class="mi">2</span><span class="p">)</span><span class="mi">0</span><span class="p">))))</span><span class="nv">g</span> <span class="nv">r</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="sugared-version">“Sugared” version</h3>

<p>Translate tweet to more readable code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">step-sugar</span> <span class="p">[</span><span class="nv">grid</span> <span class="nv">range</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">count-neighbours</span> <span class="c1">;; determine number of neighbours</span>
</span><span class="line">        <span class="p">(</span><span class="nf">fn</span><span class="p">[[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">]]</span>
</span><span class="line">          <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-in</span> <span class="nv">grid</span> <span class="nv">%</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">                         <span class="p">(</span><span class="nf">for</span><span class="p">[</span><span class="nv">a</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="nv">b</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]]</span>
</span><span class="line">                           <span class="p">[(</span><span class="nb">+ </span><span class="nv">i</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">j</span> <span class="nv">b</span><span class="p">)]))))</span>
</span><span class="line">        <span class="nv">new-value</span>  <span class="c1">;; calculate new value for cell</span>
</span><span class="line">        <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">v</span> <span class="p">[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">]]</span>
</span><span class="line">          <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">c</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">count-neighbours</span> <span class="p">[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">])</span> <span class="nv">v</span><span class="p">)]</span>
</span><span class="line">            <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="mi">3</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">                  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">v</span>
</span><span class="line">                  <span class="ss">:else</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class="line">        <span class="nv">evolve-cell</span> <span class="c1">;; update cell in a grid</span>
</span><span class="line">        <span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">g</span> <span class="nv">i</span><span class="p">]</span> <span class="p">(</span><span class="nf">update-in</span> <span class="nv">g</span> <span class="nv">i</span> <span class="o">#</span><span class="p">(</span><span class="nf">new-value</span> <span class="nv">%</span> <span class="nv">i</span><span class="p">)))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">reduce </span><span class="nv">evolve-cell</span> <span class="nv">grid</span> <span class="nv">range</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Actually, this version is cheating,
due to passing one extra-parameter <code>range</code> that contains all indices
need to be updated in form <code>[[0 1] [1 1]]...</code></p>

<p>On the other side it gives us two features:</p>

<ul>
  <li><strong>Works for rectangular grid</strong>. Although, initial
implementation assumes the world is square.</li>
  <li><strong>Specific part of world can be updated</strong>. It gives possibility
to update specific area in the world, for example <em>west organisms evolve faster</em>.</li>
</ul>

<p>To use this function you need:</p>

<ul>
  <li>World</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">grid</span> <span class="p">[[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">           <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">           <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Evolution</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">evolution</span> <span class="p">[</span><span class="nv">g</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">p</span> <span class="p">(</span><span class="nb">count </span><span class="nv">g</span><span class="p">)</span> <span class="nv">q</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">get </span><span class="nv">g</span> <span class="mi">0</span><span class="p">))</span>
</span><span class="line">        <span class="nb">range </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="nv">p</span><span class="p">)</span> <span class="nv">j</span> <span class="p">(</span><span class="nb">range </span><span class="nv">q</span><span class="p">)][</span><span class="nv">i</span> <span class="nv">j</span><span class="p">])]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">iterate </span><span class="o">#</span><span class="p">(</span><span class="nf">step-sugar</span> <span class="nv">%</span> <span class="nv">range</span><span class="p">)</span> <span class="nv">g</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Visualization</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">print-grid</span> <span class="p">[</span><span class="nv">g</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">s</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">apply str </span><span class="p">(</span><span class="nb">replace </span><span class="p">{</span><span class="mi">0</span> <span class="s">&quot;.&quot;</span> <span class="mi">1</span> <span class="s">&quot;⚫&quot;</span><span class="p">}</span> <span class="nv">%</span><span class="p">))</span> <span class="nv">g</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="nv">s</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="testing">Testing</h3>

<p>To make sure results are correct use the following
<code>run</code> function and compare results to some common
<a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Examples_of_patterns">examples</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">run</span> <span class="p">[</span><span class="nv">grid</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">g</span> <span class="p">(</span><span class="nf">evolution</span> <span class="nv">grid</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">print-grid</span> <span class="nv">g</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">1000</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pattern examples:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">block</span> <span class="p">[[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">glider</span> <span class="p">[[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Full history of implementation and more life patterns
<a href="https://github.com/mishadoff/prog-experiment/blob/master/clojure/life.clj">available here</a></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 016]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-016/"/>
    <updated>2013-03-05T01:31:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-016</id>
    <content type="html"><![CDATA[<blockquote>
  <p>2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.</p>

  <p>What is the sum of the digits of the number 2^1000 ?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=16">http://projecteuler.net/problem=16</a></p>

<!-- more -->

<p>Are you kidding me?</p>

<ul>
  <li>Find 1000th <em>power of two</em></li>
  <li>Sum its digits</li>
</ul>

<p>In <a href="http://mishadoff.github.com/blog/clojure-euler-problem-008/">Clojure Euler: Problem 008</a> we
learned how to sum digits in the number. Just gentle reminder:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">sum-of-digits</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">int </span><span class="nv">%</span><span class="p">)</span> <span class="mi">48</span><span class="p">)</span> <span class="p">(</span><span class="nb">seq </span><span class="p">(</span><span class="nb">str </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, let’s create sequence of powers of two:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">powers-of-2</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="nb">partial * </span><span class="mi">2</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Unfortunately, this sequence throws <code>integer overflow</code> on the <code>64th</code> element.
We can fix that using <em>long arithmetics</em>, which known as <code>BigInteger</code> in Java.
Change <code>1</code> to <code>1N</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="nb">partial * </span><span class="mi">2</span><span class="p">)</span> <span class="mi">1</span><span class="nv">N</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Another way is to use <strong>automatic promotion</strong> operator (<code>+'</code>, <code>*'</code>).
If result of some operation is not suitable for some type,
instead of invalid computation and runtime exception, clojure automatically promotes
the type to suitable one (<em>for example</em> <code>Long.MAX_VALUE +' 1</code> <em>works fine and produces
 correct result with type of</em> <code>BigInteger</code>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="nb">partial </span><span class="nv">*</span><span class="o">&#39;</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Choose <code>powers-of-2</code> that you prefer and final result will look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">sum-of-digits</span> <span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nb">take </span><span class="mi">1001</span> <span class="p">(</span><span class="nf">powers-of-2</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem016.clj">github</a></p>

<p><strong>P.S.</strong> Automatic promotion is a beatiful thing. But be aware about losing in
speed of calculations. Also, no way back. If promotion happened, <em>depromotion</em> won’t.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Magic. Part 4: sun.misc.Unsafe]]></title>
    <link href="http://mishadoff.github.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/"/>
    <updated>2013-02-26T02:37:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe</id>
    <content type="html"><![CDATA[<p>Java is a safe programming language and prevents programmer
from doing a lot of stupid mistakes, most of which based on memory management.
But, there is a way to do such <em>mistakes</em> intentionally, using <code>Unsafe</code> class.</p>

<p>This article is a quick overview of <code>sun.misc.Unsafe</code> <em>public</em> API and few
interesting cases of its usage.</p>

<!-- more -->

<h3 id="unsafe-instantiation">Unsafe instantiation</h3>

<p>Before usage, we need to create instance of <code>Unsafe</code> object.
There is no simple way to do it like <code>Unsafe unsafe = new Unsafe()</code>,
because <code>Unsafe</code> class has private constructor. It also has static
<code>getUnsafe()</code> method, but if you naively try to call <code>Unsafe.getUnsafe()</code> you, probably,
get <code>SecurityException</code>. Using this method available only from trusted code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="n">Unsafe</span> <span class="nf">getUnsafe</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Class</span> <span class="n">cc</span> <span class="o">=</span> <span class="n">sun</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Reflection</span><span class="o">.</span><span class="na">getCallerClass</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">cc</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SecurityException</span><span class="o">(</span><span class="s">&quot;Unsafe&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">theUnsafe</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is how java validates if code is trusted.
It is just checking that our code was loaded with
primary classloader.</p>

<p>We can make our code “trusted”. Use option <code>bootclasspath</code> when running
your program and specify
path to system classes plus your one that will use <code>Unsafe</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">java</span> <span class="o">-</span><span class="nl">Xbootclasspath:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">7.0</span><span class="o">/</span><span class="n">jre</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">rt</span><span class="o">.</span><span class="na">jar</span><span class="o">:.</span> <span class="n">com</span><span class="o">.</span><span class="na">mishadoff</span><span class="o">.</span><span class="na">magic</span><span class="o">.</span><span class="na">UnsafeClient</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But it’s too hard.</p>

<p><code>Unsafe</code> class contains its instance called <code>theUnsafe</code>, which marked as <code>private</code>.
We can steal that variable via java reflection.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Field</span> <span class="n">f</span> <span class="o">=</span> <span class="n">Unsafe</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;theUnsafe&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line"><span class="n">Unsafe</span> <span class="n">unsafe</span> <span class="o">=</span> <span class="o">(</span><span class="n">Unsafe</span><span class="o">)</span> <span class="n">f</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Note:</em> Ignore your IDE. For example, eclipse show error “Access restriction…”
but if you run code, all works just fine. If the error is annoying, ignore errors on
<code>Unsafe</code> usage in:</p>

<pre><code>Preferences -&gt; Java -&gt; Compiler -&gt; Errors/Warnings -&gt;
Deprecated and restricted API -&gt; Forbidden reference -&gt; Warning
</code></pre>

<h3 id="unsafe-api">Unsafe API</h3>

<p>Class <a href="http://www.docjar.com/docs/api/sun/misc/Unsafe.html">sun.misc.Unsafe</a>
consists of <code>105</code> methods. There are, actually,
few groups of important methods for manipulating with various entities.
Here is some of them:</p>

<ul>
  <li><strong>Info</strong>. Just returns some low-level memory information.
    <ul>
      <li><code>addressSize</code></li>
      <li><code>pageSize</code></li>
    </ul>
  </li>
  <li><strong>Objects</strong>. Provides methods for object and its fields manipulation.
    <ul>
      <li><code>allocateInstance</code></li>
      <li><code>objectFieldOffset</code></li>
    </ul>
  </li>
  <li><strong>Classes</strong>. Provides methods for classes and static fields manipulation.
    <ul>
      <li><code>staticFieldOffset</code></li>
      <li><code>defineClass</code></li>
      <li><code>defineAnonymousClass</code></li>
      <li><code>ensureClassInitialized</code></li>
    </ul>
  </li>
  <li><strong>Arrays</strong>. Arrays manipulation.
    <ul>
      <li><code>arrayBaseOffset</code></li>
      <li><code>arrayIndexScale</code></li>
    </ul>
  </li>
  <li><strong>Synchronization</strong>. Low level primitives for synchronization.
    <ul>
      <li><code>monitorEnter</code></li>
      <li><code>tryMonitorEnter</code></li>
      <li><code>monitorExit</code></li>
      <li><code>compareAndSwapInt</code></li>
      <li><code>putOrderedInt</code></li>
    </ul>
  </li>
  <li><strong>Memory</strong>. Direct memory access methods.
    <ul>
      <li><code>allocateMemory</code></li>
      <li><code>copyMemory</code></li>
      <li><code>freeMemory</code></li>
      <li><code>getAddress</code></li>
      <li><code>getInt</code></li>
      <li><code>putInt</code></li>
    </ul>
  </li>
</ul>

<h3 id="interesting-use-cases">Interesting use cases</h3>

<h4 id="avoid-initialization">Avoid initialization</h4>

<p><code>allocateInstance</code> method can be <em>useful</em> when you need to skip object initialization phase
or bypass security checks in constructor or you want instance of that class
but don’t have any public constructor. Consider following class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">a</span><span class="o">;</span> <span class="c1">// not initialized value</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">A</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// initialization</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">a</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">;</span> <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Instantiating it using constructor, reflection and unsafe gives
different results.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">A</span> <span class="n">o1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">A</span><span class="o">();</span> <span class="c1">// constructor</span>
</span><span class="line"><span class="n">o1</span><span class="o">.</span><span class="na">a</span><span class="o">();</span> <span class="c1">// prints 1</span>
</span><span class="line">
</span><span class="line"><span class="n">A</span> <span class="n">o2</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span> <span class="c1">// reflection</span>
</span><span class="line"><span class="n">o2</span><span class="o">.</span><span class="na">a</span><span class="o">();</span> <span class="c1">// prints 1</span>
</span><span class="line">
</span><span class="line"><span class="n">A</span> <span class="n">o3</span> <span class="o">=</span> <span class="o">(</span><span class="n">A</span><span class="o">)</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">allocateInstance</span><span class="o">(</span><span class="n">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// unsafe</span>
</span><span class="line"><span class="n">o3</span><span class="o">.</span><span class="na">a</span><span class="o">();</span> <span class="c1">// prints 0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just think what happens to all your <a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singletons</a>.</p>

<h4 id="memory-corruption">Memory corruption</h4>

<p>This one is usual for every C programmer.
By the way, its common technique for security bypass.</p>

<p>Consider some simple class that check access rules:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">Guard</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">ACCESS_ALLOWED</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">giveAccess</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">42</span> <span class="o">==</span> <span class="n">ACCESS_ALLOWED</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The client code is <em>very secure</em> and calls
<code>giveAccess()</code> to check access rules. Unfortunately, for clients,
it always returns <code>false</code>. Only privileged users <em>somehow</em> can change
value of <code>ACCESS_ALLOWED</code> constant and get access.</p>

<p>In fact, it’s not true. Here is the code demostrates it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Guard</span> <span class="n">guard</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Guard</span><span class="o">();</span>
</span><span class="line"><span class="n">guard</span><span class="o">.</span><span class="na">giveAccess</span><span class="o">();</span>   <span class="c1">// false, no access</span>
</span><span class="line">
</span><span class="line"><span class="c1">// bypass</span>
</span><span class="line"><span class="n">Unsafe</span> <span class="n">unsafe</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">();</span>
</span><span class="line"><span class="n">Field</span> <span class="n">f</span> <span class="o">=</span> <span class="n">guard</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;ACCESS_ALLOWED&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">unsafe</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">guard</span><span class="o">,</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">objectFieldOffset</span><span class="o">(</span><span class="n">f</span><span class="o">),</span> <span class="mi">42</span><span class="o">);</span> <span class="c1">// memory corruption</span>
</span><span class="line">
</span><span class="line"><span class="n">guard</span><span class="o">.</span><span class="na">giveAccess</span><span class="o">();</span> <span class="c1">// true, access granted</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now all clients will get unlimited access.</p>

<p>Actually, the same functionality can be achieved by reflection.
But interesting, that we can modify any object, even ones
that we do not have references to.</p>

<p>For example, there is another <code>Guard</code> object in memory
located next to current <code>guard</code> object. We can modify its <code>ACCESS_ALLOWED</code> field with the following code</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">unsafe</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">guard</span><span class="o">,</span> <span class="mi">16</span> <span class="o">+</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">objectFieldOffset</span><span class="o">(</span><span class="n">f</span><span class="o">),</span> <span class="mi">42</span><span class="o">);</span> <span class="c1">// memory corruption</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note, we didn’t use any reference to this object.
<code>16</code> is size of <code>Guard</code> object in 32 bit architecture.
We can calculate it manually or use <code>sizeOf</code> method, that defined… right now.</p>

<h4 id="sizeof"><strong>sizeOf</strong></h4>

<p>Using <code>objectFieldOffset</code> method we can implement C-style <code>sizeof</code> function.
This implementation returns <em>shallow</em> size of object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">sizeOf</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Unsafe</span> <span class="n">u</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">();</span>
</span><span class="line">    <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Field</span><span class="o">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Field</span><span class="o">&gt;();</span>
</span><span class="line">    <span class="n">Class</span> <span class="n">c</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</span><span class="line">    <span class="k">while</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="n">Object</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">f</span> <span class="o">:</span> <span class="n">c</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">((</span><span class="n">f</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">Modifier</span><span class="o">.</span><span class="na">STATIC</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">fields</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">getSuperclass</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// get offset</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">maxSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">f</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="na">objectFieldOffset</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">&gt;</span> <span class="n">maxSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">maxSize</span> <span class="o">=</span> <span class="n">offset</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="o">((</span><span class="n">maxSize</span><span class="o">/</span><span class="mi">8</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="mi">8</span><span class="o">;</span>   <span class="c1">// padding</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Algorithm is the following: go through all <em>non-static</em> fields including all
superclases, get offset for each field, find maximum and add padding.
Probably, I missed something, but idea is clear.</p>

<p>Much simpler <code>sizeOf</code> can be achieved if we just read <code>size</code> value from
the class struct for this object, which located with offset 12 in <code>JVM 1.7 32 bit</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">sizeOf</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">){</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">getUnsafe</span><span class="o">().</span><span class="na">getAddress</span><span class="o">(</span>
</span><span class="line">        <span class="n">normalize</span><span class="o">(</span><span class="n">getUnsafe</span><span class="o">().</span><span class="na">getInt</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="mi">4L</span><span class="o">))</span> <span class="o">+</span> <span class="mi">12L</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>normalize</code> is a method for casting signed int to unsigned long, for
correct address usage.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">normalize</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span><span class="o">(</span><span class="n">value</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="o">(~</span><span class="mi">0L</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">32</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Awesome, this method returns the same result as our previous <code>sizeof</code>
function.</p>

<p>In fact, for good, safe and accurate <code>sizeof</code> function better to use
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html">java.lang.instrument</a> package,
but it requires specifyng <code>agent</code> option in your JVM.</p>

<h4 id="shallow-copy"><strong>Shallow copy</strong></h4>

<p>Having implementation of calculating shallow object size, we can simply
add function that copy objects. Standard solution need modify your code with <code>Cloneable</code>,
or you can implement custom copy function in your object, but it won’t be multipurpose function.</p>

<p>Shallow copy:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="n">Object</span> <span class="nf">shallowCopy</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">size</span> <span class="o">=</span> <span class="n">sizeOf</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">toAddress</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">address</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">().</span><span class="na">allocateMemory</span><span class="o">(</span><span class="n">size</span><span class="o">);</span>
</span><span class="line">    <span class="n">getUnsafe</span><span class="o">().</span><span class="na">copyMemory</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">address</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">fromAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>toAddress</code> and <code>fromAddress</code> convert object to its address in memory and vice versa.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kt">long</span> <span class="nf">toAddress</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Object</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span><span class="n">obj</span><span class="o">};</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">baseOffset</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">().</span><span class="na">arrayBaseOffset</span><span class="o">(</span><span class="n">Object</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">normalize</span><span class="o">(</span><span class="n">getUnsafe</span><span class="o">().</span><span class="na">getInt</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">baseOffset</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">static</span> <span class="n">Object</span> <span class="nf">fromAddress</span><span class="o">(</span><span class="kt">long</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Object</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span><span class="kc">null</span><span class="o">};</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">baseOffset</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">().</span><span class="na">arrayBaseOffset</span><span class="o">(</span><span class="n">Object</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">getUnsafe</span><span class="o">().</span><span class="na">putLong</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">baseOffset</span><span class="o">,</span> <span class="n">address</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This copy function can be used to copy object of any type, its size will be calculated
dynamically. Note that after copying you need to cast object to specific type.</p>

<h4 id="hide-password">Hide Password</h4>

<p>One more interesting usage of direct memory access in <code>Unsafe</code> is removing
unwanted objects from memory.</p>

<p>Most of the APIs for retrieving user’s password, have signature
as <code>byte[]</code> or <code>char[]</code>. Why arrays?</p>

<p>It is completely for security reason, because we can nullify array elements after we don’t need them.
If we retrieve password as <code>String</code> it can be saved like an object in memory and nullifying that
string just perform dereference operation. This object still in memory by the time GC decide to perform cleanup.</p>

<p>This trick creates fake <code>String</code> object with the same size and replace original one in memory:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;l00k@myHor$e&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">String</span> <span class="n">fake</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">,</span> <span class="s">&quot;?&quot;</span><span class="o">));</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">password</span><span class="o">);</span> <span class="c1">// l00k@myHor$e</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fake</span><span class="o">);</span> <span class="c1">// ????????????</span>
</span><span class="line">
</span><span class="line"><span class="n">getUnsafe</span><span class="o">().</span><span class="na">copyMemory</span><span class="o">(</span>
</span><span class="line">          <span class="n">fake</span><span class="o">,</span> <span class="mi">0L</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">toAddress</span><span class="o">(</span><span class="n">password</span><span class="o">),</span> <span class="n">sizeOf</span><span class="o">(</span><span class="n">password</span><span class="o">));</span>
</span><span class="line">
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">password</span><span class="o">);</span> <span class="c1">// ????????????</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fake</span><span class="o">);</span> <span class="c1">// ????????????</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Feel safe.</p>

<h4 id="multiple-inheritance"><strong>Multiple Inheritance</strong></h4>

<p>There is no multiple inheritance in java.</p>

<p>Correct, except we can cast every type to every another one, if we want.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">long</span> <span class="n">intClassAddress</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">getUnsafe</span><span class="o">().</span><span class="na">getInt</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="mi">4L</span><span class="o">));</span>
</span><span class="line"><span class="kt">long</span> <span class="n">strClassAddress</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">getUnsafe</span><span class="o">().</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="mi">4L</span><span class="o">));</span>
</span><span class="line"><span class="n">getUnsafe</span><span class="o">().</span><span class="na">putAddress</span><span class="o">(</span><span class="n">intClassAddress</span> <span class="o">+</span> <span class="mi">36</span><span class="o">,</span> <span class="n">strClassAddress</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This snippet adds <code>String</code> class to <code>Integer</code> superclasses, so we can cast
without runtime exception.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="o">(</span><span class="n">Object</span><span class="o">)</span> <span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">666</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One problem that we must do it with pre-casting to object. To cheat compiler.</p>

<h4 id="dynamic-classes">Dynamic classes</h4>

<p>We can create classes in runtime, for example from
compiled <code>.class</code> file. To perform that read class contents
to byte array and pass it properly to <code>defineClass</code> method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">byte</span><span class="o">[]</span> <span class="n">classContents</span> <span class="o">=</span> <span class="n">getClassContent</span><span class="o">();</span>
</span><span class="line"><span class="n">Class</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">().</span><span class="na">defineClass</span><span class="o">(</span>
</span><span class="line">              <span class="kc">null</span><span class="o">,</span> <span class="n">classContents</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">classContents</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class="line">    <span class="n">c</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">).</span><span class="na">invoke</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(),</span> <span class="kc">null</span><span class="o">);</span> <span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And reading from file defined as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getClassContent</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/home/mishadoff/tmp/A.class&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">FileInputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class="line">    <span class="kt">byte</span><span class="o">[]</span> <span class="n">content</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[(</span><span class="kt">int</span><span class="o">)</span><span class="n">f</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span><span class="line">    <span class="n">input</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class="line">    <span class="n">input</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">    <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This can be useful, when you must create classes dynamically, some proxies
or aspects for existing code.</p>

<h4 id="throw-an-exception">Throw an Exception</h4>

<p>Don’t like checked exceptions? Not a problem.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">getUnsafe</span><span class="o">().</span><span class="na">throwException</span><span class="o">(</span><span class="k">new</span> <span class="n">IOException</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This method throws checked exception, but your code not forced to catch or rethrow it.
Just like runtime exception.</p>

<h4 id="fast-serialization">Fast Serialization</h4>

<p>This one is more practical.</p>

<p>Everyone knows that standard java <code>Serializable</code> capability
to perform serialization is very slow. It also require class
to have public non-argument constructor.</p>

<p><code>Externalizable</code> is better, but it needs to define schema for
class to be serialized.</p>

<p>Popular high-performance libraries, like <a href="http://code.google.com/p/kryo/">kryo</a>
have dependencies, which can be unacceptable with low-memory requirements.</p>

<p>But full serialization cycle can be easily achieved with unsafe class.</p>

<p>Serialization:</p>

<ul>
  <li>Build schema for object using reflection. It can be done once for class.</li>
  <li>Use <code>Unsafe</code> methods <code>getLong</code>, <code>getInt</code>, <code>getObject</code>, etc. to retrieve actual field values.</li>
  <li>Add <code>class</code> identifier to have capability restore this object.</li>
  <li>Write them to the file or any output.</li>
</ul>

<p>You can also add compression to save space.</p>

<p>Deserialization:</p>

<ul>
  <li>Create instance of serialized class. <code>allocateInstance</code> helps, because does not require any constructor.</li>
  <li>Build schema. The same as 1 step in serialization.</li>
  <li>Read all fields from file or any input.</li>
  <li>Use <code>Unsafe</code> methods <code>putLong</code>, <code>putInt</code>, <code>putObject</code>, etc. to fill the object.</li>
</ul>

<p>Actually, there are much more details in correct inplementation, but intuition is clear.</p>

<p>This serialization will be really fast.</p>

<p>By the way, there are some attempts in <code>kryo</code> to use <code>Unsafe</code> <a href="http://code.google.com/p/kryo/issues/detail?id=75">http://code.google.com/p/kryo/issues/detail?id=75</a></p>

<h4 id="big-arrays"><strong>Big Arrays</strong></h4>

<p>As you know <code>Integer.MAX_VALUE</code> constant is a max size of java array.
Using direct memory allocation we can create arrays with size limited by only heap size.</p>

<p>Here is <code>SuperArray</code> implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">SuperArray</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">BYTE</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">size</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">address</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">SuperArray</span><span class="o">(</span><span class="kt">long</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class="line">        <span class="n">address</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">().</span><span class="na">allocateMemory</span><span class="o">(</span><span class="n">size</span> <span class="o">*</span> <span class="n">BYTE</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">long</span> <span class="n">i</span><span class="o">,</span> <span class="kt">byte</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">getUnsafe</span><span class="o">().</span><span class="na">putByte</span><span class="o">(</span><span class="n">address</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">BYTE</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">(</span><span class="kt">long</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">getUnsafe</span><span class="o">().</span><span class="na">getByte</span><span class="o">(</span><span class="n">address</span> <span class="o">+</span> <span class="n">idx</span> <span class="o">*</span> <span class="n">BYTE</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And sample usage:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">long</span> <span class="n">SUPER_SIZE</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line"><span class="n">SuperArray</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SuperArray</span><span class="o">(</span><span class="n">SUPER_SIZE</span><span class="o">);</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Array size:&quot;</span> <span class="o">+</span> <span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">());</span> <span class="c1">// 4294967294</span>
</span><span class="line"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">array</span><span class="o">.</span><span class="na">set</span><span class="o">((</span><span class="kt">long</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span><span class="mi">3</span><span class="o">);</span>
</span><span class="line">    <span class="n">sum</span> <span class="o">+=</span> <span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">((</span><span class="kt">long</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Sum of 100 elements:&quot;</span> <span class="o">+</span> <span class="n">sum</span><span class="o">);</span>  <span class="c1">// 300</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In fact, this technique uses <code>off-heap memory</code> and partially
available in <code>java.nio</code> package.</p>

<p>Memory allocated this way not located in the heap and not under GC management, so take care of it
using <code>Unsafe.freeMemory()</code>. It also does not perform any boundary checks, so any
illegal access may cause JVM crash.</p>

<p>It can be useful for math computations, where code can operate with large arrays of data.
Also, it can be interesting for realtime programmers, where GC delays on large arrays can
break the limits.</p>

<h4 id="concurrency">Concurrency</h4>

<p>And few words about concurrency with <code>Unsafe</code>.
<code>compareAndSwap</code> methods are atomic and can be used to implement
high-performance lock-free data structures.</p>

<p>For example, consider the problem to increment value in the shared object
using lot of threads.</p>

<p>First we define simple interface <code>Counter</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">interface</span> <span class="nc">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">increment</span><span class="o">();</span>
</span><span class="line">    <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then we define worker thread <code>CounterClient</code>, that uses <code>Counter</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">CounterClient</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">Counter</span> <span class="n">c</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">num</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">CounterClient</span><span class="o">(</span><span class="n">Counter</span> <span class="n">c</span><span class="o">,</span> <span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">num</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">c</span><span class="o">.</span><span class="na">increment</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And this is testing code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">int</span> <span class="n">NUM_OF_THREADS</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">NUM_OF_INCREMENTS</span> <span class="o">=</span> <span class="mi">100000</span><span class="o">;</span>
</span><span class="line"><span class="n">ExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">NUM_OF_THREADS</span><span class="o">);</span>
</span><span class="line"><span class="n">Counter</span> <span class="n">counter</span> <span class="o">=</span> <span class="o">...</span> <span class="c1">// creating instance of specific counter</span>
</span><span class="line"><span class="kt">long</span> <span class="n">before</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class="line"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM_OF_THREADS</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">service</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">CounterClient</span><span class="o">(</span><span class="n">counter</span><span class="o">,</span> <span class="n">NUM_OF_INCREMENTS</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="n">service</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class="line"><span class="n">service</span><span class="o">.</span><span class="na">awaitTermination</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">);</span>
</span><span class="line"><span class="kt">long</span> <span class="n">after</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Counter result: &quot;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="na">getCounter</span><span class="o">());</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Time passed in ms:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">after</span> <span class="o">-</span> <span class="n">before</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First implementation is not-synchronized counter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">StupidCounter</span> <span class="kd">implements</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">counter</span><span class="o">++;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="nl">result:</span> <span class="mi">99542945</span>
</span><span class="line"><span class="n">Time</span> <span class="n">passed</span> <span class="n">in</span> <span class="nl">ms:</span> <span class="mi">679</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Working fast, but no threads management at all, so result is inaccurate.
Second attempt, add easiest java-way synchronization:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">SyncCounter</span> <span class="kd">implements</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">counter</span><span class="o">++;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="nl">result:</span> <span class="mi">100000000</span>
</span><span class="line"><span class="n">Time</span> <span class="n">passed</span> <span class="n">in</span> <span class="nl">ms:</span> <span class="mi">10136</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Radical synchronization always work. But timings is awful.
Let’s try <code>ReentrantReadWriteLock</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">LockCounter</span> <span class="kd">implements</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">WriteLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantReadWriteLock</span><span class="o">().</span><span class="na">writeLock</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class="line">        <span class="n">counter</span><span class="o">++;</span>
</span><span class="line">        <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="nl">result:</span> <span class="mi">100000000</span>
</span><span class="line"><span class="n">Time</span> <span class="n">passed</span> <span class="n">in</span> <span class="nl">ms:</span> <span class="mi">8065</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Still correct, and timings are better. What about atomics?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">AtomicCounter</span> <span class="kd">implements</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="n">AtomicLong</span> <span class="n">counter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicLong</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">counter</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">counter</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="nl">result:</span> <span class="mi">100000000</span>
</span><span class="line"><span class="n">Time</span> <span class="n">passed</span> <span class="n">in</span> <span class="nl">ms:</span> <span class="mi">6552</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>AtomicCounter</code> is even better. Finally, try <code>Unsafe</code>
primitive <code>compareAndSwapLong</code> to see if it is really privilegy to use it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">CASCounter</span> <span class="kd">implements</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">Unsafe</span> <span class="n">unsafe</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">offset</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">CASCounter</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="n">unsafe</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">();</span>
</span><span class="line">        <span class="n">offset</span> <span class="o">=</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">objectFieldOffset</span><span class="o">(</span><span class="n">CASCounter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;counter&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">before</span> <span class="o">=</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(!</span><span class="n">unsafe</span><span class="o">.</span><span class="na">compareAndSwapLong</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">offset</span><span class="o">,</span> <span class="n">before</span><span class="o">,</span> <span class="n">before</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">before</span> <span class="o">=</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="nl">result:</span> <span class="mi">100000000</span>
</span><span class="line"><span class="n">Time</span> <span class="n">passed</span> <span class="n">in</span> <span class="nl">ms:</span> <span class="mi">6454</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hmm, seems equal to atomics. Maybe atomics use <code>Unsafe</code>? (<em>YES</em>)</p>

<p>In fact this example is easy enough, but it shows some power of <code>Unsafe</code>.</p>

<p>As I said, <code>CAS</code> primitive can be used to implement lock-free data structures.
The intuition behind this is simple:</p>

<ul>
  <li>Have some state</li>
  <li>Create a copy of it</li>
  <li>Modify it</li>
  <li>Perform <code>CAS</code></li>
  <li>Repeat if it fails</li>
</ul>

<p>Actually, in real it is more hard than you can imagine. There are a lot of problems like
<a href="http://en.wikipedia.org/wiki/ABA_problem">ABA Problem</a>, instructions reordering, etc.</p>

<p>If you really interested, you can refer to the awesome presentation about <a href="http://www.azulsystems.com/about_us/presentations/lock-free-hash">lock-free HashMap</a></p>

<h3 id="bonus">Bonus</h3>

<p>Documentation for <code>park</code> method from <code>Unsafe</code> class contains
longest English sentence I’ve ever seen:</p>

<blockquote>
  <p>Block current thread, returning when a balancing
unpark occurs, or a balancing unpark has
already occurred, or the thread is interrupted, or, if not
absolute and time is not zero, the given time nanoseconds have
elapsed, or if absolute, the given deadline in milliseconds
since Epoch has passed, or spuriously (i.e., returning for no
“reason”). Note: This operation is in the Unsafe class only
because unpark is, so it would be strange to place it
elsewhere.</p>
</blockquote>

<h3 id="conclusion">Conclusion</h3>

<p>Although, <code>Unsafe</code> has a bunch of useful applications, never use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elephant-Oriented Programming]]></title>
    <link href="http://mishadoff.github.com/blog/elephant-oriented-programming/"/>
    <updated>2013-02-26T00:58:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/elephant-oriented-programming</id>
    <content type="html"><![CDATA[<p>Have you heard about Elephant-Oriented Programming?</p>

<!-- more -->

<h4 id="read-very-clever-bookhttplearnyouahaskellcom-with-an-elephant-on-cover">1. Read <a href="http://learnyouahaskell.com/">very clever book</a> with an <em>elephant</em> on cover.</h4>

<p><img src="http://i.imgur.com/ndEJc05.png" height="300px" width="240px" /></p>

<h4 id="i-bet-you-didnt-understand-anything-so-choose-easy-programming-languagehttpphpnet-with-an-elephant">2. I bet you didn’t understand anything, so choose <a href="http://php.net/">easy programming language</a> with an <em>elephant</em>.</h4>

<p><img src="http://i.imgur.com/NzWiT2N.jpg" alt="" /></p>

<h4 id="what-is-ide-we-already-have-elephant-text-editorhttpsevernotecom">3. What is IDE? We already have <em>elephant</em> <a href="https://evernote.com/">text editor</a>.</h4>

<p><img src="http://i.imgur.com/7JcFlTu.jpg" alt="" /></p>

<h4 id="for-real-life-programming-tasks-we-need-storage-postgresqlhttpwwwpostgresqlorg-database-is-good-because-of-elephant">4. For real life programming tasks we need storage. <a href="http://www.postgresql.org/">PostgreSQL</a> database is good. Because of <em>elephant</em>.</h4>

<p><img src="http://i.imgur.com/A4FWqXy.png" alt="" /></p>

<h4 id="and-finally-fancy-word-big-datahttphadoopapacheorg-did-you-say-big-elephants-are-big">5. And finally, fancy word <a href="http://hadoop.apache.org/">Big Data</a>. Did you say “big”? <em>Elephants</em> are big.</h4>

<p><img src="http://hadoop.apache.org/images/hadoop-logo.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stirling's Approximation]]></title>
    <link href="http://mishadoff.github.com/blog/stirlings-approximation/"/>
    <updated>2013-02-23T01:38:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/stirlings-approximation</id>
    <content type="html"><![CDATA[<p>Do you like factorials?</p>

<p>Probably, you do. If no, whatever, read this post to know
how get rid of factorials.</p>

<!-- more -->

<h3 id="tldr">TL;DR</h3>

<script type="math/tex; mode=display">
ln(n!) = n \cdot ln(n) - n + 1
</script>

<p>It is <a href="http://en.wikipedia.org/wiki/Stirling%27s_approximation">Stirling’s approximation</a>
or just Stirling’s formula.
It allows to replace factorials with their approximation.
If you not interested in math, skip to <a href="#usage">formula usage</a></p>

<h3 id="proof">Proof</h3>

<p>Replace factorial with its definition:</p>

<script type="math/tex; mode=display">
ln(n!) = ln(1 \cdot 2 \cdot 3 ...)
</script>

<p>Transform logarithm of multiplication to sum of logarithms:</p>

<script type="math/tex; mode=display">
ln(1 \cdot 2 \cdot 3 ...) = ln(1) + ln(2) + ln(3) + ... + ln(n)
</script>

<p>Take a look at the integral $\int_a^b f(x) dx$.
Replace $f(x)$ with $ln(x)$, $a$ with $1$, and $b$ with $n$. Then use numerical
integration with step <code>1</code> and <a href="http://en.wikipedia.org/wiki/Rectangle_method">right rectangle rule</a></p>

<script type="math/tex; mode=display">
\int_1^n ln(x) dx \approx ln(2) + ln(3) + ... + ln(n)
</script>

<p>Right-hand parts of two previous formulas are equal, with respect $ln(1)=0$. Then:</p>

<script type="math/tex; mode=display">
ln(1 \cdot 2 \cdot 3 ...) \approx \int_1^n ln(x) dx
</script>

<p>Calculate integral using <a href="http://en.wikipedia.org/wiki/Integration_by_parts">integration by parts</a>:</p>

<script type="math/tex; mode=display">
\int ln(x) dx = x \cdot ln(x) - \int x d(ln(x)) = x \cdot ln(x) - \int dt = x \cdot ln(x) - x + C
</script>

<p>Applying boundaries <code>[1..n]</code></p>

<script type="math/tex; mode=display">
n \cdot ln(n) - n + C - 1 \cdot ln(1) + 1 - C = n \cdot ln(n) - n + 1
</script>

<p>yields final result:</p>

<script type="math/tex; mode=display">
ln(n!) = n \cdot ln(n) - n + 1
</script>

<p>Exactly what on the top.</p>

<h3 id="developer-proof">Developer Proof</h3>

<p>It is much simpler proof, with lose of accuracy, but still valid for partial applications.</p>

<p>Replace factorial with its definition:</p>

<script type="math/tex; mode=display">
ln(n!) = ln(1 \cdot 2 \cdot 3 ...)
</script>

<p>Transform logarithm of multiplication to sum of logarithms:</p>

<script type="math/tex; mode=display">
ln(1 \cdot 2 \cdot 3 ...) = ln(1) + ln(2) + ln(3) + ... = \sum_{i=1}^n ln(i)
</script>

<p>From monotonic property of logarithms $a \leq b \rightarrow ln(a) \leq ln(b)$
take upper bound for each $ln(i)$:</p>

<script type="math/tex; mode=display">
\forall i \; ln(i) \leq ln(n)
</script>

<p>Then, using worst case substitution, sum can be rewritten as:</p>

<script type="math/tex; mode=display">
\sum_{i=1}^n ln(i) \leq \sum_{i=1}^N ln(n)
</script>

<p>But $ln(n)$ does not depend on <code>i</code>, so get rid of sum:</p>

<script type="math/tex; mode=display">
\sum_{i=1}^n ln(n) = n \cdot ln(n)
</script>

<p>Done.</p>

<h3 id="a-idusageausage"><a id="usage"></a>Usage</h3>

<ul>
  <li><strong>Algorithm complexity</strong></li>
</ul>

<p>No one cares about <code>O(log(n!))</code> of your algorithm, but everybody
knows that <code>O(n log n)</code>, <a href="http://en.wikipedia.org/wiki/Time_complexity#Linearithmic.2Fquasilinear_time">linearithmic complexity</a>,
is very good property of algorithm. By the way, do not scare people with factorial sign.</p>

<ul>
  <li><strong>Overflow prevention</strong></li>
</ul>

<p>If you try to calculate <code>ln(n!)</code> with most straightforward implementation
without suitable datatype, you’ll likely get the number overflow exception, in spite
of result value is not very large. For example for <code>n=100</code> overall result is
approximately <code>363</code> (<em>Stirling’s approximation gives 361</em>) where factorial value is $10^{154}$.</p>

<ul>
  <li><strong>Speedup</strong></li>
</ul>

<p>As far as I know, calculating factorial is <code>O(n)</code> complexity algorithm,
because we need <code>n</code> multiplications. Using Stirling’s approximation we need to calculate $n^n$ term, that can
be calculated in <code>O(log n)</code> with <a href="http://en.wikipedia.org/wiki/Exponentiation_by_squaring">clever trick</a></p>

<ul>
  <li><strong>Gamma function</strong></li>
</ul>

<p>It can be surprising, but factorials defined not only for positive integers.
So, for example <code>2.5!</code> is completely valid expression. <code>-6!</code> also. They can be calculated
using <a href="http://en.wikipedia.org/wiki/Gamma_function">Gamma-functions</a> for real numbers. Unfortunately, they are
pretty complicated, so people use Stirling’s formula instead.</p>

<ul>
  <li><strong>Partial applications</strong></li>
</ul>

<p>Almost everything that using factorials can use Stirling’s approximation. Permutations,
binomial coefficients, fractals, number theory and a huge amount of topics I’m not aware of.</p>

<p><strong>P.S.</strong> Stirling’s formula presented here is rough enough. More accurate formula is
$n! = \sqrt{2\pi} n^{n + 0.5}e^{-n}$.
Check its proof <a href="http://www.sosmath.com/calculus/sequence/stirling/stirling.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heisenberg Principle]]></title>
    <link href="http://mishadoff.github.com/blog/heisenberg-principle/"/>
    <updated>2013-02-21T00:24:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/heisenberg-principle</id>
    <content type="html"><![CDATA[<p>It is so obvious, so I decided to write about it.</p>

<!-- more -->

<p><img src="http://i.imgur.com/pxxRKNR.jpg" alt="" /></p>

<p><a href="http://en.wikipedia.org/wiki/Uncertainty_principle">Heisenberg principle</a>
came from quantum mechanics and means that you can’t know exactly
both coordinates and speed of particle. If you improve accuracy of detecting
position, you lose accuracy in detecting speed and vice versa. <em>Uncertain</em> stuff.</p>

<p>In human-readable form it sounds like</p>

<blockquote>
  <p>Either one or the other</p>
</blockquote>

<p>The same in every field, even in software engineering.
If you implementing something or fixing bugs and your boss
yelling: “you must work <a href="http://www.youtube.com/watch?v=gAjR4_CbPpQ">better and faster</a>”
tell him <em>either one or the other</em>.</p>

<p><strong>P.S.</strong> Actually, you can say “go fuck yourself”, but it won’t be polite.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 015]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-015/"/>
    <updated>2013-02-19T00:38:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-015</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Starting in the top left corner of a 2 x 2 grid, there are 6 routes
(without backtracking) to the bottom right corner.</p>

  <p>How many routes are there through a 20 x 20 grid?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=15">http://projecteuler.net/problem=15</a></p>

<!-- more -->

<p><img src="http://projecteuler.net/project/images/p_015.gif" alt="" /></p>

<p>Picture is always a huge help to find correct the solution.
Let’s see the pattern here, with another picture</p>

<p><em>Warning:</em> If you don’t understand art, don’t look at that picture.</p>

<p><img src="http://i.imgur.com/WNEQNxG.png" alt="" /></p>

<p>It’s a solution for 3 x 3 grid. We trying to process it by steps:</p>

<ul>
  <li>At the start we located at the top left corner <code>[0, 0]</code>. There is just one case
to be at the start so we put <code>1</code> to that point.</li>
  <li>Then we move either down <code>[1, 0]</code> or right <code>[0, 1]</code>, and we put <code>1</code>
on the edges of the second diagonal line.</li>
  <li>Obviously, the point <code>[1, 1]</code> we can reach either from <code>[0, 1]</code> or from <code>[1, 0]</code>,
so there are two routes, and so on.</li>
</ul>

<p>If you just output the numbers from each diagonal line you’ll get:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   1
</span><span class="line">  1 1
</span><span class="line"> 1 2 1
</span><span class="line">1 3 3 1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s famous <a href="http://en.wikipedia.org/wiki/Pascal%27s_triangle">Pascal’s triangle</a>.
Each element in this triangle obtained by sum of two closest elements from the upper row.</p>

<p>To get desired result we need to sum these numbers again, until we get one number.
But it’s also numbers from Pascal’s triangle.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1   3   3   1
</span><span class="line">  4   6   4
</span><span class="line">   10  10
</span><span class="line">     20</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can treat Pascal’s triangle as a sequence, and each row is an element. Then the
following function calculates next row:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">routes-extend</span> <span class="p">[</span><span class="nv">lst</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">size</span> <span class="p">(</span><span class="nb">count </span><span class="nv">lst</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="p">(</span><span class="nb">inc </span><span class="nv">size</span><span class="p">))]</span>
</span><span class="line">      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">size</span> <span class="nv">i</span><span class="p">))</span> <span class="mi">1</span>
</span><span class="line">        <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">nth </span><span class="nv">lst</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">i</span><span class="p">))</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">lst</span> <span class="nv">i</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Usage:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">routes-extend</span> <span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="nv">=&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="p">(</span><span class="nf">routes-extend</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">])</span> <span class="nv">=&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we can build infinite sequence of Pascal’s triangle rows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">iterate </span><span class="nv">routes-extend</span> <span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For <code>3 x 3</code> grid we had 7 diagonals, each of them represented one row.
Take a guess. For <code>n x n</code> grid we need to get <code>2 * n + 1</code> row. And take it
middle element, which, of course, will be with the index <code>n</code>.</p>

<p>That’s the final solution:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">n</span> <span class="mi">20</span> <span class="nv">d</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="mi">2</span><span class="p">))]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">nth </span><span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nb">take </span><span class="nv">d</span> <span class="p">(</span><span class="nb">iterate </span><span class="nv">routes-extend</span> <span class="p">[</span><span class="mi">1</span><span class="p">])))</span> <span class="nv">n</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Problem solved.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem015.clj">Code</a></p>

<p><strong>P.S</strong> Two points I want to admit here. First of all, drawing pictures
and trying to understand problem with pictures is a powerful technique that must be
used for every problem.</p>

<p>Second of all, you can see that our algorithm has complexity of <code>O(n^2)</code>. But ideal
solution is <code>O(1)</code> with usage <a href="http://en.wikipedia.org/wiki/Binomial_coefficient">binomial coefficient</a>
<code>(2*n, n)</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standard ML]]></title>
    <link href="http://mishadoff.github.com/blog/standard-ml/"/>
    <updated>2013-02-16T13:33:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/standard-ml</id>
    <content type="html"><![CDATA[<p>Last weekend I was hacking <a href="http://en.wikipedia.org/wiki/Standard_ML">Standard ML</a> a bit.</p>

<!-- more -->

<h3 id="coursera">Coursera</h3>

<p>There are excellent course on coursera called <a href="https://class.coursera.org/proglang-2012-001/class/index">Programming Languages</a></p>

<p>Currently, the first half is available, that explains basic and advanced functional programming constructions
with Standard ML as primary language. Later some idioms will be presented using
<strong>Racket</strong> and <strong>Ruby</strong> (<em>maybe, I will finally understand ruby</em>) so you can treat this course as introduction
to these languages. In fact, it teaches much more than “<em>how to code in XXX</em>”.</p>

<h3 id="tools">Tools</h3>

<p>For playing with ML you need <a href="http://www.smlnj.org/">SML/NJ</a> compiler and
<a href="http://www.smlnj.org/doc/Emacs/sml-mode.html">sml-mode</a> for emacs.</p>

<p><em>If you don’t have emacs installed, do it right now!</em></p>

<h3 id="play">Play</h3>

<p>Following snippets give you basic understanding of ML or
refresh your knowledge for syntax.</p>

<p>Print “Hello, world!”:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">print_hello_world</span> <span class="p">()</span> <span class="p">=</span> <span class="n">print</span> <span class="s2">&quot;Hello, world</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Variables (<em>in fact, values</em>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">val</span> <span class="nv">a</span> <span class="p">=</span> <span class="mi">38</span><span class="p">;</span>
</span><span class="line"><span class="kr">val</span> <span class="nv">b</span> <span class="p">=</span> <span class="n">a</span> <span class="n">+</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line"><span class="kr">val</span> <span class="nv">c</span> <span class="p">=</span> <span class="n">b</span> <span class="n">+</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Conditionals:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">val</span> <span class="nv">cond</span> <span class="p">=</span> <span class="kr">if</span> <span class="mi">5</span> <span class="n">&gt;</span> <span class="mi">4</span> <span class="kr">then</span> <span class="mi">5</span> <span class="kr">else</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Boolean operators have terrible names:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">val</span> <span class="nv">cond2</span> <span class="p">=</span> <span class="kr">if</span> <span class="mi">5</span> <span class="n">&gt;</span> <span class="mi">4</span> <span class="kr">andalso</span> <span class="mi">4</span> <span class="n">&gt;</span> <span class="mi">5</span> <span class="kr">then</span> <span class="mi">5</span> <span class="kr">else</span> <span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Function with one parameter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">square</span> <span class="n">x</span> <span class="p">=</span> <span class="n">x</span> <span class="n">*</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Function with more than one parameter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">sum</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="p">=</span> <span class="n">x</span> <span class="n">+</span> <span class="n">y</span> <span class="n">+</span> <span class="n">z</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Actually, it’s not three parameters, it’s one parameter - tuple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">swap</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To access tuple elements use hash-number, note you can specify tuple type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">get_month</span> <span class="p">(</span><span class="n">date</span> <span class="p">:</span> <span class="n">int</span> <span class="n">*</span> <span class="n">string</span> <span class="n">*</span> <span class="n">int</span><span class="p">)</span> <span class="p">:</span> <span class="n">string</span><span class="p">=</span> <span class="p">(</span><span class="nl">#2</span> <span class="n">date</span><span class="p">)</span>
</span><span class="line"><span class="kr">val</span> <span class="nv">month1</span> <span class="p">=</span> <span class="n">get_month</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="s2">&quot;January&quot;</span><span class="p">,</span> <span class="mi">21</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can specify input types and return type, but ML is very clever. Almost always
it can detect correct type using <em>type inference</em> without explicit definition.</p>

<p><em>I don’t understand it! Explain, please</em>. Comments:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="cm">(* Operation &#39;*&#39; defined for int types, so this function has type int -&gt; int *)</span>
</span><span class="line"><span class="kr">fun</span> <span class="nf">cube</span> <span class="n">x</span> <span class="p">=</span> <span class="n">x</span> <span class="n">*</span> <span class="n">x</span> <span class="n">*</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There is records. It’s like named tuples.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">get_month_real</span> <span class="p">({</span><span class="n">year</span><span class="p">,</span> <span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="p">})</span> <span class="p">=</span> <span class="n">month</span>
</span><span class="line"><span class="kr">val</span> <span class="nv">month2</span> <span class="p">=</span> <span class="n">get_month_real</span><span class="p">({</span><span class="n">year</span><span class="p">=</span><span class="mi">2012</span><span class="p">,</span> <span class="n">month</span><span class="p">=</span><span class="s2">&quot;January&quot;</span><span class="p">,</span> <span class="n">day</span><span class="p">=</span><span class="mi">21</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using <code>let</code> form we can define new lexical scope:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">add3</span> <span class="n">x</span> <span class="p">=</span>
</span><span class="line">    <span class="kr">let</span>
</span><span class="line">        <span class="kr">val</span> <span class="nv">num</span> <span class="p">=</span> <span class="mi">3</span>
</span><span class="line">    <span class="kr">in</span>
</span><span class="line">        <span class="n">x</span> <span class="n">+</span> <span class="mi">3</span>
</span><span class="line">    <span class="kr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This leads to closures (<em>function + context</em>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">add3</span> <span class="n">x</span> <span class="p">=</span>
</span><span class="line">    <span class="kr">let</span>
</span><span class="line">        <span class="kr">val</span> <span class="nv">num</span> <span class="p">=</span> <span class="mi">3</span>
</span><span class="line">        <span class="kr">fun</span> <span class="nf">add_to</span> <span class="n">x</span> <span class="p">=</span> <span class="n">x</span> <span class="n">+</span> <span class="n">num</span>
</span><span class="line">    <span class="kr">in</span>
</span><span class="line">        <span class="n">add_to</span> <span class="n">x</span>
</span><span class="line">    <span class="kr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Function <code>add_to</code> capture <code>num</code> value from context.</p>

<p>By the way functions are first-class objects and values also,
so we can assign one function to another:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">val</span> <span class="nv">another_cube</span> <span class="p">=</span> <span class="n">cube</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Function composition becomes a piece of cake:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">val</span> <span class="nv">cube_and_cube</span> <span class="p">=</span> <span class="n">cube</span> <span class="n">o</span> <span class="n">cube</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We even can pass function as a parameter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">binary_apply</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line"><span class="n">binary_apply</span><span class="p">(</span><span class="n">swap</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We don’t forced to provide function name, we can use lambdas:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="n">binary_apply</span><span class="p">(</span><span class="kr">fn</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="n">*</span> <span class="n">y</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">46</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This helps us easily implement such useful functions as <code>map</code>, <code>reduce</code> and <code>filter</code>.
But they are already available in
<a href="http://www.standardml.org/Basis/manpages.html">Standard ML Basis Library</a></p>

<p>Another great feature is <em>pattern-matching</em>. Here is factorial function</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">factorial</span> <span class="n">x</span> <span class="p">=</span>
</span><span class="line">    <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span>
</span><span class="line">        <span class="mi">0</span> <span class="p">=&gt;</span> <span class="mi">1</span>
</span><span class="line">      <span class="n">|</span> <span class="p">_</span> <span class="p">=&gt;</span> <span class="n">x</span> <span class="n">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">x</span> <span class="n">-</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or list concatenation</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">fun</span> <span class="nf">concat</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=</span>
</span><span class="line">    <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span>
</span><span class="line">        <span class="p">[]</span> <span class="p">=&gt;</span> <span class="n">y</span>
</span><span class="line">      <span class="n">|</span> <span class="n">x::xs</span> <span class="p">=&gt;</span> <span class="n">x::concat</span><span class="p">(</span><span class="n">xs</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Honestly, it’s just baby examples of pattern matching. In fact, it is much more
powerful.</p>

<p>And the last thing I wanted to show is datatypes:</p>

<p>To define a list:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">datatype</span> <span class="nd">&#39;a</span> <span class="kt">list</span> <span class="p">=</span> <span class="nc">EMPTY</span> <span class="p">|</span> <span class="nc">CONS</span> <span class="kr">of</span> <span class="nd">&#39;a</span> <span class="n">*</span> <span class="nd">&#39;a</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To create that list:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sml"><span class="line"><span class="kr">val</span> <span class="nv">list</span> <span class="p">=</span> <span class="n">CONS</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">CONS</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">CONS</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">EMPTY</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s very small part of all that can be done in ML. There are also a lot of useful
constructs and idioms that not covered: type synonyms, polymorphic types,
equality types, tail recursion, mutual recursion, function wrapping,
currying, partial application, advanced pattern matching, signatures,
modules and lot more.</p>

<p>If you really interested you will find a lot of these terms exciting.</p>

<p>Full code is available on
<a href="https://github.com/mishadoff/prog-experiment/blob/master/sml/play.sml">github</a></p>

<h3 id="impressions">Impressions</h3>

<p>ML is a great language. Perhaps, it is not so great as Java in enterprise, and not
so great as Clojure in rapid prototyping, but it’s worth to devote
few days for ML basics. It really improve your dev skills and maybe made your
<em>Factories</em>, <em>Bridges</em> and <em>Proxies</em> better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 014]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-014/"/>
    <updated>2013-02-16T01:08:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-014</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Which starting number, under one million, produces the longest Collatz chain?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=14">http://projecteuler.net/problem=14</a></p>

<!-- more -->

<blockquote>
  <p>The following iterative sequence is defined for the set of positive integers:</p>

  <p>n → n/2 (n is even)</p>

  <p>n → 3n + 1 (n is odd)</p>

  <p>Using the rule above and starting with 13, we generate the following sequence:</p>

  <p>13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</p>

  <p>It can be seen that this sequence (starting at 13 and finishing at 1)
contains 10 terms. Although it has not been proved yet (Collatz Problem),
it is thought that all starting numbers finish at 1.</p>

  <p>Which starting number, under one million, produces the longest chain?</p>

  <p>NOTE: Once the chain starts the terms are allowed to go above one million.</p>
</blockquote>

<p>Sequences again.
So, first of all we need function to detect next collatz number.
It is pretty straightforward:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">collatz-next</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">even?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="mi">3</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using this <em>next-element-generator</em> we can generate infinite collatz sequence,
starting from number <code>n</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">iterate </span><span class="nv">collatz-next</span> <span class="nv">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But instead of infinite sequence, we stop processing when we reach <code>1</code> and calculate
count of collatz chain sequence:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">collatz-chain-length</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">take-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">%</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">iterate </span><span class="nv">collatz-next</span> <span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we have almost all code logic and just use it: calculate collatz chain
for all numbers in range <code>[1..1000000]</code>, find maximum and output its index:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nb">second </span><span class="nv">%1</span><span class="p">)</span> <span class="p">(</span><span class="nb">second </span><span class="nv">%2</span><span class="p">))</span> <span class="nv">%1</span> <span class="nv">%2</span><span class="p">)</span>
</span><span class="line">               <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">list </span><span class="nv">%</span> <span class="p">(</span><span class="nf">collatz-chain-length</span> <span class="nv">%</span><span class="p">))</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1000000</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Run it. Wait a minute. I mean minute <em>literally</em>.</p>

<p>The time of caclulation is slightly greater than <strong>one minute</strong> on my machine,
and I have no idea how to solve it another way.</p>

<p>I am sure there is a better algorithm than mine. But I don’t know it.
What I know is try to re-read problem definion if you are stuck. Especially that part:</p>

<blockquote>
  <p>13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</p>
</blockquote>

<p>So, for <code>13</code> the chain length is <code>10</code>, for <code>40</code> is <code>9</code>, for <code>20</code> is <code>8</code>,…</p>

<p>Got it?</p>

<p>Each time we calculate length we perform <em>repeated calculation</em>. If we know
chain length of <code>13</code>, and whole its path to <code>1</code> we don’t need to calculate length
for <code>40</code>, <code>20</code> and so on.</p>

<p>So the optimization is <em>somehow to cache the results</em>. But at first we need to rewrite
it to have recursive solution.</p>

<p>Here the first (<em>and final</em>) version:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">collatz-chain-recursive</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">      <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nf">collatz-chain-recursive</span> <span class="p">(</span><span class="nf">collatz-next</span> <span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Recursion is impressive at the point that its implementation
almost exactly follows the problem definition. It is easy to understand.</p>

<p>But, as you may notice our implementation not
<a href="http://en.wikipedia.org/wiki/Tail_call">tail-recursive</a> so we can
have troubles. Do not think about it unless we actually have them.</p>

<p>For the sake of fun let’s run this function instead of previous to
obtain the results.</p>

<p><strong>20 seconds</strong>, it is great. I even don’t think that
this simple recursive function gives such boost in performance.</p>

<p>One little tweak in result function:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">first</span>
</span><span class="line">  <span class="p">(</span><span class="nb">apply max-key </span><span class="nv">second</span>
</span><span class="line">         <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">list </span><span class="nv">%</span> <span class="p">(</span><span class="nf">collatz-chain-recursive</span> <span class="nv">%</span><span class="p">))</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1000000</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And we have <strong>~12 seconds</strong>.</p>

<p>Unexpected “The End”. Yeah, I love The Doors.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem014.clj">code-code</a></p>

<p><strong>P.S.</strong> I really wanted to explain technique called
<a href="http://en.wikipedia.org/wiki/Memoization">memoization</a> and
simple clojure function <a href="http://clojuredocs.org/clojure_core/clojure.core/memoize">memoize</a>,
but seems that caching result doesn’t have much sense here because
12 seconds is acceptable. We will have chance to introduce
memoization later, where it will be more useful. By the way, I am <em>lazy</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 1]]></title>
    <link href="http://mishadoff.github.com/blog/programming-digest-1/"/>
    <updated>2013-02-12T02:00:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/programming-digest-1</id>
    <content type="html"><![CDATA[<p>How to get job at Google, estimate complexity of your algorithm,
what is <em>Structural Immutability</em>, why PHP is awful and Java is awesome, best programming jokes and lot more.</p>

<!-- more -->

<h3 id="get-that-job-at-googlehttpsteve-yeggeblogspotcom200803get-that-job-at-googlehtml">1. <a href="http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html">Get that job at Google</a></h3>

<blockquote>
  <p>…it’s highly likely that someone on the loop will be unimpressed with you,
even if you are Alan Turing. Especially if you’re Alan Turing,
in fact, since it means you obviously don’t know C++</p>
</blockquote>

<p>The quote accurately explains what this post about. The author gives great mental and
technical tips about interviewing process (not only in Google).
Big portion of motivation guaranteed, perhaps you man feel dumber after reading.</p>

<p>In few words, you must know: algorithm complexity, sorting, hashtables, trees,
graphs, other data structures, math, operating systems and at least one programming language very well.
Not bad, right? After reading that article I’ve build long-term learning plan for myself, which is still
not succesful. Great article.</p>

<h3 id="a-gentle-introduction-to-algorithm-complexity-analysishttpdiscretegrcomplexity">2. <a href="http://discrete.gr/complexity/">A Gentle Introduction to Algorithm Complexity Analysis</a></h3>

<p>This article helps you partially cover first thing from previous article: <em>algorithm complexity</em>.
By the way, it is written with understandable (<em>for programmers</em>) language, examples, pictures, excerpts - I like
such style.</p>

<p>After reading, you’ll understand what time/space complexity is, difference between <em>Theta</em> and <em>Big-O</em> notations,
recursive functions complexity and lot more. By the way, you will learn basic classes of time complexities, and get
skill to classify that complexities on O(n), O(n^2 ), O(n*logn), etc. Note, the articles consists of some excercises, which immediately followed
with solutions. It is more productive to solve this exercises by yourselves and then compare to solutions.</p>

<p>If you already know all that, don’t skip! It also helpful to fresh you knowledge.</p>

<h3 id="on-structural-immutabilityhttpclojurefunwordpresscom20130121on-structural-immutability">3. <a href="http://clojurefun.wordpress.com/2013/01/21/on-structural-immutability/">On Structural Immutability</a></h3>

<p>What is Structural Immutability?</p>

<p>We know difference between mutable and immutable data structures and their pros and cons.
Structural immutability means that you <em>can</em> change the contents of you data, but <em>can not</em> change their structure.
It gives better performance than plain immutable objects, but also keep your concurrent programs easier than with
full mutability. Plain old array is an example. Read it to know more.</p>

<h3 id="php-a-fractal-of-bad-designhttpmeveekuncomblog20120409php-a-fractal-of-bad-design">4. <a href="http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/">PHP: a fractal of bad design</a></h3>

<blockquote>
  <p>Virtually every feature in PHP is broken somehow</p>
</blockquote>

<p>Whole article is a criticism of bad PHP language design.</p>

<blockquote>
  <p>PHP was originally designed explicitly for non-programmers (and, reading between the lines, non-programs)</p>
</blockquote>

<p>Total destroy. I mean it - total.</p>

<blockquote>
  <p>Array… This one datatype acts as a list, ordered hash, ordered set,
sparse list, and occasionally some strange combination of those.
How does it perform? What kind of memory use will there be?
Who knows? Not like I have other options, anyway.</p>
</blockquote>

<p>As I never know PHP, and hope won’t, that article was one of the funniest things I ever read.</p>

<blockquote>
  <p>equality operator is not transitive…comparison is not even consistent</p>
</blockquote>

<p>If you PHPist don’t go away, just read it. Maybe it will change your life.</p>

<blockquote>
  <p>Genericism… There is none. If a function might need to do two slightly different things, PHP just has two functions.</p>
</blockquote>

<p>Stop quoting. Just read it.</p>

<h3 id="do-not-pass-this-way-againhttpgrimoirecamysqlchoose-something-else">5. <a href="http://grimoire.ca/mysql/choose-something-else">Do Not Pass This Way Again</a></h3>

<blockquote>
  <p>Considering MySQL? Use something else. Already on MySQL? Migrate.</p>
</blockquote>

<p>This article logically continues previous one, but for now critisism on MySQL.
Perhaps, it is not powerful as PHP version, but still worth to read.</p>

<h3 id="big-arrays-in-javahttpwwwomsndeblogbig-arrays-in-java">6. <a href="http://www.omsn.de/blog/big-arrays-in-java">Big arrays in Java</a></h3>

<p>Two articles of hate in a row, and currently Java? No way.
How much we hate Java so we love it. By the way, JDK8 is soon.</p>

<p>Maybe this post not so expressive as previous ones, but it reveals capability I never knew of.
How to create array in Java with size greater than <code>Integer.MAX_VALUE</code>. Use the undocumented
class <code>sun.misc.Unsafe</code>. Just note this only works in SunJDK and OpenJDK.</p>

<h3 id="state-of-the-lambdahttpcropenjdkjavanetbriangoetzlambdalambda-state-4html">7. <a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-4.html">State of the Lambda</a></h3>

<p>If we started about JDK8…</p>

<p>The most interesting feature set in expected JDK8 is Project Lambda.</p>

<p>Functional interfaces and functions without all that finals in lexical scope and anonymous classes,
common patterns for list processing like <code>map</code>, <code>reduce</code> and <code>filter</code>,
parallelism, streams, method references and lot more comming soon.</p>

<p><em>What is the default method implementation in the interface?!</em></p>

<h3 id="fantastic-game-development-tutorials-from-across-the-webhttpgamedevtutspluscomarticlesroundupsfantastic-gamedev-tutorials-from-across-the-web">8. <a href="http://gamedev.tutsplus.com/articles/roundups/fantastic-gamedev-tutorials-from-across-the-web/">40+ Fantastic Game Development Tutorials From Across the Web</a></h3>

<p>Have you ever had the passion to write your own game?</p>

<p>I had. Because I like games and I even tried. Unfortunately, not so succesful as expected, but anyway.</p>

<blockquote>
  <p>We need to go deeper</p>
</blockquote>

<p>Honestly, it’s not a joke that I post link to another digest. It gathers a lot of gamedev tutorials and if
you really interested in gamedev, you’ll find a lot of there including game algorithms,
popular engine tutorials, math behind the games, design questions and more useful tips. Great stuff.</p>

<h3 id="how-to-pair-socks-from-a-pile-efficientlyhttpstackoverflowcomquestions14415881how-to-pair-socks-from-a-pile-efficiently">9. <a href="http://stackoverflow.com/questions/14415881/how-to-pair-socks-from-a-pile-efficiently">How to pair socks from a pile efficiently?</a></h3>

<p>Bored to pair your socks every time? Learn how to do it efficiently.</p>

<p>At first glance it is a humorous question, indeed it is, but also it is an interesting real-world
problem with variety of algorithms can be applied. I think all algorithm courses should be teached
that way.</p>

<h3 id="what-is-your-best-programming-jokehttpstackoverflowcomquestions234075what-is-your-best-programmer-joke1284458">10. <a href="http://stackoverflow.com/questions/234075/what-is-your-best-programmer-joke/1284458">What is your best programming joke</a></h3>

<blockquote>
  <p>If you put a million monkeys at a million keyboards, one of them will eventually write a Java program.</p>

  <p>The rest of them will write Perl programs.</p>
</blockquote>

<p>If you have an hour or two reserved for laughing, just read this. A <strong>lot</strong> of
crazy programming jokes. Stackoverflow community is amazing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest Announcement]]></title>
    <link href="http://mishadoff.github.com/blog/programming-digest-announcement/"/>
    <updated>2013-02-11T23:00:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/programming-digest-announcement</id>
    <content type="html"><![CDATA[<p>Recently, I come up with idea to share my favorite articles I found
on the internet and give basic description for them.</p>

<!-- more -->

<p>I do not plan this <em>digest</em> as periodical thing,
so the first pattern I found appropriate is to publish this as soon
as I have ten articles marked as <em>favorite</em> somewhere.</p>

<p>That’s the rule: <strong>each post - 10 articles</strong>.</p>

<p><em>Favorite</em> means <em>really favorite</em>, so I do not crosspost every article I’ve read.</p>

<p>Hard to say what topics will be covered.
I call it <em>programming digest</em> because most of articles will be somehow
related to programming, but do not blame me if you see articles with another
topic (math or humour), believe me they can be interesting also.</p>

<p>By the way, a lot of articles may be old, even very old (<em>don’t call me Necromancer</em>)
but if they appear here, I found them somehow relevant and important to post.</p>

<p>Hope, you’ll find such sort of digest is interesting for reading and I like if you
share your favorite <em>programming-related</em> articles with me.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Analysis: Facebook Hacker Cup 2013]]></title>
    <link href="http://mishadoff.github.com/blog/data-analysis-facebook-hacker-cup/"/>
    <updated>2013-02-01T12:42:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/data-analysis-facebook-hacker-cup</id>
    <content type="html"><![CDATA[<p>What programming language is most used?</p>

<!-- more -->

<p>To answer this question we use results from the qualification round
of <a href="https://www.facebook.com/hackercup">Facebook Hacker Cup 2013</a></p>

<p>If you only interested in statistics, <a href="#stats">skip!</a></p>

<h3 id="intro">0. Intro</h3>

<p>As you may know, Facebook Hacker Cup is a programming contest. You have programming
problem and you need to solve it, in most cases in efficient way. You get input file
and you need to submit the output file in less than 6 minutes. Pretty simple.
The interesting part you need to submit your source code, that can be reviewed by
any of contestants after round.</p>

<p>These sources we use to get programming language statistics.</p>

<h3 id="data">1. Data</h3>

<p>Primary resource in statistics is data.</p>

<p>We have <a href="https://www.facebook.com/hackercup/scoreboard?round=185564241586420">scoreboard</a> page
(<em>You must be logged to FB to see results</em>) and interested in all links named <em>source</em>.
Open every link manually takes much time, so we will use automated approach
and will write program. Yes, in clojure.</p>

<h4 id="dependencies">Dependencies</h4>

<p>For facebook authentification we can use:</p>

<ul>
  <li><a href="https://github.com/DerGuteMoritz/clj-oauth2">OAuth authentification</a></li>
  <li><a href="https://developers.facebook.com/">Facebook app</a></li>
  <li><a href="http://seleniumhq.org/">Selenium</a></li>
</ul>

<p>I didn’t think too much about alternatives,
because I wanted to try selenium in clojure. It’s a time!</p>

<p>In few words, selenium provides capability to perform programmatically
browser events. Often used in automation. To use selenium in clojure program
just add <code>[clj-webdriver "0.6.0-beta2"]</code> to your project dependencies.</p>

<p>To simplify HTTP GET access we use library <code>[clj-http "0.6.3"]</code> and for
additional help <code>[org.clojure/clojure-contrib "1.2.0"]</code>.</p>

<p>In code we use following <em>requires</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-http.client</span> <span class="ss">:as</span> <span class="nv">http</span><span class="p">])</span>
</span><span class="line"><span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-webdriver.taxi</span> <span class="ss">:as</span> <span class="nv">web</span><span class="p">])</span>
</span><span class="line"><span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-webdriver.core</span> <span class="ss">:as</span> <span class="nv">c</span><span class="p">])</span>
</span><span class="line"><span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.contrib.math</span> <span class="ss">:as</span> <span class="nv">math</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="automation">Automation</h4>

<p>Before we will automate actions to gather sources we need to decide
what these actions are?</p>

<ul>
  <li>Run browser</li>
  <li>Open facebook url</li>
  <li>Login to facebook
    <ul>
      <li>Enter login</li>
      <li>Enter password</li>
      <li>Press submit</li>
    </ul>
  </li>
  <li>Go to scoreboard page</li>
  <li>Process each page <code>loop [1..n]</code>
    <ul>
      <li>Go to page <code>n</code></li>
      <li>Get all links</li>
      <li>Filter links with sources</li>
      <li>Process each link <code>loop [1..k]</code>
        <ul>
          <li>Go to link url <code>k</code></li>
          <li>Get all page source</li>
          <li>Filter out source code</li>
          <li>Generate file name</li>
          <li>Write source to file</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>Pretty clear, right? Let’s code it sequentially.</p>

<h4 id="implementation">Implementation</h4>

<ul>
  <li><em>Run browser</em> and <em>Open facebook url</em></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">web/set-driver!</span> <span class="p">{</span><span class="ss">:browser</span> <span class="ss">:firefox</span><span class="p">}</span> <span class="s">&quot;http://facebook.com&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><em>Login to facebook</em></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">web/input-text</span> <span class="s">&quot;#email&quot;</span> <span class="nv">username</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">web/input-text</span> <span class="s">&quot;#pass&quot;</span> <span class="nv">password</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">web/submit</span> <span class="s">&quot;#pass&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><em>Go to scoreboard page</em></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">web/to</span> <span class="s">&quot;https://www.facebook.com/hackercup/scoreboard?round=185564241586420&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><em>Process each page</em></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">page-num</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="mi">114</span><span class="p">))]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">process-page</span> <span class="nv">page-num</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Number of pages is hardcoded. It’s ok.
What is <code>process-page</code> method?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">process-page</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">url</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;https://www.facebook.com/hackercup/scoreboard?round=185564241586420&amp;page=&quot;</span> <span class="nv">n</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">web/to</span> <span class="nv">url</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">e</span> <span class="p">(</span><span class="nf">web/find-elements</span> <span class="p">{</span><span class="ss">:css</span> <span class="s">&quot;a&quot;</span><span class="p">})</span>
</span><span class="line">            <span class="ss">:let</span> <span class="p">[</span><span class="nv">url</span> <span class="p">(</span><span class="nf">c/attribute</span> <span class="nv">e</span> <span class="s">&quot;href&quot;</span><span class="p">)]</span>
</span><span class="line">            <span class="ss">:when</span> <span class="p">(</span><span class="nb">and </span><span class="nv">url</span> <span class="p">(</span><span class="nf">.startsWith</span> <span class="nv">url</span> <span class="s">&quot;https://fbcdn-dragon-a.akamaihd.net/&quot;</span><span class="p">))]</span>
</span><span class="line">      <span class="p">(</span><span class="nf">process-url</span> <span class="nv">url</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First of all,  we concat scoreboard link with page number to get actual link to each page.
Then we go to that page obtain all <code>a</code> elements, get their <code>href</code> values and filter
to save only ones that contain source code.</p>

<ul>
  <li><em>Process each url</em></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">process-url</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">source-code</span> <span class="p">(</span><span class="ss">:body</span> <span class="p">(</span><span class="nf">http/get</span> <span class="nv">url</span><span class="p">))</span>
</span><span class="line">        <span class="nv">file-name</span> <span class="p">(</span><span class="nf">generate-filename</span> <span class="nv">url</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">spit</span> <span class="nv">file-name</span> <span class="nv">source-code</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this part we obtain html source of url and get its <code>:body</code> tag.
As all source urls contain just plain text, we don’t need additional
filtering. Just save it to file.</p>

<ul>
  <li><em>Generate file name</em></li>
</ul>

<p>I don’t want to name file as url. That’s why for naming we use following
function: <code>timestamp + underscore + absolute value of url hashcode</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">generate-filename</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">str </span><span class="nv">DIRECTORY</span> <span class="p">(</span><span class="nf">System/currentTimeMillis</span><span class="p">)</span> <span class="s">&quot;_&quot;</span> <span class="p">(</span><span class="nf">math/abs</span> <span class="p">(</span><span class="nf">hash</span> <span class="nv">url</span><span class="p">))</span> <span class="s">&quot;.txt&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>DIRECTORY</code> is just <code>def</code> for folder where you want to place all sources.</p>

<p>Whole script source available <a href="https://github.com/mishadoff/clj-statistic-tools/blob/master/src/clj_statistic_tools/fbhackercup2013.clj">here</a></p>

<h4 id="execution">Execution</h4>

<p>To run that script you need to write in clojure REPL
<code>(run "username" "password")</code>, with correct values for <em>username</em> and <em>password</em>, obviously.</p>

<p>It works some time. <em>Some time</em> equals to eight hours on my machine. Long enough.
But it’s ideal time for <em>night crawling</em>!</p>

<p>In the morning I had all work done.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nv">ls</span> <span class="mi">-1</span> <span class="err">|</span> <span class="nv">wc</span> <span class="nv">-l</span> <span class="o">&amp;&amp;</span> <span class="nv">du</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>prints</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="mi">20348</span>
</span><span class="line"><span class="mi">291120</span>  <span class="nv">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Good sign. We have more than 20K of source codes with total size almost 300Mb.</p>

<h3 id="analysis">2. Analysis</h3>

<p>Data is good. But no one interested in raw data, so we need process it.</p>

<p>Basically, we need to detect programming language by source file.
No extensions.</p>

<p>You can <a href="https://www.bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html">write your own classifier</a>
or use some existing tool.</p>

<p>I did few-minutes research on this topic and found
<a href="https://github.com/github/linguist">linguist</a> project.
It is written in <em>Ruby</em> and used in <a href="https://gist.github.com/">Gist</a> to
detect snippet language. Exactly what we need!</p>

<p><em>Unfortunately, I do not know ruby. I even could not build and run linguist classifier to
detect language in my files. Rvm, gems and modules driving me crazy. I surrendered.</em></p>

<p>Another solution to use javascript library <a href="http://softwaremaniacs.org/soft/highlight/en/">Highlight.js</a>.
It is used in syntax coloring, but have automatic language detection. Again, javascript and
reading files from filesystem… Don’t tell me about Node.js</p>

<p>I decided to write my own “classifier”. Honestly, it’s just regexp matching mechanism
on common language constructions: keywords, imports, most used functions, etc.</p>

<p>Iterative approach has been used.</p>

<p>Select some popular language construction say <code>#include &lt;iostream&gt;</code> and filter it as <code>C</code>. After filtering
we detect some subset of <code>C</code> language, remove them from all files list and repeat again with another construction.</p>

<p><em>I don’t know how <code>C++</code> different from <code>C</code>, so I accept them both as interchangeable languages but call it <code>C/C++</code>.
By the way, <code>C - C++ = 0</code>, so we assume they are equal.</em></p>

<p>I developed some number of patterns (they can be reviewed
<a href="https://github.com/mishadoff/clj-statistic-tools/blob/master/src/clj_statistic_tools/fbhackercup2013.clj">here</a>)
and processed all gathered source files.</p>

<p>Unfortunately, not all files were processed succesfully. I reviewed approximately 2000 files manually, few
new languages were detected but big amount of them were the crap: input data, binary files, some text information.</p>

<p>I think we don’t lose too much if we say <em>only 99% of files were processed</em>.</p>

<h3 id="a-idstatsa3-statistics"><a id="stats"></a>3. Statistics</h3>

<p><img src="http://i.imgur.com/sWyfLqv.png" alt="" /></p>

<p>If you don’t like this visualization, you can create your own. Here is data:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nv">C/C++</span>          <span class="mi">10524</span>
</span><span class="line"><span class="nv">Java</span>            <span class="mi">3117</span>
</span><span class="line"><span class="nv">Python</span>          <span class="mi">3102</span>
</span><span class="line"><span class="nv">C#</span>              <span class="mi">1233</span>
</span><span class="line"><span class="nv">PHP</span>              <span class="mi">821</span>
</span><span class="line"><span class="nv">Ruby</span>             <span class="mi">488</span>
</span><span class="line"><span class="nv">Perl</span>             <span class="mi">142</span>
</span><span class="line"><span class="nv">Pascal/Delphi</span>    <span class="mi">136</span>
</span><span class="line"><span class="nv">Javascript</span>       <span class="mi">109</span>
</span><span class="line"><span class="nv">Haskell</span>           <span class="mi">85</span>
</span><span class="line"><span class="nv">Scala</span>             <span class="mi">72</span>
</span><span class="line"><span class="nv">Clojure</span>           <span class="mi">29</span>
</span><span class="line"><span class="nv">Go</span>                <span class="mi">28</span>
</span><span class="line"><span class="nv">Visual</span> <span class="nv">Basic</span>      <span class="mi">19</span>
</span><span class="line"><span class="nv">F#</span>                <span class="mi">12</span>
</span><span class="line"><span class="nv">Scheme</span>             <span class="mi">8</span>
</span><span class="line"><span class="nv">OCaml</span>              <span class="mi">7</span>
</span><span class="line"><span class="nv">Common</span> <span class="nv">Lisp</span>        <span class="mi">6</span>
</span><span class="line"><span class="nv">Lua</span>                <span class="mi">5</span>
</span><span class="line"><span class="nv">Matlab</span>             <span class="mi">4</span>
</span><span class="line"><span class="nv">Cocoa</span>              <span class="mi">3</span>
</span><span class="line"><span class="nv">Groovy</span>             <span class="mi">2</span>
</span><span class="line"><span class="nv">Dart</span>               <span class="mi">2</span>
</span><span class="line"><span class="nv">awk</span>                <span class="mi">1</span>
</span><span class="line"><span class="nv">Powershell</span>         <span class="mi">1</span>
</span><span class="line"><span class="nv">bash</span>               <span class="mi">1</span>
</span><span class="line"><span class="nv">Kotlin</span>             <span class="mi">1</span>
</span><span class="line"><span class="nv">ActionScript</span>       <span class="mi">1</span>
</span><span class="line"><span class="nv">Dylan</span>              <span class="mi">1</span>
</span><span class="line"><span class="nv">--------------------</span>
</span><span class="line"><span class="nv">crap</span>             <span class="mi">192</span>
</span><span class="line"><span class="nb">not </span><span class="nv">detected</span>     <span class="mi">196</span>
</span><span class="line"><span class="nv">--------------------</span>
</span><span class="line"><span class="nv">TOTAL</span>          <span class="mi">20348</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="conclusion">4. Conclusion</h3>

<ul>
  <li>Top 5 was predicted but it’s extremely crazy that C/C++ occur more than 50%</li>
  <li>Python has almost the same amount as Java</li>
  <li>Good occurence of functional languages: Haskell, F#, Scala, Clojure, Ocaml</li>
  <li>29 Clojure files that means there ~10 clojurists.</li>
  <li>Two languages I never heard of:
<a href="http://www.dartlang.org/">Dart</a> and
<a href="http://opendylan.org/">Dylan</a></li>
  <li><em>Parenthesis</em> languages still used: Common Lisp, Scheme and Clojure (of course)</li>
  <li>Respect to matlabists</li>
  <li>Few <em>exotic languages</em> used: awk, powershell, bash</li>
  <li><a href="http://kotlin.jetbrains.org/">Kotlin</a> becomes popular!</li>
</ul>

<p><em>Warning:</em> Do not treat this statistics as real-world pattern. It is a programming competition with
a lot of geeks, they can use all they want. Also do not blame their code for quality. It was created just for
correctness and speed. Pay attention to code quality in production, but always remember:</p>

<blockquote>
  <p>Your code may be elegant, by mine fucking works.</p>

  <p>– <a href="http://omniti.com/seeds/your-code-may-be-elegant">Leon Fayer</a>
<br /></p>
</blockquote>

<p><strong>P.S.</strong> First of all, it is not high-accurate statistics. As I am not
programming guru, I don’t know all possible languages’ constructions
so it is likely that one construction overlapped with another. In that case
only first one will be checked. Ideally, would be good to have language
detecting library in clojure for future analysis. <em>Maybe</em>, I will do it.
Second of all, code presented here is not beautiful, not optimized, have a lot
of hardcode, but it works. Just in the spirit of Facebook Hacker Cup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 013]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-013/"/>
    <updated>2013-01-25T16:33:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-013</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=13">http://projecteuler.net/problem=13</a></p>

<!-- more -->

<p><em>Assume, here is a huge amount of digits. In any case, you can always find them in permalink.</em></p>

<p>What is the problem to sum one-hundred numbers?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce + </span><span class="nv">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Done.</p>

<p>Are you kidding me? Not so fast. The question is <em>what type of number you must choose</em>
to sum all these numbers. <code>int</code>? <code>long</code>? <code>looooong</code>? <code>super long long</code>?</p>

<p>Technique to sum very long numbers called
<a href="http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic">Bignum arithmetic</a>.
To solve that problem you just need to implement this technique… or use already implemented.</p>

<p>Java (<em>yeah we talking about it</em>) support long arithmetics with
<a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html">BigInteger</a>.
And clojure does.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="nv">bigint</span> <span class="nv">numbers</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With that function you’ll get the big number.
Just truncate first 10 digits and you are good.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">apply str </span><span class="p">(</span><span class="nb">take </span><span class="mi">10</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="nv">bigint</span> <span class="nv">numbers</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(for [i “<a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem013.clj">GitHub</a>”] i)</p>

<p><strong>P.S.</strong> Ideally, last line should be wrapped
with <code>(read-string ...)</code> to produce number type. But we using
manual submission, so it is fair.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 012]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-012/"/>
    <updated>2013-01-22T19:45:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-012</id>
    <content type="html"><![CDATA[<blockquote>
  <p>What is the value of the first triangle number to have over five hundred divisors?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=12">http://projecteuler.net/problem=12</a></p>

<!-- more -->

<blockquote>
  <p>The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.</p>

  <p>The first ten terms would be:</p>

  <p>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …</p>

  <p>Let us list the factors of the first seven triangle numbers:</p>
</blockquote>

<pre><code> 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
</code></pre>

<blockquote>
  <p>We can see that 28 is the first triangle number to have over five divisors.</p>

  <p>What is the value of the first triangle number to have over five hundred divisors?</p>
</blockquote>

<p>When we see infinite sequence of some numbers, first thing that we do is implement it
with using <em>lazy sequences</em>. Simple explanation and example for Fibonacci numbers
can be found in <a href="http://mishadoff.github.com/blog/clojure-euler-problem-002">Clojure Euler: Problem 002</a>.</p>

<p>We have an easy case, so we implement triangle number as
sum of all integers below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">triangle-number</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">n</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Don’t miss the possibility reduce complexity from <code>O(n)</code> to <code>O(1)</code>.
Just apply <a href="http://en.wikipedia.org/wiki/Arithmetic_progression">arithmetic progression</a> formula.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">triangle-number</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Okey, we did small optimization (<em>not so small</em>) here and we have a function that calculates
triangle number for <code>n</code>. Let’s find all of them!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">triangles</span> <span class="p">(</span><span class="nb">map </span><span class="nv">triangle-number</span> <span class="p">(</span><span class="nb">iterate inc </span><span class="mi">1</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>triangles</code> refers to lazy sequence of <em>triangle numbers</em>.</p>

<blockquote>
  <p>Do not evaluate lazy seqs!</p>
</blockquote>

<p>Use limit functions as <code>take</code>, <code>take-while</code>, <code>drop</code>, <code>drop-while</code> to test the
sequence values, or build other lazy seqs with <code>filter</code>, <code>map</code>, etc.</p>

<p>Now, we need a function to calculate number of divisors.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">num-of-divisors</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">2</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nf">sqrt</span> <span class="nv">n</span><span class="p">))))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If we remember <a href="http://mishadoff.github.com/blog/clojure-euler-problem-003">Clojure Euler: Problem 003</a>
then we know that using <code>sqrt(n)</code> instead of <code>n</code> as upper bound for divisors
saves much time.
Don’t forget mutiply that value by two, as you skip number after <code>sqrt(n)</code>.</p>

<p>Last step: to calculate number over 500 divisors</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">drop-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">num-of-divisors</span> <span class="nv">%</span><span class="p">)</span> <span class="mi">500</span><span class="p">)</span> <span class="nv">triangles</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We got the result, but spent ~11 secs. Too much.</p>

<p><em>How can we improve our solution?</em></p>

<p>There is theorem about
<a href="http://en.wikipedia.org/wiki/Integer_factorization#Prime_decomposition">Prime Factorization</a>
states:</p>

<blockquote>
  <p>Every positive integer has a unique prime factorization</p>
</blockquote>

<p>For example: 15 = 3^1 * 5^1, 18 = 2^1 * 3^2 and so on.</p>

<p>Not hard to see that number of divisors from such factorization can be obtained
by multiplying all prime powers incremented by one.</p>

<p>For example number 18 have 6 divisors (1, 2, 3, 6, 9, 18).
If we take factorization 18 = 3^1 * 5^1, then number of divisors is
equal to (1 + 1) * (2 + 1) = 6. You see, the same.
Not hard to prove this theorem or
<a href="http://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic#Proof">read the proof</a>.</p>

<p>Stop math, we need to code, so let’s code that.</p>

<p>First of all, we need factorization method:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">factorize</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">x</span> <span class="nv">n</span> <span class="p">[</span><span class="nv">p</span> <span class="o">&amp;</span> <span class="nv">ps</span><span class="p">]</span> <span class="nv">primes</span> <span class="nv">factors</span> <span class="p">[]]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">factors</span>
</span><span class="line">          <span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">x</span> <span class="nv">p</span><span class="p">))</span> <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">x</span> <span class="nv">p</span><span class="p">)</span> <span class="nv">primes</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">factors</span> <span class="nv">p</span><span class="p">))</span>
</span><span class="line">          <span class="ss">:else</span> <span class="p">(</span><span class="nf">recur</span> <span class="nv">x</span> <span class="nv">ps</span> <span class="nv">factors</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It uses <code>primes</code> from <code>clojure.contrib.lazy-seqs</code>.
This method prints all factors (<em>including duplicates</em>) for <code>n</code>.</p>

<p>For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">factorize</span> <span class="mi">18</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But instead of actual values of divisors, we just need their count.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">factorize-count</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce * </span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nb">comp inc </span><span class="nv">count</span><span class="p">)</span> <span class="p">(</span><span class="nb">vals </span><span class="p">(</span><span class="nf">group-by</span> <span class="nb">identity </span><span class="p">(</span><span class="nf">factorize</span> <span class="nv">n</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Calculate the result again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">drop-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">factorize-count</span> <span class="nv">%</span><span class="p">)</span> <span class="mi">500</span><span class="p">)</span> <span class="nv">triangles</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bingo! It gives the correct result in less than 3 seconds.
Not bad as improvement.</p>

<p><strong>P.S.</strong> If you test-addicted person, you, probably, point out
that function <code>num-of-divisors</code> yields incorrect result for input <code>1</code>.
We can live with that, because our needed number is much greater than 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Critical Software Bugs: Part 1]]></title>
    <link href="http://mishadoff.github.com/blog/critical-software-bugs-part-1/"/>
    <updated>2013-01-20T18:48:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/critical-software-bugs-part-1</id>
    <content type="html"><![CDATA[<p>Little journey through the history of most critical software bugs
with some code examples.</p>

<p><em>Do not try to reproduce any of these!</em></p>

<!-- more -->

<h3 id="intro">Intro</h3>

<blockquote>
  <p>Every last bug is the last but one.</p>
</blockquote>

<p><strong>Bugs</strong> are bad. Some of them cause uncomfortable work, more actions
than expected, inconsistency, layout issues, etc.
Some of them “<a href="http://en.wikipedia.org/wiki/Undocumented_feature">not a bug</a>” at all.</p>

<p><strong>Bad bugs</strong> much worse. They cause data corruption, invalid data representation,
unavailability to perform action, losing integrity and so on.</p>

<p>There are <strong>critical bugs</strong> with painful consequences. They can damage the health, nature, people
break buildings, technics. Theoretically, they
<a href="http://www.washingtonpost.com/wp-srv/inatl/longterm/coldwar/shatter021099b.htm">can lead to World War III</a>.
Hope, it’s just theoretically.</p>

<p>If you are software engineer, you definitely will commit the bugs. No panacea.
But if we aware about common mistakes, then less likely we make that mistakes.</p>

<p>This article is review of famous most critical software bugs
including brief history, consequences, root causes, possible solutions, code examples and some advices.</p>

<h3 id="mariner-1httpenwikipediaorgwikimariner1-1962"><a href="http://en.wikipedia.org/wiki/Mariner_1">Mariner 1</a> (1962)</h3>

<p><strong>History:</strong>
In 1962, spacecraft <em>Mariner 1</em> was guided by computer program with error causes
racket do not follow its expected trajectory. To prevent tragic consequences, racket
was destoyed immediately.</p>

<p><strong>Consequences:</strong> Money, $18 million.</p>

<p><strong>Reason:</strong>
There are tons of versions about what type of error it was, but official version
is <em>missing hyphen</em> (‘-‘) in program. Maybe it’s just a myth for publicity,
but, anyway, if the reason of bug is incorrect handwritten formula transcription
from paper to computer, it’s sad.</p>

<p>Probably, the root cause of that is writer and computer operator were different people.
It’s common case for that times. <em>Programming</em> was synonym to the <em>scientific calculations</em> not
an enterprise, as nowadays. That’s why scientist, programmer, and operator could be
different people.</p>

<p>Related story, it’s why zero symbol has a period or diagonal line inside - to prevent
confusing with “big O” for “typer” person. Just compare <code>0</code> and <code>O</code>.</p>

<p><strong>Solution:</strong>
It’s hardly can be a problem today (as it was 50 years ago), but if you write for somebody on the paper, write it accurate.
If you type into computer from someone’s paper sheet, check, re-check and double re-check
what you typing. Ask if you have concerns. Especially, if it is the program for spaceship.</p>

<p>In very <em>far-fetched</em> example missing minus sign can result into invalid computation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">double</span> <span class="nf">getDiscountPercent</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="mf">0.25</span><span class="o">;</span> <span class="c1">// instead of return -0.25;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">double</span> <span class="nf">calculatePrice</span><span class="o">(</span><span class="kt">double</span> <span class="n">initial</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">initial</span> <span class="o">*</span> <span class="o">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">getDiscountPercent</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That way instead of paying $75, you pay $125.</p>

<p><strong>Lesson:</strong> Always check your manual rewriting actions.</p>

<h3 id="siberian-pipeline-sabotagehttpenwikipediaorgwikisiberianpipelinesabotage-1982"><a href="http://en.wikipedia.org/wiki/Siberian_pipeline_sabotage">Siberian pipeline sabotage</a> (1982)</h3>

<p><strong>History:</strong> Cold war. Soviet Union steal technology for managing gas pipelines from Canada. This
technology intentionally contained the bug (<a href="http://en.wikipedia.org/wiki/Logic_bomb">Logic Bomb</a>), developed by CIA
for sabotage purposes. Bomb triggered.</p>

<p><strong>Consequences:</strong> The greatest non-nuclear explosion in the world.</p>

<p><strong>Reason:</strong> Every microship from stolen technology would
work fine just for 10 million cycles, after that switches to another mode.</p>

<p>They <em>used someone’s code</em>.</p>

<p><strong>Solution:</strong></p>

<blockquote>
  <p>You shall not steal</p>

  <p>– <a href="http://en.wikipedia.org/wiki/Ten_Commandments">Ten Commandments</a></p>
</blockquote>

<p>Honestly, if someone’s technology used for critical areas, like gas
transportation, it must be reviewed and tested. 100 times.</p>

<p>Story can be translated as:</p>

<p>I found memory card on the city dump.
Card contained one shell script <code>please-execute-me.sh</code>.
I <em>executed</em> it. System crashed. Who’s guilty? Just me.</p>

<p>Use software from trusted sources.</p>

<p>In modern software world, we often use someone’s libraries, frameworks,
APIs to build our own applications. We <em>expect</em> that code is <em>reviewed</em> and <em>tested</em>.
If not, we can help to do it. How we can be sure these libs without logic bombs?</p>

<p>Trust or review the sources. That’s why I love open source software.</p>

<p>Logic bomb detection is not that hard. Just find the code that causes error
and see the reason of that error. Again, code review helps <em>to prevent</em> the
logic bomb instead of <em>fixing it</em>. Build application to production only from
version control system (<em>which is controlled, right?</em>)</p>

<p>Just for educational purposes: simple example of time-triggered logic bomb</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogicBombRunner</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">LogicBomb</span><span class="o">());</span>
</span><span class="line">                <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nc">LogicBomb</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="kd">private</span> <span class="kt">long</span> <span class="n">toStop</span><span class="o">;</span>
</span><span class="line">        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">TIME_TO_TRIGGER</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">100</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="nf">LogicBomb</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="n">toStop</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="n">TIME_TO_TRIGGER</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">                <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                        <span class="k">if</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">toStop</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;System works fine.&quot;</span><span class="o">);</span>
</span><span class="line">                                <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class="line">                                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">                                <span class="o">}</span>
</span><span class="line">                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">                                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Logic bomb triggered.&quot;</span><span class="o">);</span>
</span><span class="line">                                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
</span><span class="line">                        <span class="o">}</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Yes. It throws <code>RuntimeException</code> after approximately 100 days from <code>LogicBomb</code> object creation.</p>

<p><strong>Lesson:</strong> Do not steal. Trust to very limited circle of people.</p>

<h3 id="therac-25httpenwikipediaorgwikitherac-25-1985---1987"><a href="http://en.wikipedia.org/wiki/Therac-25">Therac-25</a> (1985 - 1987)</h3>

<p><strong>History:</strong> Therac-25 was a medical device for radiation therapy.
It could deliver either beta-particles or X-rays. Unfortunately,
operating system for controling the device was written with error,
that causes sad results.</p>

<p><strong>Consequences:</strong> At least 2 patients died, 4 patients were given overdose,
approximately 100 times intended dose.</p>

<p><strong>Reason:</strong> Investigation concluded the common reason was a
<em>bad software design</em>, <em>development practices</em> and a <em>set of bugs</em>
instead of some particular critical bug.</p>

<p>These bad practices and bugs include:</p>

<ul>
  <li>No code review</li>
  <li>Poor exception handling</li>
  <li>No integration testing until device was assembled in the hospital</li>
  <li>Poor hardware design</li>
  <li><em>Bad code</em> reuse</li>
  <li>Concurrency issues</li>
</ul>

<p><strong>Solution:</strong> Code review its a must. Even if you working
alone in the team, show sources to some your friend (programmer).
Two pair of eyes can spot the mistake two times more.</p>

<p><em>Poor exception handling</em>. If failure occurs, no one knows about that failure.
Never handle exception like that:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">catch</span> <span class="o">(</span><span class="n">SomeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In 99% there are must be a proper handling. If you don’t know how
to handle, rethrow it, possible with wrapping:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">catch</span> <span class="o">(</span><span class="n">SomeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">   <span class="k">throw</span> <span class="k">new</span> <span class="nf">SpecificException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Much better to throw responsibility for handling one level up
in method signature:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SomeException</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If your real intention to left catch block empty, say this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">catch</span> <span class="o">(</span><span class="n">SomeExcpetion</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">// swallowing this exception is intended</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Bad code reuse</em>. <a href="http://en.wikipedia.org/wiki/Code_reuse">Code reuse</a> is a good thing.
Except the case when you reuse something with errors.</p>

<p>For example, I have following method for testing if number is even in some of my
previous projects (<em>yes, look at your code that was written few years ago</em>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isEven</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This method returns incorrect result <code>true</code> for all negative odd numbers. Just because
<code>%</code> operator returns <code>-1</code> except <code>1</code> for negative numbers. Better do <em>NOT</em> reuse such method.
Just write new. And replace old method immediately.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isEven</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Concurrency</em>. Software world hardest issues are concurrency issues.</p>

<blockquote>
  <p>You have a problem and decide to use threads.
Two now problems have you.</p>

  <p>– Some guy from internet
<br /></p>
</blockquote>

<blockquote>
  <p>You have a problem and decide to use locks.
Now you have</p>

  <p>– Some another guy from internet</p>
</blockquote>

<p>If you know that some object will be shared between threads, one solution to
add <code>synchronized</code> (<a href="http://en.wikipedia.org/wiki/Monitor_%28synchronization%29">Monitor object</a>)
to each read/write state method. It will slow
your work with that object but prevent a lot of unexpected errors.</p>

<p>Although, there are much flexible synchronization mechanisms in java that
plain old <code>synchronized</code> as <a href="http://en.wikipedia.org/wiki/Semaphore_%28programming%29">semaphores</a>,
<a href="http://en.wikipedia.org/wiki/Mutual_exclusion">mutexes</a>,
<a href="http://en.wikipedia.org/wiki/Read_write_lock_pattern">read-write locks</a>.</p>

<p>I reccomend to use java package <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/package-summary.html">java.util.concurrent</a>.
It consists of a lot of concurrency techniques, like <code>Synchronizers</code>, <code>Executors</code>,
<code>Atomics</code>, <code>Concurrent Collections</code>, <code>Futures</code>, <code>Callbacks</code> etc.</p>

<p><strong>As a bonus:</strong> Good books about concurrency in Java:</p>

<ul>
  <li><a href="http://www.goodreads.com/book/show/127932.Java_Concurrency_in_Practice">Java Concurrency in Practice</a></li>
  <li><a href="http://www.goodreads.com/book/show/629608.Concurrent_Programming_in_Java">Concurrent Programming in Java</a></li>
</ul>

<p><strong>Lesson:</strong> Always handle exceptions. Pay more attention to concurrency issues.</p>

<h3 id="patriot-missilehttpenwikipediaorgwikimim-104patriot-1991"><a href="http://en.wikipedia.org/wiki/MIM-104_Patriot">Patriot Missile</a> (1991)</h3>

<p><strong>History:</strong> In 1991, American battery fired Patriot Missile to intercept Iraq missile.
Interception failed because of system bug in time step calculation.
Iraq missile destroyed an American Army barracks.</p>

<p><strong>Consequences:</strong> 28 soldiers died, 100 injured.</p>

<p><strong>Reason:</strong> Floating point rounding error. System’s internal clock was calculating
time by 0.1 seconds step (0.1, 0.2, 0.3, …). As <code>0.1 = 1/10</code> have infinite binary representation
<code>0.0001100110011001100110011001100110011001100110011001100..</code>
and for this calculation 24-bit register was used,
register hold just <code>0.00011001100110011001100</code> introducing truncating error
<code>0.00000000000000000000000110011</code> what is approximately <code>0.0000001</code> in decimal.</p>

<p>Small enough, huh?</p>

<p>Not really, Multiplying this number for 100 hours gives:</p>

<pre><code>0.0000001 * 100 * 60 * 60 * 10 = 0.36 sec
</code></pre>

<p>During that time Iraq missile travels a half kilometer, and was out of tracking radius
for Patriot Missile. Bad things happen.</p>

<p><strong>Solution:</strong> Floats are very error-prone if we don’t handle them correctly.</p>

<p>Predict the output of the following code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">for</span> <span class="o">(</span><span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span> <span class="n">d</span> <span class="o">!=</span> <span class="mf">1.0</span><span class="o">;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">d</span> <span class="o">+</span> <span class="mf">0.1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Iteration&quot;</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Infinite loop. The same problem as described above.</p>

<p>One solution is to use float that have exact binary representation.
<code>0.125</code>, <code>0.25</code>, <code>0.5</code> for example.
But this greatly reduces the space of allowed values and give less flexibility.</p>

<p>Another solution to use big decimal or ratio types.
Java, as example, have out-of-the-box <code>BigDecimal</code> class. Loop above rewritten with
that class works as expected:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">BigDecimal</span> <span class="n">init</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&quot;0.0&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">BigDecimal</span> <span class="n">bound</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&quot;1.0&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">BigDecimal</span> <span class="n">step</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&quot;0.1&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="o">(</span><span class="n">BigDecimal</span> <span class="n">d</span> <span class="o">=</span> <span class="n">init</span><span class="o">;</span> <span class="o">!</span><span class="n">d</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">bound</span><span class="o">);</span> <span class="n">d</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">step</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One disadvantage it has slower execution than with floats. Consider trade-off
between time and accuracy. If human lives on the stake, it’s not relevant choice.</p>

<p><code>Ratio</code> class can be defined without any problems and used similar way.</p>

<p><strong>Lesson:</strong> If you need very accurate calculations use big decimals or ratios.</p>

<h3 id="mars-climate-orbiterhttpenwikipediaorgwikimarsclimateorbiter-1998"><a href="http://en.wikipedia.org/wiki/Mars_Climate_Orbiter">Mars Climate Orbiter</a> (1998)</h3>

<p><strong>History:</strong> Again about space. In 1998, communication with Mars Climate Orbiter
was lost, because of changed trajectory. Space probe was crashed near Mars.</p>

<p><strong>Consequences:</strong> Money, $327 million</p>

<p><strong>Reason:</strong> Navigation system design was developed by another team.
To represent Force they used <a href="http://en.wikipedia.org/wiki/Pound-force">pound-force</a>
from <a href="http://en.wikipedia.org/wiki/Imperial_units">Imperial units</a>
instead of <a href="http://en.wikipedia.org/wiki/Newton_%28unit%29">Newton</a>
from <a href="http://en.wikipedia.org/wiki/Metric_system">metric system</a>.</p>

<pre><code>1 Newton = 0.22 pound-force
</code></pre>

<p>Without provided conversion between them system failed.</p>

<p>Issue resemble to using dates in different timezones, but much more critical.</p>

<p><strong>Solution:</strong> First of all, at least one science-aware person must perform code review.
At least for code blocks with formulas and calculations. If there are comments about using pound-force,
the problem easy spotted. Second of all, received code must be tested on model
instead of physical machine. This is also, likely, detects the issue.
Developer who wrote that less guilty, but still guilty.</p>

<p>There are different approaches to implement this in java:</p>

<p>very bad approach, we don’t know what units are used:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">new</span> <span class="nf">Force</span><span class="o">(</span><span class="mf">1.533</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>better (still bad) approach to indicate with comment:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">// force in Newtons!</span>
</span><span class="line"><span class="k">new</span> <span class="nf">Force</span><span class="o">(</span><span class="mf">1.533</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>better (still bad) approach to indicate different constructors for different units:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">new</span> <span class="nf">ForceInNewtons</span><span class="o">(</span><span class="mf">1.533</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I prefer approach where you specifies a <em>value</em> and <em>unit</em> in the constructor, and
they converted to something common unit (metric) convenient for use in internal representation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">enum</span> <span class="n">ForceUnit</span> <span class="o">{</span>
</span><span class="line">  <span class="n">NEWTON</span><span class="o">,</span>
</span><span class="line">  <span class="n">POUND_FORCE</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">new</span> <span class="nf">Force</span><span class="o">(</span><span class="mf">1.533</span><span class="o">,</span> <span class="n">ForceUnit</span><span class="o">.</span><span class="na">NEWTON</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A bit more code, but it is understandable and easy to use for different unit systems.
Unit conversion method can be defined either at the <code>enum ForceUnit</code> or <code>class Force</code> level.</p>

<p><strong>Lesson:</strong> Always explicitly indicate what units used in your code.</p>

<p><em>To be continued.</em></p>

<h3 id="links">Links</h3>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/List_of_software_bugs">List of Software Bugs</a></li>
  <li><a href="http://www5.in.tum.de/~huckle/bugse.html">Collection of Software Bugs</a></li>
  <li><a href="http://www.wired.com/software/coolapps/news/2005/11/69355?currentPage=all">History’s Worst Software Bugs</a></li>
  <li><a href="http://www.sundoginteractive.com/sunblog/posts/top-ten-most-infamous-software-bugs-of-all-time">Top Ten Most Infamous Software Bugs Of All Time</a></li>
  <li><a href="http://nssdc.gsfc.nasa.gov/nmc/spacecraftDisplay.do?id=MARIN1">NASA Mariner 1</a></li>
  <li><a href="http://www.wired.com/culture/lifestyle/news/2004/03/62806">Soviets Burned By CIA Hackers?</a></li>
  <li><a href="http://courses.cs.vt.edu/cs3604/lib/Therac_25/Therac_1.html">An Investigation of the Therac-25 Accidents</a></li>
  <li><a href="http://seeri.etsu.edu/SECodeCases/ethicsC/PatriotMissile.htm">An Analysis of the Patriot Missile System</a></li>
  <li><a href="http://www.ima.umn.edu/~arnold/disasters/patriot.html">The Patriot Missile Failure</a></li>
  <li><a href="http://www.tysknews.com/Depts/Metrication/mystery_of_orbiter_crash_solved.htm">Mystery of Orbiter Crash Solved</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 011]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-011/"/>
    <updated>2013-01-18T13:45:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-011</id>
    <content type="html"><![CDATA[<blockquote>
  <p>What is the greatest product of four adjacent numbers in the same
direction (up, down, left, right, or diagonally) in the 20 x 20 grid?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=11">http://projecteuler.net/problem=11</a></p>

<!-- more -->

<blockquote>
  <p>In the 20 x 20 grid below, four numbers along a diagonal
line have been enclosed into square brackets</p>
</blockquote>

<pre><code>08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10[26]38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95[63]94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17[78]78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35[14]00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
</code></pre>

<blockquote>
  <p>The product of these numbers is 26 * 63 * 78 * 14 = 1788696.</p>

  <p>What is the greatest product of four adjacent numbers in the
same direction (up, down, left, right, or diagonally) in the 20 x 20 grid?</p>
</blockquote>

<p>First step is pretty routine, we need to create such grid representation
in our program from file. For the way how we read files refer
<a href="http://mishadoff.github.com/blog/clojure-euler-problem-008">Clojure Euler: Problem 008</a>, we have
similar problem there.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">get-matrix</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">Integer/parseInt</span> <span class="p">(</span><span class="nb">apply str </span><span class="nv">%</span><span class="p">))</span>
</span><span class="line">       <span class="p">(</span><span class="nf">partition</span> <span class="mi">2</span> <span class="mi">2</span> <span class="p">(</span><span class="nb">remove </span><span class="o">#</span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="sc">\n</span><span class="nv">ewline</span> <span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="sc">\ </span><span class="nv">%</span><span class="p">))</span>
</span><span class="line">                              <span class="p">(</span><span class="nb">seq </span><span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;res/problem011.txt&quot;</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Idea is following: read the file, drop the garbage,
take all two-digit combinations, concat each and transform to the integer.</p>

<p>To make things simple we reading the numbers in one-dimensional list
of size 20 x 20 = 400. We always can use formula to represent two dimensional
indexing for one-dimensional array and vice versa.</p>

<p><em>Example:</em> suppose you need a 3 x 3 matrix <code>A</code></p>

<pre><code>9    2    4
6    1    7
5    3    8
</code></pre>

<p>You can flat it into 1D array <code>B</code></p>

<pre><code>9 2 4 6 1 7 5 3 8
</code></pre>

<p>Now, when you want <code>A[i][j]</code> use the formula <code>i * size_j + j</code>, where <code>size_j</code>
is second matrix dimension. Therefore <code>A[1][2] = B[1 * 3 + 2] = B[5] = 7</code>, what is correct.</p>

<p>Implementing that in clojure gives one indexing function</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">get-at</span> <span class="p">[</span><span class="nv">i</span> <span class="nv">j</span> <span class="nv">matrix</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">i</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">i</span> <span class="mi">20</span><span class="p">)</span> <span class="p">(</span><span class="nb">&gt;= </span><span class="nv">j</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">j</span> <span class="mi">20</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">nth </span><span class="nv">matrix</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">j</span> <span class="p">(</span><span class="nb">* </span><span class="nv">i</span> <span class="mi">20</span><span class="p">)))</span> <span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We check the boundaries of array inside this function, which can be inappropriate
in many cases, but it is good as we use it in one place.</p>

<p>Ok. We have data, we have methods operate this data, now let’s code logic.
Our good friend - <strong>bruteforce</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">matrix</span> <span class="p">(</span><span class="nf">get-matrix</span><span class="p">)</span>
</span><span class="line">      <span class="nv">ways</span> <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">20</span><span class="p">)</span> <span class="nv">j</span> <span class="p">(</span><span class="nb">range </span><span class="mi">20</span><span class="p">)]</span>
</span><span class="line">             <span class="p">[(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-at</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="nv">j</span><span class="p">)</span> <span class="nv">matrix</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">4</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-at</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="nv">i</span><span class="p">)</span> <span class="nv">j</span> <span class="nv">matrix</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">4</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-at</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="nv">j</span><span class="p">)</span> <span class="nv">matrix</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">4</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-at</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">j</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">matrix</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">4</span><span class="p">))])]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">reduce max </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">reduce * </span><span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce concat </span><span class="nv">ways</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We iterate on all matrix elements as start of 4-element range.</p>

<p>We have 4 conditions, each of them represents some direction.
All these 4 directions represent all possible direction in grid.</p>

<ol>
  <li>NORTH -&gt; SOUTH (Up &amp; Down covered)</li>
  <li>WEST -&gt; EAST (Left &amp; Right covered)</li>
  <li>NW -&gt; SE (backslash diagonals covered)</li>
  <li>NE -&gt; SW (slash diagonals covered)</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nv">S</span>      <span class="nv">S</span> <span class="nb">* * * </span>        <span class="nv">S</span>                  <span class="nv">S</span>
</span><span class="line"><span class="nb">* </span>                      <span class="nb">* </span>               <span class="nv">*</span>
</span><span class="line"><span class="nb">* </span>                       <span class="nb">* </span>             <span class="nv">*</span>
</span><span class="line"><span class="nb">* </span>                        <span class="nb">* </span>           <span class="nv">*</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>S is for start</em></p>

<p>If we obtain all possible 4-element ranges for matrix, just find
maximum of product.</p>

<p>Problem solved!</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem011.clj">github</a></p>

<p><strong>P.S.</strong> Boring problem.
I think it just for introducing matrices computation.</p>
]]></content>
  </entry>
  
</feed>
