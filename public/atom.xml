<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.io/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.io/"/>
  <updated>2014-08-07T20:02:54+03:00</updated>
  <id>http://mishadoff.github.io/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Java]]></title>
    <link href="http://mishadoff.github.io/blog/effective-java/"/>
    <updated>2014-08-07T13:54:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/effective-java</id>
    <content type="html"><![CDATA[<p>Recently, I’ve re-read awesome java book
<a href="http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683">Effective Java</a>
by Joshua Bloch. The book contains 78 <em>independent</em> items, discussing various aspects of programming in java. Something like <em>mini-design patterns</em> with emphasis on their pros and cons.</p>

<p>Few notes from each item as a refresher.</p>

<!-- more -->

<h3 id="item-1-consider-static-factory-methods-instead-of-constructors">Item 1: Consider static factory methods instead of constructors</h3>

<ul>
  <li>Static factory methods have more informative names than constructors</li>
  <li>Same parameters list could be applied</li>
  <li>Not required to create new objects, could return cached instance</li>
  <li>Static factory methods could return object subtype</li>
  <li>Reduced verbosity for generics due to type inference</li>
  <li>Classes without public/private constructor can’t be subclassed, but it is good, because it enforces to “favor composition over inheritance”</li>
  <li>Hard to distinguish from other static methods. To avoid confusion use common names like <code>newIntance</code>, <code>valueOf</code>, etc.</li>
</ul>

<h3 id="item-2-consider-a-builder-when-faced-with-many-constructor-parameters">Item 2: Consider a builder when faced with many constructor parameters</h3>

<ul>
  <li><strong>Telescope Constructor</strong> causes verbosity</li>
  <li><strong>JavaBeans</strong> may cause inconsistent state, no possibbility to make a class immutable</li>
  <li><strong>Builder Pattern</strong> is flexible and right way to handle optional parameters</li>
</ul>

<h3 id="item-3-enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type">Item 3: Enforce the singleton property with a private constructor or an enum type</h3>

<p><em>Caution:</em> Discussed singleton <strong>without</strong> lazy initialization</p>

<ul>
  <li>Throw an exception in a private constructor to avoid reflection call to constructor</li>
  <li>If standard serialization is needed make all fields transient and override <code>readResolve</code> method</li>
  <li>Best way to use single element enum as a singleton</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">enum</span> <span class="n">Singleton</span> <span class="o">{</span>
</span><span class="line">  <span class="n">INSTANCE</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="item-4-enforce-noninstantiability-with-a-private-constructor">Item 4: Enforce noninstantiability with a private constructor</h3>

<ul>
  <li>Include a single private constructor to a class to prevent it from instantiation</li>
  <li>Throw an exception in constructor if it is called</li>
  <li>Almost always used technique for utility classes</li>
</ul>

<h3 id="item-5-avoid-creating-unnecessary-objects">Item 5: Avoid creating unnecessary objects</h3>

<ul>
  <li><code>"hello"</code> is better than <code>new String("hello")</code></li>
  <li><code>Boolean.valueOf("true")</code> is better than <code>new Boolean("true")</code></li>
  <li>Immutable objects could be reused for free</li>
  <li>Mutable objects could be reused if you <em>really</em> sure, they won’t be modified</li>
  <li>prefer primitives to boxed primitives</li>
  <li>watch out for hidden autoboxing</li>
</ul>

<h3 id="item-6-eliminate-obsolete-object-references">Item 6: Eliminate obsolete object references</h3>

<ul>
  <li>Garbage collector is not savior from memory leaks</li>
  <li>Nullify obsolete references</li>
  <li>Invalidate cache periodically</li>
  <li>Deregister outdated listeners and callbacks</li>
</ul>

<h3 id="item-7-avoid-finalizers">Item 7: Avoid finalizers</h3>

<ul>
  <li>Finalizers are not destructors</li>
  <li>No guarantee finalizers will be executed promptly</li>
  <li>No guarantee finalizers will be executed at all</li>
  <li><code>System.gc</code> just a hint, not a gc call</li>
  <li>Finalizers cause <strong>severe</strong> performance penalty</li>
  <li>Use own explicit methods for finalization like <code>close()</code></li>
</ul>

<h3 id="item-8-obey-the-general-contract-when-overriding-equals">Item 8: Obey the general contract when overriding equals</h3>

<ul>
  <li>Overridden <code>equals</code> should follow <em>equivalence relation</em>
    <ul>
      <li>Reflexive, <code>x.equals(x) == true</code></li>
      <li>Symmetric, <code>x.equals(y) == y.equals(x)</code></li>
      <li>Transitive, <code>x.equals(y) and y.equals(z) == x.equals(z)</code></li>
      <li>Consistent, consequent calls <code>x.equals(y)</code> should produce the same value</li>
      <li><code>x.equals(null) == false</code> if <code>x</code> not null</li>
    </ul>
  </li>
  <li>There is no way to extend an instantiable class and add a value component while preserving the equals contract</li>
  <li>Do not write an equals method that depends on unreliable resources. This was discussed at the <a href="http://mishadoff.github.io/blog/java-magic-part-1-java-dot-net-dot-url/">Java Magic: Part I</a></li>
  <li>Always override <code>hashCode</code> when you override <code>equals</code></li>
  <li>Don’t substitute param type in <code>equals</code>, that cause method <strong>overload</strong> instead of <strong>override</strong>.
Use <code>@Override</code> annotation to be safe.</li>
</ul>

<h3 id="item-9-always-override-hashcode-when-you-override-equals">Item 9: Always override hashCode when you override equals</h3>

<ul>
  <li>Equal objects must have equal hashcodes</li>
  <li>Unequal objects could have equal hashcodes</li>
  <li>Missing <code>hashCode</code> implementation breaks functionality of hash-based collections</li>
  <li>The worst possible legal hash function <code>return 42</code></li>
  <li>Bad hashcode could degrade performance in hash-based collections</li>
  <li>Hashcode could be cached for immutable classes</li>
  <li>Do not try to develop your own <code>state-of-the-art</code> hash function unless you are a matematician</li>
</ul>

<h3 id="item-10-always-override-tostring">Item 10: Always override toString</h3>

<ul>
  <li>Actually, not required</li>
  <li>Easier to inspect objects</li>
  <li>Include all needed info to <code>toString</code></li>
  <li>Document what exactly <code>toString</code> returns and in which format</li>
  <li>Provide programmatic access to all of the information contained in the value returned by <code>toString</code></li>
</ul>

<h3 id="item-11-override-clone-judiciously">Item 11: Override clone judiciously</h3>

<ul>
  <li><code>Cloneable</code> is broken</li>
  <li>If you override the <code>clone</code> method in a nonfinal class, you should return an object obtained by invoking <code>super.clone</code></li>
  <li>Class that implements <code>Cloneable</code> is expected to provide a properly functioning public <code>clone</code> method</li>
  <li><code>clone</code> should not corrupt original object</li>
  <li>Pay attention to <em>deep</em> and <em>shallow</em> copy</li>
  <li>Provide copy constructor or copy factory instead of implementing <code>clone</code></li>
</ul>

<h3 id="item-12-consider-implementing-comparable">Item 12: Consider implementing Comparable</h3>

<ul>
  <li>Implementing <code>Comparable</code> indicates that objects have natural ordering</li>
  <li><code>Comparable</code> allow to use your class in many generic algorithms: search, sorting, etc.</li>
  <li><code>compareTo</code> should be consistent with <code>equals</code></li>
  <li>Implement <code>compareTo</code> that returns <code>-1</code>, <code>0</code> and <code>1</code> and do not cause integer overflow</li>
  <li>For non-natural ordering or inability to implement <code>Comparable</code> use <code>Comparator</code></li>
</ul>

<h3 id="item-13-minimize-the-accessibility-of-classes-and-members">Item 13: Minimize the accessibility of classes and members</h3>

<ul>
  <li>Make each class or member as inaccessible as possible</li>
  <li>If a package-private top-level class is used by only one class, consider making the top-level class a private nested class of the sole class that uses it</li>
  <li>If a method overrides a superclass method, it is not permitted to have a lower access level in the subclass than it does in the superclass</li>
  <li>Instance fields should never be public</li>
  <li>Classes with public mutable fields are not thread-safe</li>
  <li>public static final arrays are mutable</li>
</ul>

<h3 id="item-14-in-public-classes-use-accessor-methods-not-public-fields">Item 14: In public classes, use accessor methods, not public fields</h3>

<ul>
  <li>public fields are acceptable if class is not public</li>
  <li>if a class is accessible outside its package, provide accessor methods</li>
</ul>

<h3 id="item-15-minimize-mutability">Item 15: Minimize mutability</h3>

<ul>
  <li>Immutable classes are easier to design, implement and use. They are less error-prone and more secure</li>
  <li>To make a class immutable follow the rules
    <ul>
      <li>Don’t provide any mutators</li>
      <li>Ensure that the class can’t be extended</li>
      <li>Make all fields <code>final</code></li>
      <li>Make all fields <code>private</code></li>
      <li>Ensure exclusive access to any mutable components. Return defensive copies</li>
    </ul>
  </li>
  <li>Immutable objects are thread-safe</li>
  <li>Immutable objects are shared freely</li>
  <li>Not only can you share immutable objects, but you can share their internals</li>
  <li>The only real disadvantage of immutable classes is that they require a separate object for each distinct value</li>
  <li>Classes should be immutable unless there’s a very good reason to make them mutable.</li>
  <li>If a class cannot be made immutable, limit its mutability as much as possible.</li>
  <li>Make every field final unless there is a compelling reason to make it nonfinal</li>
</ul>

<h3 id="item-16-favor-composition-over-inheritance">Item 16: Favor composition over inheritance</h3>

<ul>
  <li>Unlike method invocation, inheritance violates encapsulation</li>
  <li>Subclasses depend on their superclasses, which could be changed and as result broken functionality in subclasses</li>
  <li>Use composition and forwarding instead of inheritance, especially if an appropriate interface to implement a wrapper class exists.</li>
  <li>Use inheritance when class is designed for inheritance</li>
</ul>

<h3 id="item-17-design-and-document-for-inheritance-or-else-prohibit-it">Item 17: Design and document for inheritance or else prohibit it</h3>

<ul>
  <li>Class must document its self-use of overridable methods</li>
  <li>Good API documentation <em>for inheritance</em> should describe what a given method does and how it does it.</li>
  <li>The only way to test a class designed for inheritance is to write subclasses</li>
  <li>Constructors must not invoke overridable methods</li>
  <li>If supperclass implements <code>Cloneable</code> or <code>Serializable</code> neither <code>clone</code> nor <code>readObject</code> may invoke an overridable method, directly or indirectly</li>
  <li>Prohibit subclassing in classes that are not designed and documented to be safely subclassed</li>
  <li>Prohibit subclassing by making class final</li>
</ul>

<h3 id="item-18-prefer-interfaces-to-abstract-classes">Item 18: Prefer interfaces to abstract classes</h3>

<ul>
  <li>Existing classes can be easily retrofitted to implement a new interface</li>
  <li>Interfaces are ideal for defining mixins</li>
  <li>Interfaces allow the construction of nonhierarchical type frameworks</li>
  <li>Interfaces enable safe, powerful functionality enhancements via wrapper classes</li>
  <li>Abstract classes are useful for sceletal implementation</li>
  <li>You could safely add a method to abstract class with default implementation (<em>the same applies to interfaces since Java 8 release, with help of default methods</em>)</li>
  <li>Once an interface is released and widely implemented, it is almost impossible to change</li>
</ul>

<h3 id="item-19-use-interfaces-only-to-define-types">Item 19: Use interfaces only to define types</h3>

<ul>
  <li>Do not use interface for defining constants</li>
  <li>If in a future release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility</li>
  <li>If a nonfinal class implements a constant interface, all of its subclasses will have their namespaces polluted by the constants in the interface</li>
  <li>Add constant to class if they are strongly tied to it</li>
  <li>Make constants as enum or noninstantiable utility classes</li>
</ul>

<h3 id="item-20-prefer-class-hierarchies-to-tagged-classes">Item 20: Prefer class hierarchies to tagged classes</h3>

<ul>
  <li>Tagged class use internal state to indicate its type</li>
  <li>Tagged classes are verbose, error-prone, and memory inefficient</li>
  <li>Hierarchy classes provide more compile time checks</li>
</ul>

<h3 id="item-21-use-function-objects-to-represent-strategies">Item 21: Use function objects to represent strategies</h3>

<ul>
  <li>Function objects are simulate functions in OOP</li>
  <li>Function objects should be stateless</li>
  <li>Primary use of function objects is to implement the Strategy pattern</li>
</ul>

<h3 id="item-22-favor-static-member-classes-over-nonstatic">Item 22: Favor static member classes over nonstatic</h3>

<ul>
  <li>A nested class should exist only to serve its enclosing class</li>
  <li>There are four kinds of nested classes
    <ul>
      <li>Static member classes</li>
      <li>Nonstatic member classes</li>
      <li>Anonymous classes</li>
      <li>Local classes</li>
    </ul>
  </li>
  <li>Static member classes could exist without enclosing <em>instance</em></li>
  <li>If you declare a member class that does not require access to an enclosing instance, always put the static modifier in its declaration</li>
  <li>Anonymous classes could be instantiated <em>only</em> at the point they are declared</li>
  <li>Anonymous classes have enclosing instances if they are defined ina nonstatic context</li>
  <li>Local classes can be declared anywhere a local variable can be declared and have the same scoping rules</li>
</ul>

<h3 id="item-23-dont-use-raw-types-in-new-code">Item 23: Don’t use raw types in new code</h3>

<ul>
  <li>Generic types provide compile-time checking for incompatible types</li>
  <li>Not needed manual cast to type when you retrieve element from collections</li>
  <li>Raw types exists only for backward compatibility</li>
  <li>You lose type safety if you use a raw type</li>
  <li>Raw types could be used with <code>instanceof</code> operator</li>
</ul>

<h3 id="item-24-eliminate-unchecked-warnings">Item 24: Eliminate unchecked warnings</h3>

<ul>
  <li>Eliminate every unchecked warning that you can, that means your code is typesafe</li>
  <li>Use <code>@SuppressWarnings("unchecked")</code> only if you can prove the code is typesafe</li>
  <li>Always use the <code>@SuppressWarnings</code> annotation on the smallest scope possible</li>
  <li>Every time you use an <code>@SuppressWarnings</code> annotation, add a comment saying why it’s safe to do so</li>
  <li>Every unchecked warning represents the potential for a <code>ClassCastException</code> at runtime. Do not ignore them blindly</li>
</ul>

<h3 id="item-25-prefer-lists-to-arrays">Item 25: Prefer lists to arrays</h3>

<ul>
  <li>Arrays are covariant (if <code>Sub</code> is subtype of <code>Super</code>, then <code>Sub[]</code> is a subtype of <code>Super[]</code>)</li>
  <li>Generics are invariant (<code>List&lt;Sub&gt;</code> is not a subtype of <code>List&lt;Super&gt;</code>)</li>
  <li>Arrays are reified (enforce their element types at runtime)</li>
  <li>Generics are non-reified and implemented by erasure (enforce types at a compile time, but erased at a runtime)</li>
  <li>Generic array creation errors at compile time (<code>List&lt;E&gt;[]</code>)</li>
  <li>Array of non-reified types can not be created</li>
</ul>

<h3 id="item-26-favor-generic-types">Item 26: Favor generic types</h3>

<ul>
  <li><code>Object</code> type in collections are good candidate to replace with generic types</li>
  <li><code>new E[]</code> cause compile time error, use <code>(E[]) new Object[]</code> instead</li>
</ul>

<h3 id="item-27-favor-generic-methods">Item 27: Favor generic methods</h3>

<ul>
  <li>Generic type parameter list, which declares the type parameter, goes between the method’s modifiers and its return type (<code>public static &lt;T&gt; void method()</code>)</li>
  <li>Generic methods could infere type of arguments</li>
</ul>

<h3 id="item-28-use-bounded-wildcards-to-increase-api-flexibility">Item 28: Use bounded wildcards to increase API flexibility</h3>

<ul>
  <li>Generics are invariant (<code>List&lt;Integer&gt;</code> is not a subtype of <code>List&lt;Number&gt;</code>)</li>
  <li>For maximum flexibility, use wildcard types on input parameters that represent producers or consumers</li>
  <li><strong>PECS</strong>: <strong>P</strong>roducer - <strong>E</strong>xtends , <strong>C</strong>onsumer - <strong>S</strong>uper</li>
  <li>Producer: <code>add(List&lt;? extends Number&gt;)</code></li>
  <li>Consumer: <code>get(List&lt;? super Number&gt;)</code></li>
  <li><code>Comparable</code> and <code>Comparator</code> are consumers</li>
  <li>Do not use wildcard types as return types, it would force use wildcards in the client code</li>
  <li>Use explicit types if compiler can’t infere them <code>Union&lt;Number&gt;.union()</code></li>
  <li>if a type parameter appears only once in a method declaration, replace it with a wildcard</li>
</ul>

<h3 id="item-29-consider-typesafe-heterogeneous-containers">Item 29: Consider typesafe heterogeneous containers</h3>

<ul>
  <li>Single-element containers could be parametrized (<code>ThreadLocal</code>, <code>AtomicReference</code>)</li>
  <li><code>String.class</code> is of type <code>Class&lt;String&gt;</code></li>
  <li>Typesafe heterogeneous container pattern  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Favorites</span> <span class="o">{</span>
</span><span class="line">  <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">putFavorite</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">,</span> <span class="n">T</span> <span class="n">instance</span><span class="o">);</span>
</span><span class="line">  <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">getFavorite</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>String s = f.getFavorite(String.class)</code> is typesafe</li>
  <li>You can use <code>Class</code> objects as keys for typesafe heterogeneous containers.</li>
</ul>

<h3 id="item-30-use-enums-instead-of-int-constants">Item 30: Use enums instead of int constants</h3>

<ul>
  <li><em>int enum pattern</em> just a class with int constants</li>
  <li>Compiler won’t complain if you pass one int constant, where another expected</li>
  <li>If int constant number is changed, clients should be recompiled</li>
  <li>There is no easy way to translate int enum constants into printable strings</li>
  <li>There is no reliable way to obtain size or iterate over all the int enum constants in a group</li>
  <li><em>String enum pattern</em> is even worse</li>
  <li>String comparisons is expensive</li>
  <li>Error is string constant lead to runtime error</li>
  <li>Use enums!</li>
  <li>Each enum internally is <code>public static final int</code> field</li>
  <li>Enums provide compile-time type safety</li>
  <li>Enum types with identically named constants coexist peacefully because each type has its own namespace</li>
  <li>You can add or reorder constants in an enum type without recompiling clients</li>
  <li>Translate enums into printable strings by calling their <code>toString</code> method</li>
  <li>Enum types let you add arbitrary methods and fields and implement arbitrary interfaces</li>
  <li>If an enum is generally useful, it should be a top-level class; if its use is tied to a specific top-level class, it should be a member class of that top-level class</li>
  <li>To avoid switch on enum constant use <em>constant-specific method implementations</em>. Add abstract method to enum type, and override that method for each constant</li>
  <li>Enums have auto-generated methods <code>valueOf(String)</code>, <code>values()</code></li>
  <li>Switches on enums are good if you are client user of that enum</li>
</ul>

<h3 id="item-31-use-instance-fields-instead-of-ordinals">Item 31: Use instance fields instead of ordinals</h3>

<ul>
  <li>Every enum constant associated with int value via <code>ordinal()</code> method</li>
  <li>Reordering, adding or deleting enum constant cause problems if you depend on <code>ordinal()</code></li>
  <li>Use instance fields for enum (<code>APPLE(1)</code> instead of <code>APPLE.ordinal()</code>)</li>
</ul>

<h3 id="item-32-use-enumset-instead-of-bit-fields">Item 32: Use EnumSet instead of bit fields</h3>

<ul>
  <li><em>Bit int enum pattern</em> use int constants as a power of two (1,2,4,8,…) This lets you to perform union and intersection
with bitwise operations efficiently (<code>apply(STYLE_ITALIC | STYLE_BOLD)</code>)</li>
  <li>Hard to interpret bit int constants</li>
  <li>Hard to iterate over bit int constants</li>
  <li>Just because an enumerated type will be used in sets, there is no reason to represent it with bit fields</li>
  <li>Use <code>EnumSet</code> instead (<code>apply(EnumSet.of(Style.ITALIC, Style.BOLD))</code>)</li>
</ul>

<h3 id="item-33-use-enummap-instead-of-ordinal-indexing">Item 33: Use EnumMap instead of ordinal indexing</h3>

<ul>
  <li><code>ordinal()</code> for enums cause a lot of problems in array indexing</li>
  <li>ordinal indexing is not typesafe, may cause wrong associations or <code>IndexOutOfBoundsException</code></li>
  <li>Use <code>EnumMap.get(APPLE)</code> instead of <code>array[APPLE.ordinal()]</code></li>
  <li>If the relationship that you are representing is multidimensional, use <code>EnumMap&lt;..., EnumMap&lt;...&gt;&gt;</code></li>
</ul>

<h3 id="item-34-emulate-extensible-enums-with-interfaces">Item 34: Emulate extensible enums with interfaces</h3>

<ul>
  <li>There is no much useful use cases to extend enum functionality</li>
  <li><code>enum</code> could inplement interfaces, therefore allow extensibility</li>
  <li>While you cannot write an extensible enum type, you can emulate it by writing an interface to go with a basic enum type that implements the interface</li>
</ul>

<h3 id="item-35-prefer-annotations-to-naming-patterns">Item 35: Prefer annotations to naming patterns</h3>

<ul>
  <li>Prior to release 1.5, it was common to use naming patterns to indicate that some program elements demanded special treatment by a tool or framework (name test methods beginning with <code>test</code> for JUnit)</li>
  <li>No warning about typos, no control over program elements, ugly and fragile approach</li>
  <li>Annotations solve <em>naming patterns</em> problems</li>
  <li>Define annotation Test <code>public @interface Test</code></li>
  <li><code>@Retention(RetentionPolicy.RUNTIME)</code> meta-annotation indicates that Test annotations should be retained at runtime</li>
  <li><code>@Target(ElementType.METHOD)</code> meta-annotation indicates that the Test annotation is legal only on method declarations</li>
  <li>Process marker annotations <code>Method.isAnnotationPresent(Test.class)</code></li>
  <li>With the exception of toolsmiths, most programmers will have no need to define annotation types</li>
  <li>Consider using any annotations provided by your IDE or static analysis tools</li>
</ul>

<h3 id="item-36-consistently-use-the-override-annotation">Item 36: Consistently use the Override annotation</h3>

<ul>
  <li><code>@Override</code> can only be used on method declarations</li>
  <li><code>@Override</code> indicates that the annotated method declaration overrides a declaration in a supertype</li>
  <li><code>@Override</code> helps to catch tricky bugs (overloaded <code>equals</code>, <code>hashcode</code>)</li>
  <li>Use the <code>@Override</code> annotation on every method declaration that you believe to override a superclass declaration</li>
</ul>

<h3 id="item-37-use-marker-interfaces-to-define-types">Item 37: Use marker interfaces to define types</h3>

<ul>
  <li>A marker interface is an interface that contains no method declarations (<code>Serializable</code>, <code>Cloneable</code>)</li>
  <li>Marker interfaces are not marker annotations</li>
  <li>Marker interfaces define a type that is implemented by instances of the marked class; marker annotations do not</li>
  <li>Marker interfaces can be targeted more precisely by extending that interface</li>
  <li><code>Set</code> is <em>restricted marker interface</em>. It extends <code>Collection</code> but does not add new methods. It only refines contract for some methods to be more targeted.</li>
  <li>The chief advantage of marker annotations over marker interfaces is that it is possible to add more information to an annotation type after it is already in use, by adding one or more annotation type elements with defaults (Java8 default methods)</li>
  <li>If you find yourself writing a marker annotation type whose target is <code>ElementType.TYPE</code>, take the time to figure out whether it really should be an annotation type, or whether a marker interface would be more appropriate.</li>
</ul>

<h3 id="item-38-check-parameters-for-validity">Item 38: Check parameters for validity</h3>

<ul>
  <li>Detect errors and wrong values as soon as possible</li>
  <li>For public methods, use the Javadoc <code>@throws</code> tag to document the exception that will be thrown if a restriction on parameter values is violated</li>
  <li>nonpublic methods should generally check their parameters using assertions</li>
  <li>Unlike normal validity checks, they have no effect and essentially no cost unless you enable them, which you do by passing the <code>-ea</code> (or <code>-enableassertions</code>) flag to the java interpreter</li>
  <li>Do not use validity check if it is impractical or performed implicitly in the process of doing the computation</li>
</ul>

<h3 id="item-39-make-defensive-copies-when-needed">Item 39: Make defensive copies when needed</h3>

<ul>
  <li>You must program defensively, with the assumption that clients of your class will do their best to destroy its invariants</li>
  <li>If you return mutable reference from class, then class is also mutable</li>
  <li>To make immutable class, make a defensive copy of each mutable parameter</li>
  <li>Defensive copies are made before checking the validity of the parameters and the validity check is performed on the copies rather than on the originals (protect against changes from another thread, TOCTOU <em>time-of-check/time-of-use</em> attack) </li>
  <li>Do not use the clone method to make a defensive copy of a parameter whose type is subclassable by untrusted parties</li>
  <li>Defensive copying of parameters is not just for immutable classes, think twice before returning a reference</li>
  <li>Arrays are always mutable</li>
  <li>Defensive copying can have a performance penalty associated with it and isn’t always justified</li>
  <li>If the cost of the defensive copy would be prohibitive and the class trusts its clients not to modify the components inappropriately, then the defensive copy may be replaced by documentation outlining the client’s responsibility not to modify the affected components</li>
</ul>

<h3 id="item-40-design-method-signatures-carefully">Item 40: Design method signatures carefully</h3>

<ul>
  <li>Choose method names carefully</li>
  <li>Follow the code conventions</li>
  <li>Too many methods make a class difficult to learn, use, document, test, and maintain</li>
  <li>Avoid long parameter lists (four parameters or fewer)</li>
  <li>Use builder pattern, helper classes or helper methods to avoid long parameter lists</li>
  <li>For parameter types, favor interfaces over classes</li>
  <li>Prefer two-element enum types to boolean parameters</li>
</ul>

<h3 id="item-41-use-overloading-judiciously">Item 41: Use overloading judiciously</h3>

<ul>
  <li>The choice of which overloaded method to invoke is made at <strong>compile time</strong></li>
  <li>Selection among overloaded methods is static, while selection among overridden methods is dynamic</li>
  <li>A safe, conservative policy is never to export two overloadings with the same number of parameters</li>
  <li>The rules that determine which overloading is selected are extremely complex. They take up thirty-three pages in the language specification [JLS, 15.12.1-3]</li>
</ul>

<h3 id="item-42-use-varargs-judiciously">Item 42: Use varargs judiciously</h3>

<ul>
  <li>Use <code>call(int...)</code> when you need zero or more arguments</li>
  <li>Use <code>call(int, int...)</code> when you need one or more arguments</li>
  <li>Don’t use varargs for every method that has a final array parameter; use varargs only when a call really operates on a variable-length sequence of values</li>
  <li>Every invocation of a varargs method causes an array allocation and initialization</li>
  <li>Use overloaded methods with 2, 3, 4 params to cover most use-cases, otherwise use varargs</li>
</ul>

<h3 id="item-43-return-empty-arrays-or-collections-not-nulls">Item 43: Return empty arrays or collections, not nulls</h3>

<ul>
  <li>Do not return <code>null</code>s!</li>
  <li>Return empty collection (<code>Collections.emptyList()</code>), or zero-length array (<code>new int[0]</code>) instead of nulls</li>
  <li>Zero-length arrays and empty collections are not performance problems, because they are immutable and only one instance could be used</li>
</ul>

<h3 id="item-44-write-doc-comments-for-all-exposed-api-elements">Item 44: Write doc comments for all exposed API elements</h3>

<ul>
  <li>Document API with the <code>javadoc</code> utility</li>
  <li>To document your API properly, you must precede every exported class, interface, constructor, method, and field declaration with a doc comment</li>
  <li>If a class is serializable, you should also document its serialized form</li>
  <li>The doc comment for a method should describe succinctly the contract between the method and its client</li>
  <li>With the exception of methods in classes designed for inheritance, the contract should say <strong>what</strong> the method does rather than <strong>how</strong> it does its job.</li>
  <li>Methods should document pre- and postconditions, side effects, thread safety, exceptions</li>
  <li>The first “sentence” of each doc comment should be the summary description</li>
  <li>When documenting a generic type or method, be sure to document all type parameters</li>
  <li>When documenting an enum type, be sure to document the constants</li>
  <li>When documenting an annotation type, be sure to document any members</li>
</ul>

<h3 id="item-45-minimize-the-scope-of-local-variables">Item 45: Minimize the scope of local variables</h3>

<ul>
  <li>The most powerful technique for minimizing the scope of a local variable is to declare it where it is first used</li>
  <li>Nearly every local variable declaration should contain an initializer (<code>try-catch</code> block is an exception)</li>
  <li><code>for</code> loop allows to declare loop variable, prefer it over <code>while</code></li>
  <li>Keep methods small and focused</li>
</ul>

<h3 id="item-46-prefer-for-each-loops-to-traditional-for-loops">Item 46: Prefer for-each loops to traditional for loops</h3>

<ul>
  <li><code>foreach</code> saves from subtle bugs, copy-paste errors, improves readability and maintainability</li>
  <li><code>foreach</code> introduces no performance penalty</li>
  <li>Implement <code>Iterable</code> interface to use custom class in <code>foreach</code> loop</li>
  <li><code>foreach</code> is not used in
    <ul>
      <li>filtering (no access to iterator to call <code>remove</code>)</li>
      <li>transforming (no access to index element to apply change)</li>
      <li>parallel iteration (needed few iterators and control locks)</li>
    </ul>
  </li>
</ul>

<h3 id="item-47-know-and-use-the-libraries">Item 47: Know and use the libraries</h3>

<ul>
  <li>By using a standard library, you take advantage of the knowledge of the experts who wrote it and the experience of those who used it before you</li>
  <li>If a flaw were to be discovered, it would be fixed in the next release</li>
  <li>With using libraries you don’t have to waste your time writing ad hoc solutions to problems that are only marginally related to your work</li>
  <li>Performance of standard libraries tends to improve over time, with no effort on your part</li>
  <li>Libraries tend to gain new functionality over time</li>
</ul>

<h3 id="item-48-avoid-float-and-double-if-exact-answers-are-required">Item 48: Avoid float and double if exact answers are required</h3>

<ul>
  <li>The <code>float</code> and <code>double</code> types are not suited for monetary calculations because it is impossible to represent 0.1 (or any other negative power of ten) as a <code>float</code> or <code>double</code> exactly</li>
  <li>Use <code>BigDecimal</code>, <code>int</code>, or <code>long</code> for monetary calculations</li>
  <li><code>BigDecimal</code> has full control over rounding</li>
  <li>If performance is crucial, you don’t mind keeping track of the decimal point yourself, and the quantities aren’t too big, use <code>int</code> or <code>long</code></li>
</ul>

<h3 id="item-49-prefer-primitive-types-to-boxed-primitives">Item 49: Prefer primitive types to boxed primitives</h3>

<ul>
  <li>Primitives have only their values, whereas boxed primitives have identities distinct from their values.</li>
  <li>Boxed primitive may have <code>null</code> value</li>
  <li>Primitives more time and space-efficient than boxed primitives</li>
  <li>Applying the <code>==</code> operator to boxed primitives is almost always wrong</li>
  <li>When you mix primitives and boxed primitives in a single operation, the boxed primitive is auto-unboxed,</li>
  <li>Use boxed primitives as type parameters in parameterized types</li>
  <li>Use boxed primitives when making reflective method invocations</li>
</ul>

<h3 id="item-50-avoid-strings-where-other-types-are-more-appropriate">Item 50: Avoid strings where other types are more appropriate</h3>

<ul>
  <li>Strings are poor substitutes for other value types (<code>5</code> is better than <code>"5"</code>)</li>
  <li>Strings are poor substitutes for enum types</li>
  <li>Strings are poor substitutes for aggregate types; to access individual fields you must parse string</li>
</ul>

<h3 id="item-51-beware-the-performance-of-string-concatenation">Item 51: Beware the performance of string concatenation</h3>

<ul>
  <li>Using the string concatenation operator repeatedly to concatenate n strings requires O(n^2) time</li>
  <li>To achieve acceptable performance, use a <code>StringBuilder</code> instead</li>
</ul>

<h3 id="item-52-refer-to-objects-by-their-interfaces">Item 52: Refer to objects by their interfaces</h3>

<ul>
  <li>If appropriate interface types exist, then parameters, return values, variables, and fields should all be declared using interface types</li>
  <li>If you depend on any special properties of an implementation, document these requirements where you declare the variable</li>
</ul>

<h3 id="item-53-prefer-interfaces-to-reflection">Item 53: Prefer interfaces to reflection</h3>

<ul>
  <li>Reflection provides programmatic access to the class’s member names, field types, method signatures, etc.</li>
  <li>Using reflection have disadvantages
    <ul>
      <li>No compile-time type checking</li>
      <li>Code verbosity</li>
      <li>Performance suffers</li>
    </ul>
  </li>
  <li>As a rule, objects should not be accessed reflectively in normal applications at runtime</li>
  <li>Create instances reflectively and access them normally via their interface or superclass</li>
  <li>Using reflection cause compiler warnings</li>
</ul>

<h3 id="item-54-use-native-methods-judiciously">Item 54: Use native methods judiciously</h3>

<ul>
  <li>The Java Native Interface (JNI) allows Java applications to call native methods, which are special methods written in native programming languages such as C or C++</li>
  <li>JNI has three main uses
    <ul>
      <li>Access to platform-specific facilities such as registries and file locks</li>
      <li>Access to libraries of legacy code, which could in turn provide access to legacy data</li>
      <li>Used to write performance-critical parts of applications</li>
    </ul>
  </li>
  <li>Do not use native methods for improved performance</li>
  <li>Applications using native methods have disadvantages
    <ul>
      <li>programs are not immune to memory corruption errors</li>
      <li>less portable</li>
      <li>difficult to debug</li>
    </ul>
  </li>
</ul>

<h3 id="item-55-optimize-judiciously">Item 55: Optimize judiciously</h3>

<ul>
  <li>Premature optimization is the root of all evil</li>
  <li>Strive to write good programs rather than fast ones</li>
  <li>Strive to avoid design decisions that limit performance</li>
  <li>Consider the performance consequences of your API design decisions</li>
  <li>Measure performance before and after each attempted optimization</li>
</ul>

<h3 id="item-56-adhere-to-generally-accepted-naming-conventions">Item 56: Adhere to generally accepted naming conventions</h3>

<ul>
  <li>Typographical
    <ul>
      <li>Package: <code>com.google.inject</code>, <code>org.joda.time.format</code></li>
      <li>Class/Interface: <code>Timer</code>, <code>FutureTask</code>, <code>LinkedHashMap</code>, <code>HttpServlet</code></li>
      <li>Method/Field: <code>remove</code>, <code>ensureCapacity</code>, <code>getSrc</code></li>
      <li>Constants: <code>MIN_VALUE</code>, <code>NEGATIVE_INFINITY</code></li>
      <li>Local variable: <code>i</code>, <code>href</code>, <code>houseNumber</code></li>
      <li>Type parameter: <code>T</code>, <code>E</code>, <code>K</code>, <code>V</code>, <code>T1</code>, <code>T2</code></li>
    </ul>
  </li>
  <li>Grammatical
    <ul>
      <li>Class - <em>noun</em>: <code>Timer</code>, <code>Task</code></li>
      <li>Interface - <em>noun</em>, <em>adjective</em> ends with <em>able</em>: <code>Comparator</code>, <code>Comparable</code></li>
      <li>Annotation - <em>noun</em>, <em>verb</em>, <em>preposition</em>, <em>adjective</em>: <code>@Test</code>, <code>@Autowired</code>, <code>@ImplementedBy</code>, <code>@ThreadSafe</code></li>
      <li>Method - <em>verb</em>, rarely <em>noun</em>: <code>drawImage</code>, <code>getDimension</code>, <code>isInterrupted</code>, <code>size</code></li>
      <li>Field - <em>noun</em>: <code>height</code>, <code>capacity</code></li>
    </ul>
  </li>
  <li>Conventions should not be followed blinfly if long-held conventional usage dictates otherwise</li>
</ul>

<h3 id="item-57-use-exceptions-only-for-exceptional-conditions">Item 57: Use exceptions only for exceptional conditions</h3>

<ul>
  <li>Exceptions slower than mormal checks</li>
  <li>Placing code inside a try-catch block inhibits certain optimizations that modern JVM implementations might otherwise perform</li>
  <li>A well-designed API must not force its clients to use exceptions for ordinary control flow</li>
</ul>

<h3 id="item-58-use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors">Item 58: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors</h3>

<ul>
  <li>Java provides three kinds of throwables: checked exceptions, runtime exceptions, and errors</li>
  <li>Checked exceptions <em>force</em> the caller to handle them </li>
  <li>Use checked exceptions for conditions from which the caller can reasonably be expected to recover</li>
  <li>Unchecked exceptions indicate programming error and not needed to be handled <em>almost</em> always</li>
  <li>Errors indicated JVM problems and not needed to be handled at all</li>
</ul>

<h3 id="item-59-avoid-unnecessary-use-of-checked-exceptions">Item 59: Avoid unnecessary use of checked exceptions</h3>

<ul>
  <li>Checked exceptions <em>force</em> the caller to handle them in <code>try-catch</code> block, or propagate outward</li>
  <li>If catching exception provide no benefit (<em>recovery</em>, <em>logging</em>) use unchecked exception</li>
  <li>One technique for turning a checked exception into an unchecked exception is to break the method that throws the exception into two methods, additional method returns a boolean that indicates whether the exception would be thrown</li>
</ul>

<h3 id="item-60-favor-the-use-of-standard-exceptions">Item 60: Favor the use of standard exceptions</h3>

<ul>
  <li><code>IllegalArgumentException</code> caller passes in an argument whose value is inappropriate (e.g. negative value for square root)</li>
  <li><code>IllegalStateException</code> invocation is illegal because of the state of the receiving object (e.g. partially initialized object)</li>
  <li><code>NullPointerException</code> and <code>IndexOutOfBoundsException</code> are more specific versions of <code>IllegalArgumentException</code></li>
  <li><code>ConcurrentModificationException</code> object that was designed for use by a single thread or with external synchronization detects that it is being (or has been) concurrently modified.</li>
  <li><code>UnsupportedOperationException</code> used by implementations that fail to implement one or more optional operations defined by an interface</li>
</ul>

<h3 id="item-61-throw-exceptions-appropriate-to-the-abstraction">Item 61: Throw exceptions appropriate to the abstraction</h3>

<ul>
  <li><strong>Exception translation</strong>. Higher layers should catch lower-level exceptions and, in their place, throw exceptions that can be explained in terms of the higher-level abstraction</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">try</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">// Use lower-level abstraction to do our bidding</span>
</span><span class="line"><span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">LowerLevelException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  <span class="k">throw</span> <span class="k">new</span> <span class="nf">HigherLevelException</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><strong>Exception chaining</strong>. Higher-level exception could contain reference to lower-level exception (e.g for debugging)</li>
  <li>While exception translation is superior to mindless propagation of exceptions from lower layers, it should not be overused</li>
</ul>

<h3 id="item-62-document-all-exceptions-thrown-by-each-method">Item 62: Document all exceptions thrown by each method</h3>

<ul>
  <li>Always document checked exceptions with javadoc <code>@throws</code> tag</li>
  <li>Do not document multiple excetions by their common superclass (<code>@throws Exception</code> is bad)</li>
  <li>Document <em>expected</em> unchecked exceptions with javadoc <code>@throws</code> tag</li>
  <li>Do not include unchecked exceptions in method <code>throws</code> declaration</li>
  <li>If an exception is thrown by many methods in a class for the same reason, it is acceptable to document the exception in the class’s documentation comment</li>
</ul>

<h3 id="item-63-include-failure-capture-information-in-detail-messages">Item 63: Include failure-capture information in detail messages</h3>

<ul>
  <li>To capture the failure, the detail message of an exception should contain the values of all parameters and fields that “contributed to the exception”</li>
  <li>To avoid verbosity, include only <em>useful</em> information to exception message</li>
  <li>Exception detail message for programmers, not for users</li>
</ul>

<h3 id="item-64-strive-for-failure-atomicity">Item 64: Strive for failure atomicity</h3>

<ul>
  <li><strong>Failure atomicity</strong> (failed method invocation should leave the object in the state that it was in prior to the invocation)</li>
  <li>If an object is immutable, failure atomicity is free</li>
  <li>If ab object is mutable
    <ul>
      <li>Check parameters for validity before performing the operation</li>
      <li>Perform partial computations and then check for validity</li>
      <li>Write recovery code to return object to its original state after exception</li>
      <li>Make temporary code, apply changes and then replace original object if no exceptions are thrown</li>
    </ul>
  </li>
  <li>Failure atomicity is not always desirable (implementation complexity, performance)</li>
  <li>If method is not failure atomic, reflect that in documentation</li>
</ul>

<h3 id="item-65-dont-ignore-exceptions">Item 65: Don’t ignore exceptions</h3>

<ul>
  <li>Don’t ignore exceptions!</li>
  <li>An empty catch block defeats the purpose of exceptions</li>
  <li>At the very least, the catch block should contain a comment explaining why it is appropriate to ignore the exception</li>
</ul>

<h3 id="item-66-synchronize-access-to-shared-mutable-data">Item 66: Synchronize access to shared mutable data</h3>

<ul>
  <li>Synchronization prevent a thread from observing an object in an inconsistent state</li>
  <li>Synchronization ensures that each thread entering a synchronized method or block sees the effects of all previous modifications that were guarded by the same lock</li>
  <li>Reading or writing a variable is atomic unless the variable is of type <code>long</code> or <code>double</code></li>
  <li>Do not use <code>Thread.stop</code></li>
  <li>A recommended way to stop one thread from another is to have the first thread poll a <code>boolean</code> field that is initially <code>false</code> but can be set to <code>true</code> by the second thread to indicate that the first thread is to stop itself</li>
  <li><strong>Liveness failure</strong> - the program fails to make progress</li>
  <li>Synchronization has no effect unless both read and write operations are synchronized</li>
  <li>Increment operator (<code>++</code>) is not atomic</li>
  <li><strong>Safety failure</strong> - the program computes the wrong results</li>
  <li>Strive to assign mutable data to a single thread</li>
</ul>

<h3 id="item-67-avoid-excessive-synchronization">Item 67: Avoid excessive synchronization</h3>

<ul>
  <li>To avoid liveness and safety failures, never give control to the client within a synchronized method or block</li>
  <li><em>Alien</em> methods may cause data corruption, deadlocks</li>
  <li>Java locks are reentrant</li>
  <li><code>CopyOnWriteArrayList</code> is a variant of <code>ArrayList</code> in which all write operations are implemented by making a fresh copy of the entire underlying array</li>
  <li>Do as little work as possible inside synchronized regions</li>
  <li>When in doubt, do not synchronize your class, but document that it is not thread-safe</li>
</ul>

<h3 id="item-68-prefer-executors-and-tasks-to-threads">Item 68: Prefer executors and tasks to threads</h3>

<ul>
  <li>Executor framework separates unit of work (task) and mechanism (thread creation)</li>
  <li><code>Thread</code> is no longer a key abstraction, use <code>Runnable</code> or <code>Callable</code></li>
  <li><code>Executors.newCachedThreadPool</code> good choice for lightly-loaded server, if no threads available for submitted task, new one will be created</li>
  <li><code>Executors.newFixedThreadPool(n)</code> good choice for heavily-loaded server, Only <code>n</code> threads will be created</li>
</ul>

<h3 id="item-69-prefer-concurrency-utilities-to-wait-and-notify">Item 69: Prefer concurrency utilities to wait and notify</h3>

<ul>
  <li>Prefer higher-level concurrency utilities (Executor Framework, concurrent collections and synchronizers) to <code>wait</code> and <code>notify</code></li>
  <li><code>ConcurrentHashMap</code> is optimized for retrieval operations</li>
  <li>Use <code>ConcurrentHashMap</code> in preference to <code>Collections.synchronizedMap</code> or <code>Hashtable</code></li>
  <li><code>BlockingQueue</code> used for producer-consumer queues</li>
  <li><code>CountdownLatch</code> is a single-use barrier that allow one or more threads to wait for one or more other threads to do something</li>
  <li>For interval timing, always use <code>System.nanoTime</code> in preference to <code>System.currentTimeMillis</code>. <code>System.nanoTime</code> is both more accurate and more precise, and it is not affected by adjustments to the system’s real-time clock.</li>
  <li><code>CyclicBarrier</code> could be used if you need multiple <code>CountDownLatch</code> objects</li>
  <li>Always use the <em>wait loop</em> idiom to invoke the <code>wait</code> method; never invoke it outside of a loop</li>
</ul>

<h3 id="item-70-document-thread-safety">Item 70: Document thread safety</h3>

<ul>
  <li>The presence of the synchronized modifier in a method declaration is an implementation detail, not a part of its exported API</li>
  <li>To enable safe concurrent use, a class must clearly document what level of thread safety it supports
    <ul>
      <li><strong>immutable</strong> - Instances of this class appear constant. No external synchronization is necessary</li>
      <li><strong>unconditionally thread-safe</strong> - Instances of this class are mutable, but the class has sufficient internal synchronization that its instances can be used concurrently without the need for any external synchronization</li>
      <li><strong>conditionally thread-safe</strong> - Like unconditionally thread-safe, except that some methods require external synchronization for safe concurrent use. Examples include the collections returned by the Collections.synchronized wrappers, whose iterators require external synchronization</li>
      <li><strong>not thread-safe</strong> - Instances of this class are mutable. To use them concurrently, clients must surround each method invocation (or invocation sequence) with external synchronization of the clients’ choosing</li>
      <li><strong>thread-hostile</strong> - This class is not safe for concurrent use even if all method invocations are surrounded by external synchronization. Thread hostility usually results from modifying static data without synchronization. No one writes a thread-hostile class on purpose; such classes result from the failure to consider concurrency</li>
    </ul>
  </li>
  <li>To prevent DOS attack, you can use a private lock object instead of using synchronized methods</li>
</ul>

<h3 id="item-71-use-lazy-initialization-judiciously">Item 71: Use lazy initialization judiciously</h3>

<ul>
  <li>Best advice for lazy initialization is “don’t do it unless you need to”</li>
  <li>If you use lazy initialization to break an initialization circularity, use a synchronized accessor</li>
  <li>If you need to use lazy initialization for performance on a static field, use the <em>lazy initialization holder class</em> idiom</li>
  <li>If you need to use lazy initialization for performance on an instance field, use the <em>double-check</em> idiom</li>
</ul>

<h3 id="item-72-dont-depend-on-the-thread-scheduler">Item 72: Don’t depend on the thread scheduler</h3>

<ul>
  <li>Any program that relies on the thread scheduler for correctness or performance is likely to be nonportable.</li>
  <li>The best way to write a robust, responsive, portable program is to ensure that the average number of <em>runnable</em> threads is not significantly greater than the number of processors</li>
  <li>Do not rely on <code>Thread.yield</code> because it has no testable semantics</li>
  <li>Use <code>Thread.sleep(1)</code> instead of <code>Thread.yield()</code> for concurrency testing</li>
  <li>Thread priorities are among the least portable features of the Java platform</li>
</ul>

<h3 id="item-73-avoid-thread-groups">Item 73: Avoid thread groups</h3>

<ul>
  <li>Thread groups do not provide any security functionality</li>
  <li>Thread API is weak</li>
  <li>Prior to release 1.5, there was one small piece of functionality that was available only with the ThreadGroup API the <code>ThreadGroup.uncaughtException</code> method was the only way to gain control when a thread threw an uncaught exception. As of release 1.5, however, the same functionality is available with <code>Thread.setUncaughtExceptionHandler</code> method.</li>
</ul>

<h3 id="item-74-implement-serializable-judiciously">Item 74: Implement Serializable judiciously</h3>

<ul>
  <li>Implementing <code>Serializable</code> decreases the flexibility to change a class’s implementation once it has been released
    <ul>
      <li><code>private</code> and <code>package-private</code> fields become part of its exported API</li>
      <li>incompatible changes after deserialization lead to failure</li>
    </ul>
  </li>
  <li>Define <code>serialVersionUID</code> to avoid <code>InvalidClassException</code></li>
  <li>Because there is no explicit constructor associated with deserialization, it is easy to forget that you must ensure that it guarantees all of the invariants established by the constructors</li>
  <li>Releasing new version of serialized class greatly improves number of test-cases need to be verified</li>
  <li>Classes designed for inheritance should rarely implement <code>Serializable</code></li>
  <li>You should consider providing a parameterless constructor on nonserializable classes designed for inheritance</li>
  <li>Use <em>thread-safe state machine</em> pattern (atomic-reference to enum) to implement a serializable superclass</li>
  <li>Inner classes should not implement <code>Serializable</code></li>
</ul>

<h3 id="item-75-consider-using-a-custom-serialized-form">Item 75: Consider using a custom serialized form</h3>

<ul>
  <li>Do not accept the default serialized form without first considering whether it is appropriate</li>
  <li>The default serialized form is likely to be appropriate if an object’s physical representation is identical to its logical content</li>
  <li>Even if you decide that the default serialized form is appropriate, you often must provide a readObject method to ensure invariants and security</li>
  <li>Before deciding to make a field nontransient, convince yourself that its value is part of the logical state of the object</li>
  <li>Declare an explicit serial version UID in every serializable class you write</li>
</ul>

<h3 id="item-76-write-readobject-methods-defensively">Item 76: Write readObject methods defensively</h3>

<ul>
  <li>For classes with object reference fields that must remain private, defensively copy each object in such a field. Mutable components of immutable classes fall into this category.</li>
  <li>Check any invariants and throw an <code>InvalidObjectException</code> if a check fails. The checks should follow any defensive copying.</li>
  <li>If an entire object graph must be validated after it is deserialized, use the <code>ObjectInputValidation</code> interface</li>
  <li>Do not invoke any overridable methods in the class, directly or indirectly.</li>
</ul>

<h3 id="item-77-for-instance-control-prefer-enum-types-to-readresolve">Item 77: For instance control, prefer enum types to readResolve</h3>

<ul>
  <li>To satisfy singleton property for serializable object, implement <code>readResolve</code></li>
  <li>If you depend on <code>readResolve</code> for instance control, all instance fields with object reference types must be declared <code>transient</code></li>
  <li><code>readResolve</code> is not obsolete. It is needed for writing a serializable instance-controlled class whose instances are not known at compile time</li>
  <li>Use enum types to enforce instance control invariants wherever possible</li>
</ul>

<h3 id="item-78-consider-serialization-proxies-instead-of-serialized-instances">Item 78: Consider serialization proxies instead of serialized instances</h3>

<ul>
  <li>Serialization proxy is a private static inner class implements Serializable and reflects serializable data for original object</li>
  <li>Add <code>writeReplace</code> method to proxy class. Serialization system emits a proxy instance instead of an instance of the enclosing class.</li>
  <li>Add <code>readObject</code> method to proxy class. Attacker wouldn’t be able to violate class invariants.</li>
  <li>Add <code>readResolve</code> method to proxy class that returns logically equialent instance of the enclosing class.</li>
  <li>The serialization proxy pattern has some limitations:
    <ul>
      <li>It is not compatible with classes that are extendable by their clients</li>
      <li>It is not compatible with some classes whose object graphs contain circularities</li>
      <li>Serialization is slower than standard approach</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 5]]></title>
    <link href="http://mishadoff.github.io/blog/programming-digest-5/"/>
    <updated>2014-06-06T13:31:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/programming-digest-5</id>
    <content type="html"><![CDATA[<p>Programming Sucks.</p>

<!-- more -->

<h3 id="programming-suckshttpstilldrinkingorgprogramming-sucks">1. <a href="http://stilldrinking.org/programming-sucks">Programming Sucks</a></h3>

<blockquote>
  <p>…many of the programs you depend on are written by dicks and idiots</p>
</blockquote>

<p>Funny ranting about crazy programming life.</p>

<blockquote>
  <p>Every programmer occasionally, when nobody’s home, turns off the lights, pours a glass of scotch, puts on some light German electronica, and opens up a file on their computer…This file is Good Code.</p>
</blockquote>

<h3 id="functional-programming-for-the-rest-of-ushttpwwwdefmacroorgramblingsfphtml">2. <a href="http://www.defmacro.org/ramblings/fp.html">Functional Programming For The Rest Of Us</a></h3>

<p>There are two types of people in functional programming world:
those who use monads and those who don’t know they use monads.</p>

<p>This is a good overview that helps to convince your colleague to use fp without monads, applicative functors and other theoretical shit.</p>

<h3 id="game-programming-patternshttpgameprogrammingpatternscom">3. <a href="http://gameprogrammingpatterns.com/">Game Programming Patterns</a></h3>

<p>A set of patterns and techniques applicable to game development. Probably some of them you’ve already used. Unfortunately, examples in C++. </p>

<h3 id="a-hackers-guide-to-githttpwildlyinaccuratecoma-hackers-guide-to-git">4. <a href="http://wildlyinaccurate.com/a-hackers-guide-to-git">A Hacker’s Guide to Git</a></h3>

<p>Pour some light on git internals. Seems like almost everything in git is just a hashcode.</p>

<h3 id="is-tdd-deadhttpmartinfowlercomarticlesis-tdd-dead">5. <a href="http://martinfowler.com/articles/is-tdd-dead/">Is TDD Dead?</a></h3>

<p>Hangouts with Martin Fowler, Kent Beck and David Heinemeier Hansson about TDD. Do not test everything.</p>

<h3 id="character-encodingshttpbloggatunkacom20140425character-encodings-for-modern-programmers">6. <a href="http://blog.gatunka.com/2014/04/25/character-encodings-for-modern-programmers/">Character Encodings</a></h3>

<p>A history and caveats of encodings. Windows sucks.</p>

<h3 id="principles-of-high-performance-programshttpbloglibtorrentorg201212principles-of-high-performance-programs">7. <a href="http://blog.libtorrent.org/2012/12/principles-of-high-performance-programs/">Principles Of High Performance Programs</a></h3>

<p>Generic useful rules you may consider when building high-performance applications. Memory latency, context switch, granularity and other things explained.</p>

<h3 id="software-talks-for-the-ageshttppchristensencomblogarticlessoftware-talks-for-the-ages">8. <a href="http://pchristensen.com/blog/articles/software-talks-for-the-ages/">Software Talks for the Ages</a></h3>

<p>Meta one. Good set of programming talks.
<a href="http://vimeo.com/25958308">50 in 50</a> is a pure gold.</p>

<h3 id="how-the-cpu-workshttpswwwyoutubecomwatchvcnnttxabua">9. <a href="https://www.youtube.com/watch?v=cNN_tTXABUA">How the CPU works</a></h3>

<p>This is quite interesting.</p>

<h3 id="httpcodegolfstackexchangecomquestions28786write-a-program-that-makes-2-2-5">10. <a href="http://codegolf.stackexchange.com/questions/28786/write-a-program-that-makes-2-2-5">2 + 2 = 5</a></h3>

<p>Stackoverflow discussion with examples how to write a program that makes <code>2+2=5</code>.</p>

<blockquote>
  <p>That. Is. Evil.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Pitfalls: Part 1]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-pitfalls-part-1/"/>
    <updated>2014-05-22T01:48:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-pitfalls-part-1</id>
    <content type="html"><![CDATA[<p>Clojure is a great language, and as every language,
it has some unobvious and strange things, which seem confusing.</p>

<p>Some of such things are gathered here.
Most of them encountered by stupidity, docs misunderstanding,
clojure specifics and procrastination.</p>

<!-- more -->

<h3 id="anybody-home">1. Anybody home?</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">contains? </span><span class="p">[</span><span class="mi">10</span> <span class="mi">20</span> <span class="mi">30</span><span class="p">]</span> <span class="mi">20</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="nv">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Surprised?</p>

<p>The issue here is <code>contains?</code> function
checks if <em>key</em> (not a value!) is present in collection.
For vector - key is index, and obviously there is no 20th element.</p>

<p>If you need to check if <em>value</em> is present in collection,
use <code>some</code> predicate:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">some </span><span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="nv">%</span> <span class="mi">20</span><span class="p">)</span> <span class="p">[</span><span class="mi">10</span> <span class="mi">20</span> <span class="mi">30</span><span class="p">])</span> <span class="nv">=&gt;</span> <span class="nv">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Keep in mind this function works in linear time.
If you need to call it often, build a set and use
it as a function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">numbers</span> <span class="p">(</span><span class="nb">set </span><span class="p">[</span><span class="mi">10</span> <span class="mi">20</span> <span class="mi">30</span><span class="p">]))</span>
</span><span class="line"><span class="p">(</span><span class="nf">numbers</span> <span class="mi">20</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">20</span> <span class="c1">;; treated as true</span>
</span><span class="line"><span class="p">(</span><span class="nf">numbers</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="nv">nil</span> <span class="c1">;; treated as false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: if set contains <code>nil</code> or <code>false</code>, it won’t work.
More discussion <a href="http://stackoverflow.com/questions/3249334/test-whether-a-list-contains-a-specific-value-in-clojure">here</a>.</p>

<h3 id="breaking-the-law">2. Breaking the Law</h3>

<p>You need stack. In clojure you can treat <code>list</code> like a stack.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="c1">;; take stack head</span>
</span><span class="line"><span class="p">(</span><span class="nb">peek </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span> <span class="nv">=&gt;</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; pop stack</span>
</span><span class="line"><span class="p">(</span><span class="nb">pop </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; push item into stack</span>
</span><span class="line"><span class="p">(</span><span class="nb">cons </span><span class="mi">0</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Everything is fine. But if you call <code>pop</code> after <code>cons</code>…</p>

<blockquote>
  <p>ClassCastException clojure.lang.Cons cannot be cast to clojure.lang.IPersistentStack</p>
</blockquote>

<p>The problem is <code>cons</code> is type destructive operation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">type</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>            <span class="nv">=&gt;</span> <span class="nv">clojure.lang.PersistentList</span>
</span><span class="line"><span class="p">(</span><span class="nf">type</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">0</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>   <span class="nv">=&gt;</span> <span class="nv">clojure.lang.Cons</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And clearly, there is no <code>pop</code> defined for <code>Cons</code> type.</p>

<p>To preserve collection type, use <code>conj</code> function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">type</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>            <span class="nv">=&gt;</span> <span class="nv">clojure.lang.PersistentList</span>
</span><span class="line"><span class="p">(</span><span class="nf">type</span> <span class="p">(</span><span class="nb">conj </span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="mi">0</span><span class="p">))</span>   <span class="nv">=&gt;</span> <span class="nv">clojure.lang.PersistentList</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="apples-or-oranges-part-i">3. Apples or Oranges? Part I</h3>

<p>What’s the difference between
<code>(last [1 2 3])</code> and <code>(last '(1 2 3))</code>?</p>

<p>Functionally there is no difference, both snippets return <code>3</code></p>

<p>Moreover, from performance view there is no difference as well.
Both snippets work in linear time. Linear. O(n). Even for vector.</p>

<p>What’s the difference between
<code>(count [1 2 3])</code> and <code>(count '(1 2 3))</code>?</p>

<p>Much better here, <code>count</code> works in constant time for vector
and linear for list. So, if you really need fast <code>last</code> for vector,
use <code>count</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="c1">;; 10M size vector</span>
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">v</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span><span class="nv">e7</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nb">last </span><span class="nv">v</span><span class="p">))</span> <span class="nv">=&gt;</span> <span class="mi">9999999</span>
</span><span class="line"><span class="c1">;; &quot;Elapsed time: 1704.172859 msecs&quot;</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nb">get </span><span class="nv">v</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nb">count </span><span class="nv">v</span><span class="p">))))</span> <span class="nv">=&gt;</span> <span class="mi">9999999</span>
</span><span class="line"><span class="c1">;; &quot;Elapsed time: 0.087302 msecs&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Huge difference</em>.</p>

<p>Do not use vector specific functions
to list. Also, consider using <code>mapv</code>
instead of <code>map</code> when processing vectors.</p>

<h3 id="apples-or-oranges-part-ii">4. Apples or Oranges? Part II</h3>

<p>Everybody knows <code>reduce</code> and <code>apply</code> functions.
Sometimes using choosing between them does not make any difference.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="c1">;; 100K numbers</span>
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">N</span> <span class="p">(</span><span class="nf">repeatedly</span> <span class="mi">1</span><span class="nv">e6</span> <span class="o">#</span><span class="p">(</span><span class="nb">rand-int </span><span class="mi">100</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nb">reduce + </span><span class="nv">N</span><span class="p">))</span> <span class="nv">=&gt;</span> <span class="mi">49503683</span>
</span><span class="line"><span class="c1">;; &quot;Elapsed time: 311.496332 msecs&quot;</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nb">apply + </span><span class="nv">N</span><span class="p">))</span> <span class="nv">=&gt;</span> <span class="mi">49503683</span>
</span><span class="line"><span class="c1">;; &quot;Elapsed time: 339.624222 msecs&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Sometimes it does.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="c1">;; 10K strings</span>
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">S</span> <span class="p">(</span><span class="nf">repeatedly</span> <span class="mi">1</span><span class="nv">e5</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="s">&quot;1&quot;</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">count</span><span class="p">(</span><span class="nb">apply str </span><span class="nv">S</span><span class="p">)))</span> <span class="nv">=&gt;</span> <span class="mi">100000</span>
</span><span class="line"><span class="c1">;; &quot;Elapsed time: 35.027218 msecs&quot;</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">count</span><span class="p">(</span><span class="nb">reduce str </span><span class="nv">S</span><span class="p">)))</span> <span class="nv">=&gt;</span> <span class="mi">100000</span>
</span><span class="line"><span class="c1">;; &quot;Elapsed time: 24249.845948 msecs&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="refactor">5. Refactor</h3>

<p>Conditionals are horses of programming language.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">status</span> <span class="mi">500</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="nv">status</span> <span class="mi">403</span><span class="p">)</span>    <span class="s">&quot;login.html&quot;</span>
</span><span class="line">      <span class="p">(</span><span class="nb">= </span><span class="nv">status</span> <span class="mi">404</span><span class="p">)</span>    <span class="s">&quot;not_found.html&quot;</span>
</span><span class="line">      <span class="p">(</span><span class="nb">= </span><span class="nv">status</span> <span class="mi">500</span><span class="p">)</span>    <span class="s">&quot;server_fault.html&quot;</span>
</span><span class="line">      <span class="p">(</span><span class="nb">= </span><span class="nv">status</span> <span class="mi">200</span><span class="p">)</span>    <span class="s">&quot;index.html&quot;</span>
</span><span class="line">      <span class="ss">:else</span>             <span class="s">&quot;something_wrong.html&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pretty straightforward, but a piece <code>(= status %)</code> look ugly.
Let’s refactor it a bit and avoid repetition with <code>condp</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">status</span> <span class="mi">500</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">condp</span> <span class="nb">= </span><span class="nv">status</span>
</span><span class="line">       <span class="mi">403</span>    <span class="s">&quot;login.html&quot;</span>
</span><span class="line">       <span class="mi">404</span>    <span class="s">&quot;not_found.html&quot;</span>
</span><span class="line">       <span class="mi">500</span>    <span class="s">&quot;server_fault.html&quot;</span>
</span><span class="line">       <span class="mi">200</span>    <span class="s">&quot;index.html&quot;</span>
</span><span class="line">       <span class="ss">:else</span>  <span class="s">&quot;something_wrong.html&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Much better. Except we broke previous functionality.
If pass invalid status (let’s say 201) we get an exception:</p>

<blockquote>
  <p>IllegalArgumentException No matching clause: 201</p>
</blockquote>

<p>And that’s right: sugared keyword <code>:else</code> in <code>cond</code> behaves like regular clause in <code>condp</code>
To make working solution, just remove <code>:else</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">condp</span> <span class="nb">= </span><span class="nv">status</span>
</span><span class="line">       <span class="mi">403</span>    <span class="s">&quot;login.html&quot;</span>
</span><span class="line">       <span class="mi">404</span>    <span class="s">&quot;not_found.html&quot;</span>
</span><span class="line">       <span class="mi">500</span>    <span class="s">&quot;server_fault.html&quot;</span>
</span><span class="line">       <span class="mi">200</span>    <span class="s">&quot;index.html&quot;</span>
</span><span class="line">       <span class="s">&quot;something_wrong.html&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="dont-trust-your-eyes">6. Don’t trust your eyes</h3>

<p>Get this portable, pure, thread-safe, well-documented,
so beatiful and very awesome function:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">add</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class="line">  <span class="s">&quot;Performs addition operation.</span>
</span><span class="line"><span class="s">   More about addition here: http://en.wikipedia.org/wiki/Addition&quot;</span>
</span><span class="line">  <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What’s wrong here? Is it really <em>well-documented</em>? </p>

<p>If you have sources, then yes, you see all documentation.
But if you are library user you have no idea what function <code>add</code> might do. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">doc </span><span class="nv">add</span><span class="p">)</span>
</span><span class="line"><span class="c1">; -------------------------</span>
</span><span class="line"><span class="c1">; user/add</span>
</span><span class="line"><span class="c1">; ([a b])</span>
</span><span class="line"><span class="c1">;   nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Misplaced docstring. Transpose it with arglist.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">add</span>
</span><span class="line">  <span class="s">&quot;Performs addition operation.</span>
</span><span class="line"><span class="s">  More about addition here: http://en.wikipedia.org/wiki/Addition&quot;</span>
</span><span class="line">  <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">doc </span><span class="nv">add</span><span class="p">)</span>
</span><span class="line"><span class="c1">; -------------------------</span>
</span><span class="line"><span class="c1">; user/add</span>
</span><span class="line"><span class="c1">; ([a b])</span>
</span><span class="line"><span class="c1">;   Performs addition operation.</span>
</span><span class="line"><span class="c1">;   More about addition here: http://en.wikipedia.org/wiki/Addition</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: clojure lint tool <a href="https://github.com/jonase/eastwood">eastwood</a>
is able to find this mistake.</p>

<h3 id="it-depends">7. It depends</h3>

<p>There is less known, but useful feature <em>dynamic binding</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="o">^</span><span class="ss">:dynamic</span> <span class="nv">*DEBUG*</span> <span class="nv">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If your code depends on <code>*DEBUG*</code> binding,
its behaviour can be modified without changing
function definition</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">square</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">when </span><span class="nv">*DEBUG*</span> <span class="p">(</span><span class="nb">println </span><span class="s">&quot;call square&quot;</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">a</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">square</span> <span class="mi">10</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">100</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">binding </span><span class="p">[</span><span class="nv">*DEBUG*</span> <span class="nv">true</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">square</span> <span class="mi">10</span><span class="p">))</span>
</span><span class="line"><span class="c1">;; call square</span>
</span><span class="line"><span class="nv">=&gt;</span> <span class="mi">100</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you have another value, that depends on dynamic binding, it is not dynamic.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="o">^</span><span class="ss">:dynamic</span> <span class="nv">*DEBUG_PREFIX*</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="nv">*DEBUG*</span> <span class="s">&quot;DEBUG=TRUE&quot;</span> <span class="s">&quot;DEBUG=FALSE&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">binding </span><span class="p">[</span><span class="nv">*DEBUG*</span> <span class="nv">true</span><span class="p">]</span>
</span><span class="line">  <span class="nv">*DEBUG_PREFIX*</span><span class="p">)</span>
</span><span class="line"><span class="nv">=&gt;</span> <span class="s">&quot;DEBUG=FALSE&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To fix that make it as a no-arg function. It will obtain
dynamic binding right after the call.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">debug-prefix</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="nv">*DEBUG*</span> <span class="s">&quot;DEBUG=TRUE&quot;</span> <span class="s">&quot;DEBUG=FALSE&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">binding </span><span class="p">[</span><span class="nv">*DEBUG*</span> <span class="nv">true</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">debug-prefix</span><span class="p">))</span>
</span><span class="line"><span class="nv">=&gt;</span> <span class="s">&quot;DEBUG=TRUE&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="map-access-denied">8. MAP: Access Denied</h3>

<p>There are three ways to access map value</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">m</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Quentin Tarantino&quot;</span><span class="p">})</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; 1. By keyword</span>
</span><span class="line"><span class="p">(</span><span class="ss">:name</span> <span class="nv">m</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="s">&quot;Quentin Tarantino&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; 2. By map as a function</span>
</span><span class="line"><span class="p">(</span><span class="nf">m</span> <span class="ss">:name</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="s">&quot;Quentin Tarantino&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; 3. Using get</span>
</span><span class="line"><span class="p">(</span><span class="nb">get </span><span class="nv">m</span> <span class="ss">:name</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="s">&quot;Quentin Tarantino&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What version to use is a matter of style,
because they are almost always interchangeble,
but keep in mind some caveats.</p>

<p>First approach is bad, when your keys are strings
or whatever-not-a-function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">m</span> <span class="p">{</span><span class="s">&quot;name&quot;</span> <span class="s">&quot;Quentin Tarantino&quot;</span><span class="p">})</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="s">&quot;name&quot;</span> <span class="nv">m</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="nv">ClassCastException</span> <span class="nv">java.lang.String</span> <span class="nv">cannot</span> <span class="nv">be</span> <span class="nb">cast </span><span class="nv">to</span> <span class="nv">clojure.lang.IFn</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Second one is able to handle that, but instead it can throw NPE, when map is nil</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">m</span> <span class="nv">nil</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">m</span> <span class="ss">:name</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="nv">NullPointerException</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using <code>get</code> we avoid these pros, and access become more obvious.</p>

<p>I prefer first version when using keyword explicitly, otherwise access via <code>get</code></p>

<h3 id="thread-hack">9. Thread Hack</h3>

<p>Thread macro is a convenient way to implement sequential processing.</p>

<p>Thread First <code>-&gt;</code> inserts previous result
as a <em>first</em> argument for the next expression.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">http/get</span> <span class="nv">URL</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">validate-status</span><span class="p">)</span>
</span><span class="line">    <span class="ss">:body</span>
</span><span class="line">    <span class="ss">:data</span>
</span><span class="line">    <span class="p">(</span><span class="nf">first</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Thread Last <code>-&gt;&gt;</code> does the same,
but insert previous result as a <em>last</em> argument </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nb">range </span><span class="mi">100</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nb">map </span><span class="nv">square</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nb">filter </span><span class="nv">even?</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you need to insert previous result into specific position,
wrap next expression to one-arg anonymous functions.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">http/get</span> <span class="nv">URL</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="o">#</span><span class="p">(</span><span class="nf">validate-status</span> <span class="nv">%</span> <span class="ss">:throw-exception</span><span class="p">))</span>
</span><span class="line">     <span class="ss">:body</span>
</span><span class="line">     <span class="ss">:data</span>
</span><span class="line">     <span class="p">(</span><span class="o">#</span><span class="p">(</span><span class="nb">conj </span><span class="nv">%</span> <span class="p">[</span><span class="ss">:guard</span><span class="p">])))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="just-words">10. Just Words</h3>

<p>This one is not related to clojure, but interesting. Consider problem:</p>

<blockquote>
  <p>Find all words in a string</p>
</blockquote>

<p>Pretty obvious, huh?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\w+&quot;</span> <span class="s">&quot;Hello, world!&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">(</span><span class="s">&quot;Hello&quot;</span> <span class="s">&quot;world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We don’t want numbers and underscore appear inside word</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\w+&quot;</span> <span class="s">&quot;Hello, w_orld 1984!&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">(</span><span class="s">&quot;Hello&quot;</span> <span class="s">&quot;w_orld&quot;</span> <span class="s">&quot;1984&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Okay, use just letters:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;[a-zA-Z]+&quot;</span> <span class="s">&quot;Hello, w_orld 1984!&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">(</span><span class="s">&quot;Hello&quot;</span> <span class="s">&quot;w&quot;</span> <span class="s">&quot;orld&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>No, we don’t want broken words. Use <code>\b</code> word boundary regex.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\b[a-zA-Z]+\b&quot;</span> <span class="s">&quot;Hello, w_orld 1984!&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Solved?</p>

<p>Not for ukrainian</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\b[a-zA-Z]+\b&quot;</span> <span class="s">&quot;Привіт, світ 1984!&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And for every language which contains non-ascii letters in alphabet.
Use unicode letter regexp <code>\p{L}</code> instead.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\b\p{L}+\b&quot;</span> <span class="s">&quot;Привіт, світ 1984!&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">(</span><span class="s">&quot;Привіт&quot;</span> <span class="s">&quot;світ&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 023]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-023/"/>
    <updated>2014-05-10T18:11:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-023</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Find the sum of all the positive integers
which cannot be written as the sum of two abundant numbers.</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=23">http://projecteuler.net/problem=23</a></p>

<!-- more -->

<p>To define abundant number let’s revisit <code>sum-of-proper-divisors</code> from the <a href="http://mishadoff.github.io/blog/clojure-euler-problem-021">Clojure Euler: Problem 021</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">sum-of-proper-divisors</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">base</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">))</span> <span class="p">(</span><span class="nb">range </span><span class="mi">2</span> <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="nv">n</span><span class="p">)))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">reduce + </span><span class="mi">1</span> <span class="p">(</span><span class="nb">concat </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">base</span><span class="p">)</span> <span class="nv">base</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using that function, <code>abundant?</code> predicate just follows definition.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">abundant?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nf">sum-of-proper-divisors</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">n</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you look carefully at <code>sum-of-proper-divisors</code> it is buggy.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">sum-of-proper-divisors</span> <span class="mi">25</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">1</span> <span class="c1">;; instead of 6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Square numbers are not handled correctly.
To fix that we add one more list to <code>concat</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">sum-of-proper-divisors</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">divs</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">))</span> <span class="p">(</span><span class="nb">range </span><span class="mi">2</span> <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="nv">n</span><span class="p">)))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">reduce + </span><span class="mi">1</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nf">concat</span>
</span><span class="line">                      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">isq</span> <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nf">Math/sqrt</span> <span class="nv">n</span><span class="p">))]</span>      <span class="c1">;; added</span>
</span><span class="line">                        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">isq</span> <span class="nv">isq</span><span class="p">))</span> <span class="p">[</span><span class="nv">isq</span><span class="p">]</span> <span class="p">[]))</span>  <span class="c1">;; added</span>
</span><span class="line">                      <span class="nv">divs</span>
</span><span class="line">                      <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">divs</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Double check</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">sum-of-proper-divisors</span> <span class="mi">25</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Great! Next step is to find all integer numbers which can not be written as the sum of two abundant numbers.</p>

<p>Precalculate all abundant numbers:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">abundant</span> <span class="p">(</span><span class="nb">filter </span><span class="nv">abundant?</span> <span class="p">(</span><span class="nb">range </span><span class="mi">12</span> <span class="mi">28124</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we can build all numbers which can be written as
two abundant numbers and find their sum.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="nv">abundant</span> <span class="nv">j</span> <span class="nv">abundant</span>
</span><span class="line">           <span class="ss">:let</span> <span class="p">[</span><span class="nv">num</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">i</span> <span class="nv">j</span><span class="p">)]</span>
</span><span class="line">           <span class="ss">:when</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">num</span> <span class="mi">28124</span><span class="p">)]</span>
</span><span class="line">       <span class="nv">num</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nf">distinct</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">28124</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This solution works ~44 sec, too much.</p>

<p>More clever approach is to iterate from all integers upto 28124 and check if some number can be written as a sum of two abundant numbers.</p>

<p>The trick is simple: we building sorted set of abundant numbers</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">abundant</span> <span class="p">(</span><span class="nb">into </span><span class="p">(</span><span class="nf">sorted-set</span><span class="p">)</span> <span class="p">(</span><span class="nb">filter </span><span class="nv">abundant?</span> <span class="p">(</span><span class="nb">range </span><span class="mi">12</span> <span class="mi">28124</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For every integer number <code>n</code> we subtract one abundant number and check if <code>abundant</code> set contains result.
There is a good function <a href="http://clojuredocs.org/clojure_core/clojure.core/some">some</a> that makes our life easier.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">abundant-sum?</span> <span class="p">[</span><span class="nv">n</span> <span class="nv">abundant</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">some </span><span class="o">#</span><span class="p">(</span><span class="nf">abundant</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="nv">%</span><span class="p">))</span> <span class="nv">abundant</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finding the sum</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">28124</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nb">remove </span><span class="o">#</span><span class="p">(</span><span class="nf">abundant-sum?</span> <span class="nv">%</span> <span class="nv">abundant</span><span class="p">))</span>
</span><span class="line">     <span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It works ~26 sec.</p>

<p>Another optimization is to limit number of abundants in
<code>abundant-sum</code> function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">abundant-sum?</span> <span class="p">[</span><span class="nv">n</span> <span class="nv">abundant</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">some </span><span class="o">#</span><span class="p">(</span><span class="nf">abundant</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="nv">%</span><span class="p">))</span>
</span><span class="line">         <span class="p">(</span><span class="nb">take-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">%</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">abundant</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Time reduced to ~14 sec. Pretty good.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem023.clj">Code</a></p>

<p><strong>P.S.</strong> Buggy version of <code>sum-of-proper-divisor</code> solved the previous problem correctly, but it was just a luck. Make sure you test your functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Numberto: Expressions]]></title>
    <link href="http://mishadoff.github.io/blog/numberto-expressions/"/>
    <updated>2014-03-29T00:25:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/numberto-expressions</id>
    <content type="html"><![CDATA[<p>Numberto has new features!</p>

<!-- more -->

<p>In <a href="http://mishadoff.github.io/blog/announcing-numberto">previous post</a>
I wrote about simple clojure library <a href="https://github.com/mishadoff/numberto">numberto</a> for experiments with numbers.</p>

<p>New version of <em>numberto</em> has a bunch of new features.</p>

<h3 id="expressions">Expressions</h3>

<p>Expressions package provides two functions: <code>eval-infix</code> to evaluate infix expression
and <code>infix-&gt;prefix</code> to build prefix lisp-style expression from mathematical notation.</p>

<p>Let’s give it alias for simplicity</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">e</span> <span class="nv">eval-infix</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Evaluate simple math expression</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1+2&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or more complex</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1+2*(3-4/2)&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>handle priorities</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;2+2*2&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and left/right associativity</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1024/2/2/2/2&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">64</span>
</span><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;2^3^4&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">2417851639229258349412352</span><span class="nv">N</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oh, what’s this? Long numbers? Sure, ratios and floats supported as well</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1/3&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">1</span><span class="nv">/3</span>
</span><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1.1/0.9&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mf">1.2222222222222223</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Unary operations</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;(-1)^100&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>functions and symbols</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;sin(e) + sqrt(pi)&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mf">2.183235141408425</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>vararg functions</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;sum(1,2,3,sum())/max(1,2)&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can also provide bindings for unknown functions and symbols</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;factorial(n)/20&quot;</span>
</span><span class="line">   <span class="p">{</span><span class="ss">:bindings</span>
</span><span class="line">     <span class="p">{</span><span class="s">&quot;factorial&quot;</span> <span class="o">#</span><span class="p">(</span><span class="nb">reduce </span><span class="nv">*</span><span class="o">&#39;</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">%</span><span class="p">)))</span>
</span><span class="line">      <span class="s">&quot;n&quot;</span> <span class="mi">10</span><span class="p">}})</span>
</span><span class="line"><span class="nv">=&gt;</span> <span class="mi">181440</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Worth to mention that you can easily redefine existing
or define your own new unary, binary operations, functions
and symbols. Just add additional properties to <code>eval-infix</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="c1">;; return current time in millis</span>
</span><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;now()&quot;</span> <span class="p">{</span><span class="ss">:bindings</span> <span class="p">{</span><span class="s">&quot;now&quot;</span> <span class="o">#</span><span class="p">(</span><span class="nf">.getTime</span> <span class="p">(</span><span class="nf">java.util.Date.</span><span class="p">))}})</span> <span class="nv">=&gt;</span> <span class="nb">some long </span><span class="nv">number</span>
</span><span class="line"><span class="c1">;; override priorities</span>
</span><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1+2*3&quot;</span> <span class="p">{</span><span class="ss">:binary-ops</span> <span class="p">{</span><span class="s">&quot;+&quot;</span> <span class="p">{</span><span class="ss">:function</span> <span class="nb">+ </span><span class="ss">:priority</span> <span class="mi">100</span><span class="p">}}})</span> <span class="nv">=&gt;</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>infix-&gt;prefix</code> has exactly the same functionality, but it builds prefix expression instead.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">infix-&gt;prefix</span> <span class="s">&quot;(1+2)*3-(4/avg(3,5)-sum(1))&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nv">=&gt;</span>
</span><span class="line"><span class="s">&quot;(- (* (+ 1 2) 3) (- (/ 4 (avg 3 5)) (sum 1)))&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It can be useful if you googled some formula but bored to translate it manually to clojure.</p>

<p>For example, take the <a href="http://en.wikipedia.org/wiki/Simpson%27s_rule">Simpson’s rule</a></p>

<p><img src="http://upload.wikimedia.org/math/1/a/0/1a0fb4456375307fdde8ab85954d95be.png" alt="" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">infix-&gt;prefix</span> <span class="s">&quot;(b-a)/6*(f(a)+4*f((a+b)/2)+f(b))&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nv">=&gt;</span>
</span><span class="line"><span class="s">&quot;(* (/ (- b a) 6) (+ (+ (f a) (* 4 (f (/ (+ a b) 2)))) (f b)))&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="implementation">Implementation</h4>

<p>Would be good to try <a href="https://github.com/Engelberg/instaparse">instaparse</a> for such purpose,
but I decided to use custom implementation using standard
<a href="http://en.wikipedia.org/wiki/Shunting-yard_algorithm">Shunting-yard algorithm</a>.
Just couple of hacks added to handle unaries and vararg functions.
Code is awful. If you really want to dig in - run debug mode.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">binding </span><span class="p">[</span><span class="nv">*DEBUG*</span> <span class="nv">true</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1+2&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="limitations">Limitations</h4>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>No way to define non-prefix unary operation, like “10!” or “</td>
          <td>10</td>
          <td>”</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Can not handle simplified math form, like “2x^2 + 3^x + 5”.
Multiplication sign should be declared explicitly</li>
  <li>Not able to simplify ops in lisp-style expression. <code>(* (* 1 2) 3)</code> instead of <code>(* 1 2 3)</code></li>
  <li>False positives handling. Some stupid expressions indicates about error <code>(e "1+")</code>, some not <code>(e "1+()1)</code>. I still working on this, but it is not critical.</li>
</ul>

<h3 id="solvers">Solvers</h3>

<p>Here is the puzzle:</p>

<blockquote>
  <p>You have four numbers [3, 4, 5, 6].<br />
You have four binary operations [+, -, *, /] and parentheses ()</p>

  <p>How to insert operations between numbers to get number 42?</p>
</blockquote>

<p>Hah, that simple <code>3*4 + 5*6 = 42</code></p>

<p>Ok, get <code>42</code>, but you forced to use one division <code>/</code>.</p>

<p>Not so obvious?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">solve-insert-ops-num</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span> <span class="mi">42</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">([</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3+45-6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3/4*56&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3*4+5*6&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you use <code>solve-insert-ops</code> function it gives all possible values can be obtained by inserting operations between numbers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">solve-insert-ops</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">])</span> <span class="nv">=&gt;</span> <span class="c1">;; long list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Default implementation uses 4 basic operations, no parens and no restrictions. Instead, you can override options</p>

<p>to use parens, specify level</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">solve-insert-ops-num</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span> <span class="mi">42</span> <span class="p">{</span><span class="ss">:parens</span> <span class="mi">1</span><span class="p">})</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">([</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3+45-6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;(3+45)-6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3+(45-6)&quot;</span><span class="p">]</span>
</span><span class="line"> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3/4*56&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;(3/4)*56&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3/(4/56)&quot;</span><span class="p">]</span>
</span><span class="line"> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3*4+5*6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;(3*4)+5*6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3*4+(5*6)&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>limit some operations</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">solve-insert-ops-num</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span> <span class="mi">42</span> <span class="p">{</span><span class="ss">:rules</span> <span class="p">[[</span><span class="ss">:max</span> <span class="s">&quot;*&quot;</span> <span class="mi">1</span><span class="p">]]})</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">([</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3+45-6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3/4*56&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>:max</code>, <code>:min</code>, <code>:max-in-a-row</code>, <code>:min-in-a-row</code> options are supported.</p>

<p>Add new operations (supported by expressions package)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">solve-insert-ops-num</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span> <span class="mi">80</span>
</span><span class="line">                      <span class="p">{</span><span class="ss">:ops</span> <span class="p">[</span><span class="s">&quot;+&quot;</span> <span class="s">&quot;-&quot;</span> <span class="s">&quot;*&quot;</span> <span class="s">&quot;/&quot;</span> <span class="s">&quot;^&quot;</span><span class="p">]</span>
</span><span class="line">                       <span class="ss">:rules</span> <span class="p">[[</span><span class="ss">:max</span> <span class="s">&quot;^&quot;</span> <span class="mi">1</span><span class="p">]]})</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">([</span><span class="mi">80</span><span class="nv">N</span> <span class="s">&quot;3^4+5-6&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Keep in mind, always limit time consuming operations (<em>like</em> <code>^</code>) as it builds all possible permutations and you can wait your answer forever.</p>

<p>There are also couple of <em>new</em> interesting things, like
getting digits of <code>pi</code>, <code>e</code>, <code>sqrt(n)</code>, ratio numbers up to desired level and other. <a href="https://github.com/mishadoff/numberto/blob/master/doc/intro.md">Check it out</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 4]]></title>
    <link href="http://mishadoff.github.io/blog/programming-digest-4/"/>
    <updated>2013-11-25T22:50:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/programming-digest-4</id>
    <content type="html"><![CDATA[<p>How to live in the Kingdom of Nouns, why mathematicians cry, filling gaps in algorithms, portion of clojure, STM, HTTP and more.</p>

<!-- more -->

<h3 id="execution-in-the-kingdom-of-nounshttpsteve-yeggeblogspotcom200603execution-in-kingdom-of-nounshtml">1. <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Execution in the Kingdom of Nouns</a></h3>

<p>Another great Steve Yegge’s post. Not a post, a tale about <em>Javaland</em>, a place where all verbs are owned by nouns. Accept it like an analogy between OOP and FP.</p>

<blockquote>
  <p>Verbs in Javaland are responsible for all the work, but as they are held
in contempt by all, no Verb is ever permitted to wander about freely.
If a Verb is to be seen in public at all,
it must be escorted at all times by a Noun.</p>
</blockquote>

<p>Of course <em>to be escorted</em> must be replaced by <strong>VerbEscorter</strong>.</p>

<blockquote>
  <p>The Verb “execute”, and its synonymous cousins “run”, “start”, “go”,
“justDoIt”, “makeItSo”, and the like, can perform the work of any
other Verb by replacing it with an appropriate Executioner and a
call to execute(). Need to wait? Waiter.execute().
Brush your teeth? ToothBrusher(myTeeth).go().
Take out the garbage? TrashDisposalPlanExecutor.doIt().
No Verb is safe; all can be replaced by a Noun on the run.</p>
</blockquote>

<p>You are not forced to use functions everywhere, but use them where it is appropriate to simplify solution and avoid <a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">enterprise hell</a>. You know, not everything is an object. The same way not everything is a function. </p>

<h3 id="a-mathematicians-lamenthttpwwwmaaorgexternalarchivedevlinlockhartslamentpdf">2. <a href="http://www.maa.org/external_archive/devlin/LockhartsLament.pdf">A Mathematician’s Lament</a></h3>

<p>Long paper by Paul Lockhart about problems in mathematical education.</p>

<blockquote>
  <p>Math class is stupid and boring. - Students.</p>
</blockquote>

<p>Author claims that mathematics is an art, instead of some practical thing. Of course, it can be applied in real world and it is, but it’s not primary goal of math.</p>

<blockquote>
  <p>A mathematician, like a painter or poet is a maker
of patterns. If his patterns are more permanent than theirs,
it is because they are made wit <em>ideas</em>.</p>
</blockquote>

<p>Very exciting reading.</p>

<h3 id="algorithmshttpcstheorystackexchangecomquestions19759core-algorithms-deployed1977319773">3. <a href="http://cstheory.stackexchange.com/questions/19759/core-algorithms-deployed/19773#19773">Algorithms</a></h3>

<p>Algorithms are not just devils you need to learn for CS course or to prepare for interview. You can <em>apply</em> them to solve real-world problems. This SO answer provides links and some explanations where specific algorithm is used in linux kernel, chromium browser and some utils.</p>

<blockquote>
  <p>…
Red-Black trees are used for scheduling, virtual memory management,
to track file descriptors and directory entries, etc.</p>
</blockquote>

<blockquote>
  <p>grep, implements the Boyer-Moore algorithm</p>
</blockquote>

<blockquote>
  <p>fgrep implements the Aho-Corasick string matching algorithm.
…</p>
</blockquote>

<p>Even Bubblesort has its <a href="https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/drivers/media/common/saa7146/saa7146_hlp.c">application</a>!</p>

<h3 id="rich-hickeys-greatest-hitshttpthechangelogcomrich-hickeys-greatest-hits">4. <a href="http://thechangelog.com/rich-hickeys-greatest-hits/">Rich Hickey’s Greatest Hits</a></h3>

<p>I’m huge Rich Hickey’s fan. It’s just a list of his most interesting presentations. Definitely, must see.</p>

<p><img src="http://farm4.staticflickr.com/3229/2613013337_bcc9c7857d.jpg" alt="" /></p>

<ul>
  <li><a href="http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey">Are We There Yet (2009)</a></li>
  <li><a href="http://www.youtube.com/watch?v=f84n5oFoZBc">Hammock Driven Development (2010)</a></li>
  <li><a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple Made Easy (2011)</a></li>
  <li><a href="http://www.infoq.com/presentations/Value-Values">The Value of Values (2012)</a></li>
  <li><a href="http://www.youtube.com/watch?v=ROor6_NGIWU">The Language of the System (2012)</a></li>
  <li><a href="http://www.infoq.com/presentations/Design-Composition-Performance">Design, Composition and Performance (2013)</a></li>
</ul>

<h3 id="clojure-persistent-vectorhttphypirioncommusingsunderstanding-persistent-vector-pt-1">5. <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">Clojure Persistent Vector</a></h3>

<p>Two parts explanation how clojure vector works.</p>

<p>Yeah, simple square brackets <code>[1 2 3]</code> in clojure have a lot complex things under the hood. Moreover, it gives understanding not only how vectors work, but how all other persistent structures can be implemeted in efficient manner.</p>

<h3 id="software-transactional-memoryhttpjavaociwebcommarkstmarticlehtml">6. <a href="http://java.ociweb.com/mark/stm/article.html">Software Transactional Memory</a></h3>

<p>Have you heard about STM?</p>

<p>It’s a good model for concurrency control, like database transactions, but on memory. Much simpler and less error-prone to use. This article explain STM basics with some implementation details. </p>

<p>For my attempt to implement STM refer <a href="http://www.slideshare.net/mishadoff/implementing-stm-in-java">presentation</a></p>

<h3 id="a-software-developers-huide-to-httphttpodetocodecomarticles741aspx">7. <a href="http://odetocode.com/articles/741.aspx">A Software Developer’s Huide to HTTP</a></h3>

<p>Five Parts article of looking at HTTP from developer’s perspective. Worth reading to dig into some details. </p>

<h3 id="ideas-for-computinghttpsgithubcomsamsquireideas">8. <a href="https://github.com/samsquire/ideas">100 Ideas for Computing</a></h3>

<p>Great list, perhaps most ideas are already partially implemented.</p>

<blockquote>
  <p>This is a vision for how computing could be.
I began writing ideas down a number of years ago,
this is a selection of ideas old and new.</p>
</blockquote>

<p>Some of them are <a href="https://github.com/samsquire/ideas#68-right-click-outsource">great</a>:</p>

<blockquote>
  <p>Task management between computers is an unsolved problem in desktop
environments. Many users have multiple devices. Sending tasks,
inputs or outputs to different computers is painful. Usually sending
audio to be played through another computer, taking control of an
application running on another computer, sharing files or
streaming data to other machines requires special software. </p>
</blockquote>

<p>It would be great to have the same in reverse order also. I get a phone call, but phone is far away. Much better to click on current machine <em>Accept Call</em> and to talk. Security can be a challenging.</p>

<p>Some <a href="https://github.com/samsquire/ideas#18-shortcut-format">problematic</a>:</p>

<blockquote>
  <p>Keyboard shortcuts are configured differently in each program.
Shortcut configuration should be in a standard format.
This way you can load them and share them between operating
systems and share configurations between applications.</p>
</blockquote>

<p>This reminds me of xkcd comics:</p>

<p><img src="http://imgs.xkcd.com/comics/standards.png" alt="" /></p>

<p>Some ideas are <a href="https://github.com/samsquire/ideas#31-mounting-source-code">not so great</a>:</p>

<p><em>Mounting source code</em> does not solve a problem at all, it’s just adds a bit of sugar to project structure and adds more pain to build tools.</p>

<h3 id="top-10-lists-common-java-mistakeshttpjavadzonecomarticlestop-10-lists-common-java">9. <a href="http://java.dzone.com/articles/top-10-lists-common-java">Top 10 Lists Common Java Mistakes</a></h3>

<p>Metalist of Top 10 items of Top 10 java pitfalls.</p>

<p>Hundred times discussed, but if you are java programmer, you may refresh your knowledge. List of common java pitfalls includes:</p>

<blockquote>
  <p>Using Singletons</p>
</blockquote>

<blockquote>
  <p>The GOF religion</p>
</blockquote>

<blockquote>
  <p>Return null from API methods</p>
</blockquote>

<p>By the way, this list contains some other useful java things, like top 10 java people and top 15 worst Computer Software blunders. Not worst, but definitely bad.</p>

<h3 id="rare-are-gc-talkshttpfurious-waterfall-55herokucomruby-guideinternalsgchtml">10. <a href="http://furious-waterfall-55.heroku.com/ruby-guide/internals/gc.html">Rare Are GC Talks</a></h3>

<p>Different Garbage Collector algorithms briefly explained. Bookshelf used as an analogy:</p>

<blockquote>
  <p>Bookshelf - Memory, Books - Objects.</p>
</blockquote>

<p>Ruby GC implementation discussed, but you are not forced to know ruby to understand that. By the way, article contains a lot of links to more detailed GC algorithms explanation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 022]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-022/"/>
    <updated>2013-10-20T13:22:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-022</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Using <a href="http://projecteuler.net/project/names.txt">names.txt</a>
a 46K text file containing over five-thousand first names,
begin by sorting it into alphabetical order. Then working out the alphabetical
value for each name, multiply this value by its alphabetical
position in the list to obtain a name score.</p>

  <p>For example, when the list is sorted into alphabetical order,
COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.
So, COLIN would obtain a score of 938 x 53 = 49714.</p>

  <p>What is the total of all the name scores in the file?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=22">http://projecteuler.net/problem=22</a></p>

<!-- more -->

<p>Problem is very easy, assuming you know how to work with files.</p>

<p>First of all read the file, clojure has awesome simple function <code>slurp</code>, discussed in <a href="http://mishadoff.github.io/blog/clojure-euler-problem-008">Clojure Euler: Problem 008</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;names.txt&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then, you need to select all words in that file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\w+&quot;</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;names.txt&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It return a list with the names. How that simple, yeah?</p>

<p>Next two steps are:</p>

<ul>
  <li>sort list in ascending order, what is done by calling <code>sort</code> function</li>
  <li>calculate score for each word</li>
</ul>

<p>By the way, <code>score</code> consists of two parts. First of all, you must calculate natural score of the word, without its actual position in sorted list, and then you must multiply that score on its position.</p>

<p>First part looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">score</span> <span class="p">[</span><span class="nv">string</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">int </span><span class="nv">%</span><span class="p">)</span> <span class="mi">64</span><span class="p">)</span> <span class="nv">string</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Convert each character to its positional number in alphabet. For example the character “A” (<em>capitalized</em>) has ascii value of <code>65</code>. If we substract <code>64</code> it becomes <code>1</code>, what means “A” is a first letter in alphabet and so on.</p>

<p>To track positions in list we use
<a href="http://clojuredocs.org/clojure_core/clojure.core/map-indexed">map-indexed</a>
function. It works almost the same way as map, except it accept function of two arguments, index of item in current list, and item itself.</p>

<p>For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">map-indexed</span> <span class="o">#</span><span class="p">(</span><span class="nf">vec</span> <span class="p">[</span><span class="nv">%1</span> <span class="nv">%2</span><span class="p">])</span> <span class="p">[</span><span class="s">&quot;a&quot;</span> <span class="s">&quot;b&quot;</span> <span class="s">&quot;c&quot;</span><span class="p">])</span> <span class="nv">=&gt;</span> <span class="p">([</span><span class="mi">0</span> <span class="s">&quot;a&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="s">&quot;b&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">2</span> <span class="s">&quot;c&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>As indices start from zero, do not forget increment!</p>

<p>Bind all together</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span>
</span><span class="line">        <span class="p">(</span><span class="nf">map-indexed</span> <span class="o">#</span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">inc </span><span class="nv">%1</span><span class="p">)</span> <span class="p">(</span><span class="nf">score</span> <span class="nv">%2</span><span class="p">))</span>
</span><span class="line">                     <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\w+&quot;</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;names.txt&quot;</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Solved! <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem022.clj">Code is here</a></p>

<p><em>P.S.</em> Actually, this code is not elegant. We need to read from the end to the beginning of expression. And it can be solved by Threading Macro. Read the nice <strong>Fogus</strong> <a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">explanation</a></p>

<p>Our last solution, becomes transformed to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="s">&quot;names.txt&quot;</span>
</span><span class="line">	<span class="p">(</span><span class="nf">slurp</span><span class="p">)</span>
</span><span class="line">	<span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\w+&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="p">(</span><span class="nf">sort</span><span class="p">)</span>
</span><span class="line">	<span class="p">(</span><span class="nf">map-indexed</span> <span class="o">#</span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">inc </span><span class="nv">%1</span><span class="p">)</span> <span class="p">(</span><span class="nf">score</span> <span class="nv">%2</span><span class="p">)))</span>
</span><span class="line">	<span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Way more readable, huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 021]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-021/"/>
    <updated>2013-10-05T15:24:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-021</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Evaluate the sum of all the amicable numbers under 10000.</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=21">http://projecteuler.net/problem=21</a></p>

<!-- more -->

<blockquote>
  <p>Let d(n) be defined as the sum of proper divisors of n
(numbers less than n which divide evenly into n).</p>

  <p>If d(a) = b and d(b) = a, where a != b, then a and b are an
amicable pair and each of a and b are called amicable numbers.</p>

  <p>For example, the proper divisors of 220 are
1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.
The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.</p>
</blockquote>

<p>We can do it <em>bruteforcely</em>, but we won’t.</p>

<p>Let start with the function <code>d</code>. We call it <code>sum-of-proper-divisors</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">sum-of-proper-divisors</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">base</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">))</span> <span class="p">(</span><span class="nb">range </span><span class="mi">2</span> <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="nv">n</span><span class="p">)))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">reduce + </span><span class="mi">1</span> <span class="p">(</span><span class="nb">concat </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">base</span><span class="p">)</span> <span class="nv">base</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bad approach to find all divisors: to iterate on all numbers from 1 to <code>n</code>
and check if it is divisor or not.
Instead, we iterate from 1 to <code>sqrt(n)</code>, find one divisor and
calculate another symmetric divisor.</p>

<p>For example, take number <code>10</code>.
We iterating from <code>2</code> to <code>(sqrt 10)</code>. Number <code>2</code> is divisor, so we divide <code>(/ 10 2)</code>, get <code>5</code> which is also divisor. And so on.</p>

<p>This is predicate checks where two numbers amicable or not:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">amicable?</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">= </span><span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</span><span class="line">       <span class="p">(</span><span class="nb">= </span><span class="nv">a</span> <span class="p">(</span><span class="nf">sum-of-proper-divisors</span> <span class="nv">b</span><span class="p">))</span>
</span><span class="line">       <span class="p">(</span><span class="nb">= </span><span class="nv">b</span> <span class="p">(</span><span class="nf">sum-of-proper-divisors</span> <span class="nv">a</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Obvious enough, just consider that we skip case where <code>(= a b)</code>.</p>

<p>The last part is to use our functions to obtain result.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">sums</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">map </span><span class="nv">sum-of-proper-divisors</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">10000</span><span class="p">)))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">10000</span><span class="p">)]</span>
</span><span class="line">      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">amicable?</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">sums</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">i</span><span class="p">)))</span> <span class="nv">i</span> <span class="mi">0</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just generate all sums, and check if another number <code>i</code> produce the amicable pair. Done!</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem021.clj">Code</a></p>

<p><strong>P.S.</strong> Take a look at the last snippet. <code>vec</code> is really important there.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing numberto]]></title>
    <link href="http://mishadoff.github.io/blog/announcing-numberto/"/>
    <updated>2013-09-01T04:23:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/announcing-numberto</id>
    <content type="html"><![CDATA[<p>All you need to play with numbers!</p>

<!-- more -->

<p><a href="https://github.com/mishadoff/numberto">numberto</a>
- simple clojure library with a bunch of functions operating on numbers.</p>

<p>I created this project for two reasons:</p>

<ol>
  <li>Solving problems on <a href="http://projecteuler.net">Project Euler</a>, <a href="http://www.4clojure.com/">4Clojure</a> and just playground with numbers needed common functions. I just extracted them to separate util library.</li>
  <li>Practice to develop clojure project with unit tests, continuos integration, documentation and publishing to clojars.</li>
</ol>

<h3 id="get-it">Get it</h3>

<p>Current version is <code>0.0.2</code> available to download on
<a href="https://clojars.org/numberto/versions/0.0.2">Clojars</a> or
as lein dependency <code>[numberto "0.0.2"]</code></p>

<h3 id="example-usage">Example usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">number-&gt;roman</span> <span class="mi">19</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="s">&quot;XIX&quot;</span>
</span><span class="line"><span class="p">(</span><span class="nb">take </span><span class="mi">10</span> <span class="nv">fibonacci</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">8</span> <span class="mi">13</span> <span class="mi">21</span> <span class="mi">34</span> <span class="mi">55</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">shift-right</span> <span class="mi">123456789</span> <span class="mi">3</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">789123456</span>
</span><span class="line"><span class="p">(</span><span class="nf">count-digits</span> <span class="p">(</span><span class="nf">!</span> <span class="mi">100000</span><span class="p">))</span> <span class="nv">=&gt;</span> <span class="mi">456574</span>
</span><span class="line"><span class="p">(</span><span class="nf">factorize</span> <span class="mi">234</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">13</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Can you read long numbers?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">number-name</span> <span class="mi">16532561257523723757234781264</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="s">&quot;sixteen octillion five hundred thirty two septillion five hundred sixty one sextillion</span>
</span><span class="line"><span class="s">two hundred fifty seven quintillion five hundred twenty three quadrillion seven hundred</span>
</span><span class="line"><span class="s">twenty three trillion seven hundred fifty seven billion two hundred thirty four million</span>
</span><span class="line"><span class="s">seven hundred eighty one thousand two hundred sixty four&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="structure">Structure</h3>

<p>Each logical set of functions moved to separate namespace. Here is the list of namespaces:</p>

<ul>
  <li><strong>Converters</strong>.
number to digits, char to digit, roman to arabic</li>
  <li><strong>Math</strong>.
Often used functions, such as <code>count-digits</code>, <code>shuffle-num</code>, <code>reverse-num</code> and some from common math <code>abs</code>, <code>gcd</code>, <code>lcm</code></li>
  <li><strong>Seqs</strong>.
Various lazy sequences: <code>fibonacci</code>, <code>farey</code>, <code>palindromes</code>.</li>
  <li><strong>Primes</strong>.
Prime numbers lazy sequence, factorization and totient function</li>
  <li><strong>Factorial</strong>.
Standard and Improved version of factorial</li>
  <li><strong>Generators</strong>.
Generate random numbers</li>
  <li><strong>Printers</strong>.
Pretty print for long numbers</li>
</ul>

<p>Check out <a href="https://github.com/mishadoff/numberto/blob/master/doc/intro.md">detailed intro</a></p>

<p><strong>P.S.</strong> I still experimenting, so expect a lot of changes between versions until make something stable. Comments and advices are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Golf: Brainfuck Interpreter]]></title>
    <link href="http://mishadoff.github.io/blog/code-golf-brainfuck-interpreter/"/>
    <updated>2013-08-09T17:44:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/code-golf-brainfuck-interpreter</id>
    <content type="html"><![CDATA[<p>Brainfuck Interpreter in two tweets.</p>

<!-- more -->

<p>Previous article <a href="http://mishadoff.github.io/blog/code-golf-game-of-life/">Code Golf: Game of Life</a> raised some interest, and I decided to proceed. Today’s problem is a Brainfuck Interpreter.</p>

<p><a href="http://en.wikipedia.org/wiki/Brainfuck">Brainfuck</a> is an esoteric programming language, famous because of its small command set. It is based on array of cells (Turing Tape) and pointer to this array. There are only 8 commands: </p>

<ul>
  <li><code>&gt;</code> move to the next cell</li>
  <li><code>&lt;</code> move to the previous cell</li>
  <li><code>+</code> increment value in the current cell</li>
  <li><code>-</code> decrement value in the current cell</li>
  <li><code>.</code> print char with ascii value of current cell</li>
  <li><code>,</code> read ascii value for input char to the current cell</li>
  <li><code>[</code> start loop until value of pointer is not zero </li>
  <li><code>]</code> finish loop</li>
</ul>

<p>That’s all. Brainfuck is <a href="http://en.wikipedia.org/wiki/Turing_completeness">Turing Complete</a> language, that means it capable to implement any program. If you crazy, of course.</p>

<h3 id="tweet">Tweet</h3>

<p>Final version took <code>280</code> characters in Clojure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">a</span> <span class="nv">p</span> <span class="nv">k</span> <span class="nv">c</span><span class="p">](</span><span class="nf">let</span><span class="p">[</span><span class="nv">h</span> <span class="o">#</span><span class="p">(</span><span class="nb">nth </span><span class="nv">%1</span><span class="err">@</span><span class="nv">%2</span><span class="p">)</span><span class="nv">e</span> <span class="o">#</span><span class="p">(</span><span class="nf">h</span> <span class="nv">a</span> <span class="nv">p</span><span class="p">)</span><span class="nv">s</span> <span class="o">#</span><span class="p">(</span><span class="nf">swap!</span> <span class="nv">%1%2</span> <span class="mi">1</span><span class="p">)</span><span class="nv">t</span>
</span><span class="line"><span class="o">#</span><span class="p">(</span><span class="nb">aset </span><span class="nv">a</span><span class="err">@</span><span class="nv">p</span><span class="p">(</span><span class="nf">%</span><span class="p">(</span><span class="nf">e</span><span class="p">)</span><span class="mi">1</span><span class="p">))</span><span class="nv">l</span> <span class="o">#</span><span class="p">(</span><span class="nf">do</span><span class="p">(</span><span class="nf">s</span> <span class="nv">k</span> <span class="nv">%</span><span class="p">)(</span><span class="nf">case</span><span class="p">(</span><span class="nf">h</span> <span class="nv">c</span> <span class="nv">k</span><span class="p">)</span><span class="sc">\]</span><span class="p">()</span><span class="sc">\[</span><span class="p">()(</span><span class="nf">recur</span> <span class="nv">%</span><span class="p">)</span>
</span><span class="line"><span class="p">))](</span><span class="nf">while</span><span class="p">(</span><span class="nf">&gt;</span><span class="p">(</span><span class="nb">count </span><span class="nv">c</span><span class="p">)</span><span class="err">@</span><span class="nv">k</span><span class="p">)(</span><span class="nf">do</span><span class="p">(</span><span class="nf">case</span><span class="p">(</span><span class="nf">h</span> <span class="nv">c</span> <span class="nv">k</span><span class="p">)</span><span class="sc">\&gt;</span><span class="p">(</span><span class="nf">s</span> <span class="nv">p</span> <span class="nv">+</span><span class="p">)</span><span class="sc">\&lt;</span><span class="p">(</span><span class="nf">s</span> <span class="nv">p</span> <span class="nv">-</span><span class="p">)</span><span class="sc">\+</span>
</span><span class="line"><span class="p">(</span><span class="nf">t</span> <span class="nv">+</span><span class="p">)</span><span class="sc">\-</span><span class="p">(</span><span class="nf">t</span> <span class="nv">-</span><span class="p">)</span><span class="sc">\.</span><span class="p">(</span><span class="nf">print</span><span class="p">(</span><span class="nf">char</span><span class="p">(</span><span class="nf">e</span><span class="p">)))</span><span class="sc">\,</span><span class="p">(</span><span class="nb">aset </span><span class="nv">a</span><span class="err">@</span><span class="nv">p</span><span class="p">(</span><span class="nf">.read</span> <span class="nv">*in*</span><span class="p">))</span><span class="sc">\[</span><span class="p">(</span><span class="nf">if</span>
</span><span class="line"><span class="p">(</span><span class="nf">=</span><span class="p">(</span><span class="nf">e</span><span class="p">)</span><span class="mi">0</span><span class="p">)(</span><span class="nf">l</span> <span class="nv">+</span><span class="p">))</span><span class="sc">\]</span><span class="p">(</span><span class="nf">if</span><span class="p">(</span><span class="nf">&gt;</span><span class="p">(</span><span class="nf">e</span><span class="p">)</span><span class="mi">0</span><span class="p">)(</span><span class="nf">l</span> <span class="nv">-</span><span class="p">)))(</span><span class="nf">s</span> <span class="nv">k</span> <span class="nv">+</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Exactly 2 tweets.</p>

<h3 id="sugared-version">“Sugared” version</h3>

<p>Translating to more readable code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">parse-internal</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">pt</span> <span class="nv">pc</span> <span class="nv">cs</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">act</span> <span class="p">[]</span>
</span><span class="line">            <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">cs</span> <span class="err">@</span><span class="nv">pc</span><span class="p">)</span>
</span><span class="line">              <span class="sc">\&gt;</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nv">pt</span> <span class="nv">inc</span><span class="p">)</span>
</span><span class="line">              <span class="sc">\&lt;</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nv">pt</span> <span class="nv">dec</span><span class="p">)</span>
</span><span class="line">              <span class="sc">\+</span> <span class="p">(</span><span class="nb">aset </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nb">nth </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span><span class="p">)))</span>
</span><span class="line">              <span class="sc">\-</span> <span class="p">(</span><span class="nb">aset </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nb">nth </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span><span class="p">)))</span>
</span><span class="line">              <span class="sc">\.</span> <span class="p">(</span><span class="nb">print </span><span class="p">(</span><span class="nb">char </span><span class="p">(</span><span class="nb">nth </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span><span class="p">)))</span>
</span><span class="line">              <span class="sc">\,</span> <span class="p">(</span><span class="nb">aset </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span> <span class="p">(</span><span class="nf">.read</span> <span class="nv">*in*</span><span class="p">))</span>
</span><span class="line">              <span class="sc">\[</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nb">nth </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span><span class="p">))</span> <span class="p">(</span><span class="nf">loop-</span> <span class="nv">inc</span><span class="p">))</span>
</span><span class="line">              <span class="sc">\]</span> <span class="p">(</span><span class="nb">if-not </span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nb">nth </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span><span class="p">))</span> <span class="p">(</span><span class="nf">loop-</span> <span class="nv">dec</span><span class="p">))))</span>
</span><span class="line">          <span class="p">(</span><span class="nf">loop-</span> <span class="p">[</span><span class="nv">f</span><span class="p">]</span>
</span><span class="line">            <span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nf">swap!</span> <span class="nv">pc</span> <span class="nv">f</span><span class="p">)</span>
</span><span class="line">                <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">cs</span> <span class="err">@</span><span class="nv">pc</span><span class="p">)</span>
</span><span class="line">                  <span class="sc">\[</span> <span class="p">()</span>
</span><span class="line">                  <span class="sc">\]</span> <span class="p">()</span>
</span><span class="line">                  <span class="p">(</span><span class="nf">recur</span> <span class="nv">f</span><span class="p">))))]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">while</span> <span class="p">(</span><span class="nb">not= </span><span class="p">(</span><span class="nb">count </span><span class="nv">cs</span><span class="p">)</span> <span class="err">@</span><span class="nv">pc</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="nf">do</span>
</span><span class="line">        <span class="p">(</span><span class="nf">act</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="nf">swap!</span> <span class="nv">pc</span> <span class="nv">inc</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So, what’s happening there?</p>

<p>Function arguments are parameters of our tape and brainfuck program.</p>

<ul>
  <li><code>a</code> is an array represents finite tape <code>e.g (int-array 100)</code></li>
  <li><code>pt</code> is an atom - pointer to the tape</li>
  <li><code>pc</code> is an atom - pointer to the command list</li>
  <li><code>cs</code> command list</li>
</ul>

<p>Function <code>act</code> decides which action to perform depending on current command,
<code>loop</code> allows us to move command pointer inside a loop,
and main <code>while-do</code> loop executes commands until they exhausted. Simple enough.</p>

<p>To make our interpreter more friendly we create function <code>parse</code> that accepts
string - program, written in brainfuck.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nb">parse </span><span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nf">int-array</span> <span class="mi">100</span><span class="p">)</span>  <span class="c1">;; Turing Tape</span>
</span><span class="line">        <span class="nv">p</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)</span>         <span class="c1">;; Pointer to Tape</span>
</span><span class="line">        <span class="nv">k</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)</span>         <span class="c1">;; Pointer to Command</span>
</span><span class="line">        <span class="nv">c</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">seq </span><span class="nv">s</span><span class="p">))]</span>   <span class="c1">;; Vector of Commands</span>
</span><span class="line">    <span class="p">(</span><span class="nf">parse-internal</span> <span class="nv">a</span> <span class="nv">p</span> <span class="nv">k</span> <span class="nv">c</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="testing">Testing</h4>

<p>Print “Hello, world”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">parse </span><span class="s">&quot;++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]</span>
</span><span class="line"><span class="s">        &gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;</span>
</span><span class="line"><span class="s">        .+++.------.--------.&gt;+.&gt;.&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="nv">Hello</span> <span class="nv">World!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Input 5 characters and reverse print them</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">parse </span><span class="s">&quot;,&gt;,&gt;,&gt;,&gt;,.&lt;.&lt;.&lt;.&lt;.&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="nv">&lt;wait</span> <span class="nv">input</span> <span class="s">&quot;hello&quot;</span><span class="nv">&gt;</span>
</span><span class="line"><span class="nv">olleh</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>More complex program need nested loops, which is not supported by
this version (<em>for the sake of small size!</em>)</p>

<p>History of implementation, nested loops and more available <a href="https://github.com/mishadoff/prog-experiment/blob/master/clojure/brainfuck.clj">here</a></p>

<p><strong>P.S.</strong> This version is not “fully-featured” brainfuck interpreter.</p>

<ul>
  <li>It does not work for inifinite tape</li>
  <li>Cell datatype is fixed and not assumed to be cyclic. For example, if cell type is unsigned byte <code>[0..255]</code>, then <code>255 + 1 != 0</code> and break interpreter</li>
  <li>Only unsigned types supported</li>
  <li>Nested loops are not allowed</li>
  <li>No error handling</li>
</ul>

<p>But, you are welcome to improve it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 3]]></title>
    <link href="http://mishadoff.github.io/blog/programming-digest-3/"/>
    <updated>2013-07-22T20:33:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/programming-digest-3</id>
    <content type="html"><![CDATA[<p>Why your software sucks and what is the “Secret Weapon”. Also,
algorithm complexities refresher, functional programming, including
Scala and Clojure, concurrency and lot of humor.</p>

<!-- more -->

<h3 id="big-ball-of-mudhttpwwwlaputanorgmud">1. <a href="http://www.laputan.org/mud/">Big Ball of Mud</a></h3>

<blockquote>
  <p>What does your programming day look like? </p>
</blockquote>

<p><img src="http://www.laputan.org/images/pictures/spaghetti-medium.jpg" alt="" /></p>

<p>The article describes problems in software design and explains
why almost every system nowadays look like “Big Ball of Mud”.</p>

<p>There are seven <em>real</em> patterns in software design:</p>

<ul>
  <li>BIG BALL OF MUD</li>
  <li>THROWAWAY CODE</li>
  <li>PIECEMEAL GROWTH</li>
  <li>KEEP IT WORKING</li>
  <li>SHEARING LAYERS</li>
  <li>SWEEPING IT UNDER THE RUG</li>
  <li>RECONSTRUCTION </li>
</ul>

<p><em>caps preserved due to original article</em></p>

<p>And our favorite phrase:</p>

<blockquote>
  <p>It works, so why fix it?</p>
</blockquote>

<h3 id="no-silver-bullethttpwwwcsnottacukcahg51issdocumentsnosilverbullethtml">2. <a href="http://www.cs.nott.ac.uk/~cah/G51ISS/Documents/NoSilverBullet.html">No Silver Bullet</a></h3>

<p>Classic article by Frederick Brooks, Jr.</p>

<p>Object-oriented programming? Artificial Intelligence? Expert systems? Time-sharing?
Graphical or Automated programming?</p>

<p>Nothing helps you.</p>

<blockquote>
  <p>The most radical possible solution for constructing software is not to construct it at all.</p>
</blockquote>

<p>Demotivating, but helpful.</p>

<h3 id="beating-the-averageshttpwwwpaulgrahamcomavghtml">3. <a href="http://www.paulgraham.com/avg.html">Beating the Averages</a></h3>

<p>This is inspiring one.</p>

<p>Brooks told “There is no Silver Bullet”, but Paul Graham reveals “The Secret Weapon”.</p>

<p>The article is success story of startup called Viaweb.
Chosen technologies were so good, that allowed Viaweb to compete with all similar startups.</p>

<blockquote>
  <p>Our secret weapon was similar.
We wrote our software in a weird AI language, with a bizarre syntax full of parentheses.</p>
</blockquote>

<p>As you probably understood, it was Lisp.</p>

<h3 id="know-thy-complexitieshttpbigocheatsheetcom">4. <a href="http://bigocheatsheet.com/">Know Thy Complexities!</a></h3>

<p>Plain algorithm complexity cheatsheet. Contains time and space complexities
for common algorithms and datastructures.</p>

<h3 id="adventures-in-functional-programminghttpvimeocom45140590">5. <a href="http://vimeo.com/45140590">Adventures in Functional Programming</a></h3>

<blockquote>
  <p>Did you know that recursion is just syntactic sugar over higher-order functions?</p>
</blockquote>

<p>Awesome screencast by Jim Weirich about Y-Combinator in JavaScript.</p>

<h3 id="scala-problemshttpaperiodicnetphilscalas-99">6. <a href="http://aperiodic.net/phil/scala/s-99/">99 Scala Problems</a></h3>

<p>I am not using Scala and prefer Clojure for rapid protyping, but find such articles
extremely useful when learning new language. Just exploring the code shows that Scala is
the powerful and expressive language.</p>

<p><strong>P.S.</strong> I am on half way to publish “99 Clojure Problems”.</p>

<h3 id="locks-actors-and-stm-in-pictureshttpaditioposts2013-05-15-locks-actors-and-stm-in-pictureshtml">7. <a href="http://adit.io/posts/2013-05-15-Locks,-Actors,-And-STM-In-Pictures.html">Locks, Actors, And STM In Pictures</a></h3>

<p>Great pictures. This is nice intro to concurrency and overview of some common cocurrency problems.</p>

<p><img src="http://adit.io/imgs/concurrency/threads_using_mutex.png" alt="" /></p>

<h3 id="understanding-clojure-concurrencyhttpblakesmithme20120515understanding-clojure-concurrency-part-1html">8. <a href="http://blakesmith.me/2012/05/15/understanding-clojure-concurrency-part-1.html">Understanding Clojure Concurrency</a></h3>

<p>Clojure is exciting language with great concurrency capabilities:
default immutability, atoms, refs, agents, promises, futures and software transactional memory.</p>

<p>This article is an introduction to them. Check out the <a href="http://blakesmith.me/2012/05/25/understanding-clojure-concurrency-part-2.html">2nd part</a></p>

<h3 id="wathttpswwwdestroyallsoftwarecomtalkswat">9. <a href="https://www.destroyallsoftware.com/talks/wat">Wat</a></h3>

<p>This is the video screencast of Gary Bernhardt’s talk.
Sarcastic and great presentation of weird Ruby and JavaScript behaviour.</p>

<blockquote>
  <p>An object plus an object is actually…. Not A Number!</p>
</blockquote>

<h3 id="what-is-the-most-intellectual-joke-you-knowhttpwwwredditcomraskredditcomments1h1cygwhatsthemostintellectualjokeyouknow">10. <a href="http://www.reddit.com/r/AskReddit/comments/1h1cyg/whats_the_most_intellectual_joke_you_know/">What is the most intellectual joke you know</a></h3>

<p>We touch humorous side and this article (<em>reddit thread</em>) not about programming, just jokes.</p>

<blockquote>
  <p>Q: What does the “B” in Benoit B. Mandelbrot stand for?</p>

  <p>A: Benoit B. Mandelbrot.</p>
</blockquote>

<p>In fact, some of the jokes related to programming.</p>

<blockquote>
  <p>There are only two hard things in Computer Science: cache invalidation, naming things, and off-by-one errors.</p>
</blockquote>

<p>Some of them a bit stupid, but still fun.</p>

<blockquote>
  <p>How many surrealists does it take to screw in a light bulb?</p>

  <p>A fish.</p>
</blockquote>

<p>Definitely, worth to read!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 020]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-020/"/>
    <updated>2013-07-21T13:39:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-020</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Find the sum of the digits in the number 100!</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=20">http://projecteuler.net/problem=20</a></p>

<!-- more -->

<p>First of all we need to calculate factorial.
Without integer overflows, stack overflows and other caveats.</p>

<p>Previous article <a href="http://mishadoff.github.io/blog/fast-factorial/">Fast Factorial</a> has working solution
that we might use.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(defn ! [n]
</span><span class="line">  (reduce *' (range 1 (inc n))))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, calculate the sum of digits, the same function that we used in
<a href="http://mishadoff.github.io/blog/clojure-euler-problem-008/">Clojure Euler: Problem 008</a> and
<a href="http://mishadoff.github.io/blog/clojure-euler-problem-016/">Clojure Euler: Problem 016</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(defn sum-of-digits [n]
</span><span class="line">  (reduce + (map #(- (int %) 48) (seq (str n)))))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And the final line</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(sum-of-digits (! 100))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Simple enough, huh?</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem020.clj">Code</a></p>

<p><strong>P.S.</strong> The functions <code>sum-of-digits</code>, <code>count-digits</code> and similar used often
and look very ugly, so I decided to create a separate set of functions (<em>library?</em>)
which I can refer. It should be a set of common mathematic functions, including
different sequences, sums, converters, interesting numbers. You might use it too.
Welcome to <a href="https://github.com/mishadoff/numberto/">numberto</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 019]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-019/"/>
    <updated>2013-07-10T01:59:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-019</id>
    <content type="html"><![CDATA[<blockquote>
  <p>How many Sundays fell on the first of the month
during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=19">http://projecteuler.net/problem=19</a></p>

<!-- more -->

<p>Project Euler also gives following information:</p>

<ul>
  <li>1 Jan 1900 was a Monday.</li>
  <li>
    <p>A poem</p>

    <p>Thirty days has September,<br />
April, June and November.<br />
All the rest have thirty-one,<br />
Saving February alone,<br />
Which has twenty-eight, rain or shine.<br />
And on leap years, twenty-nine.<br /></p>
  </li>
  <li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li>
</ul>

<p>Implementin calendars logic is great, but java interoperability is much better!</p>

<p>First of all, take standard java <code>GregorianCalendar</code> class.
We can import it <em>almost</em> the same way as we use <code>require</code> </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">import </span><span class="p">[</span><span class="nv">java.util</span> <span class="nv">GregorianCalendar</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To create an object use function <code>new</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">new </span><span class="nv">GregorianCalendar</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But it is more idiomatic way to create java objects with special syntax:
<em>period after class name</em> </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">GregorianCalendar.</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To configure calendar object to specific date we need to set some its
properties. Setters syntax is following (assuming <code>calendar</code>
is an object of calendar):</p>

<p>Java</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">calendar</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">GregorianCalendar</span><span class="o">.</span><span class="na">YEAR</span><span class="o">,</span> <span class="mi">2013</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Clojure</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">.set</span> <span class="nv">calendar</span> <span class="nv">GregorianCalendar/YEAR</span> <span class="mi">2013</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Executing lot of setters is the same boilerplate as in java:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">do</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">calendar</span> <span class="nv">GregorianCalendar/YEAR</span> <span class="mi">2013</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">calendar</span> <span class="nv">GregorianCalendar/MONTH</span> <span class="mi">11</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">calendar</span> <span class="nv">GregorianCalendar/DAY_OF_MONTH</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To avoid repetition of object name we can use <code>doto</code> macro:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">doto </span><span class="p">(</span><span class="nf">GregorianCalendar.</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/YEAR</span> <span class="mi">2013</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/MONTH</span> <span class="mi">11</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/DAY_OF_MONTH</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This macro <em>magically</em> performs the same set of operations as above, but in more readable way.</p>

<p>Now we can create calendar objects for the <em>first of the
specific month of the specific year</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">calendar-for</span> <span class="p">[</span><span class="nv">year</span> <span class="nv">month</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">doto </span><span class="p">(</span><span class="nf">GregorianCalendar.</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/YEAR</span> <span class="nv">year</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/MONTH</span> <span class="nv">month</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/DAY_OF_MONTH</span> <span class="mi">1</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just iterate through all such objects in date range given in problem definition
and count Sundays.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span>
</span><span class="line">  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">year</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1901</span> <span class="p">(</span><span class="nb">inc </span><span class="mi">2000</span><span class="p">))</span> <span class="nv">month</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="mi">12</span><span class="p">))]</span>
</span><span class="line">    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">c</span> <span class="p">(</span><span class="nf">calendar-for</span> <span class="nv">year</span> <span class="nv">month</span><span class="p">)]</span>
</span><span class="line">          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">GregorianCalendar/SUNDAY</span>
</span><span class="line">                 <span class="p">(</span><span class="nf">.get</span> <span class="nv">c</span> <span class="nv">GregorianCalendar/DAY_OF_WEEK</span><span class="p">))</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem019.clj">Problem solved</a>!</p>

<p><strong>P.S.</strong> Java interoperability is ugly but still useful. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[randomorg-0.1]]></title>
    <link href="http://mishadoff.github.io/blog/randomorg-0-dot-1/"/>
    <updated>2013-07-06T15:33:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/randomorg-0-dot-1</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mishadoff/randomorg">randomorg-0.1</a> released!</p>

<!-- more -->

<p>If you use random numbers in your software you might be interested in
better numbers distribution than <code>Random.nextInt()</code>.</p>

<p>Someone solves this problem with hardware generators, few entropy sources and
even <a href="http://www.amazon.com/Million-Random-Digits-Normal-Deviates/dp/0833030477/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1373114958&amp;sr=1-1&amp;keywords=A+Million+Random+Digits+with+100%2C000+Normal+Deviates">books</a>.</p>

<p>By the way, there is great service <a href="http://random.org">random.org</a>
which allows to generate random numbers via atmospheric noise.</p>

<p><strong>randomorg</strong> is a small java library for random.org API.</p>

<p>Check project page for usage and documentation!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Factorial]]></title>
    <link href="http://mishadoff.github.io/blog/fast-factorial/"/>
    <updated>2013-06-07T01:08:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/fast-factorial</id>
    <content type="html"><![CDATA[<p>Factorial function is simple enough. But there is still some fun about it.
In <a href="http://mishadoff.github.io/blog/stirlings-approximation/">Stirling’s Approximation</a> article
we’ve seen how to calculate good factorial approximation faster than <em>exact</em> value.
By the way, there is an algorithm to calculate <em>exact</em> value of factorial faster
than “by definition”.</p>

<!-- more -->

<h3 id="factorials">Factorials</h3>

<p>Most of programming languages tutorials shows the following
approach to calculate factorial (<em>transformed to clojure</em>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">factorial</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">      <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="p">(</span><span class="nf">factorial</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Simple recursive solution.</p>

<p><em>Note:</em> Since clojure allows using <code>!</code> character in function name, it is good name for factorial.</p>

<p><code>(! 10)</code> works, <code>(! 20)</code> works, <code>(! 30)</code>…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nb">&gt; </span><span class="nv">ArithmeticException</span> <span class="nv">integer</span> <span class="nv">overflow</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oops.</p>

<p>Default clojure integer type is 64 bit (<code>Long</code>).
It does not fit well for <em>such large input</em>, so we rewrite function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">      <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">n</span> <span class="p">(</span><span class="nf">!</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just one character added, <code>*</code> became <code>*'</code>. It is automatic type promotion.
If type can not hold the value without losing precision, it automatically extends.
In this case, <code>Long</code> becames <code>BigInteger</code> and all works fine.</p>

<p><code>(! 30)</code> works, <code>(! 300)</code> works, <code>(! 3000)</code> works,
<code>(! 30000)</code>…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nb">&gt; </span><span class="nv">StackOverflowError</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Yet another overflow.</p>

<p>Well, stack size is limited. We don’t need to consume stackframes and
will use <code>loop/recur</code> approach.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">cur</span> <span class="nv">n</span> <span class="nv">acc</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">cur</span><span class="p">)</span> <span class="nv">acc</span>
</span><span class="line">        <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">cur</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">cur</span> <span class="nv">acc</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It is also recursive approach, but instead of saving so far calculated value
in stack, we pass it to the function as a parameter.
Clojure optimize tail recursion to iterative version and does not consume stack.
It succesfully calculates factorial for 30000,
and for any other value. Great!</p>

<p>If we look at the factorial as a calculation process, not definition, it means
“product of all numbers between 1 and n”. It is very concise for functional programming:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce </span><span class="nv">*</span><span class="o">&#39;</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">n</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Does not consume stack, no number overflow, but works
~2 times slower than <code>loop/recur</code> version.</p>

<p>I don’t know the reason, but it seems time wasted
by <code>reduce</code> for creating intermediate results. So we choose
previous <code>loop/recur</code> function as baseline factorial.</p>

<h3 id="fast-factorial">Fast Factorial</h3>

<p>Here is another way to calculate factorial.</p>

<p>Let’s consider example <code>12!</code>.</p>

<p>Factorial is a product of numbers <code>12! = 1 * 2 * 3 * ... * 11 * 12</code>.
Perform prime factorization of each number.
For example, prime factorization of <code>12</code> is <code>2 * 2 * 3</code>.</p>

<p>After that we get a factorization of the <code>12!</code>, which contains only prime numbers.
To find factorial value we can just multiply them all. But we do clever trick instead.</p>

<p>Group every prime number and its power.
E.g. if we have factorization <code>2 * 2 * 2 * 3 * 5</code> it becomes vector of pairs <code>[[2 3] [3 1] [5 1]]</code>.</p>

<p>To calculate power we have simple <code>power</code> implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">power</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce </span><span class="nv">*</span><span class="o">&#39;</span> <span class="p">(</span><span class="nb">repeat </span><span class="nv">n</span> <span class="nv">x</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Trick is using exponentiation by squaring, which reduce
exponentiation complexity from <code>O(n)</code> to <code>O(log n)</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">power</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">        <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">x</span>
</span><span class="line">        <span class="p">(</span><span class="nf">even?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">power*</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">x</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="mi">2</span><span class="p">))</span>
</span><span class="line">        <span class="p">(</span><span class="nf">odd?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">power*</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">x</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It is not tail-recursive solution and theoretically may cause
stackoverflow, but its not critical. It works well for large numbers.</p>

<p>Actually, we do not perform factorization. We just know that factorization of <code>n!</code> contains all prime numbers below or equal <code>n</code> and every number have some multiplicity. </p>

<p>The function calculates how many times prime number <code>k</code> occurs in factorial factorization for <code>n</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">find-power</span> <span class="p">[</span><span class="nv">n</span> <span class="nv">k</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">total</span> <span class="nv">n</span> <span class="nv">sum</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">/ </span><span class="nv">total</span> <span class="nv">k</span><span class="p">))]</span>
</span><span class="line">      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">i</span><span class="p">)</span> <span class="nv">sum</span>
</span><span class="line">          <span class="p">(</span><span class="nf">recur</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">sum</span> <span class="nv">i</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Binding all together:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">loop </span><span class="p">[[</span><span class="nv">h</span> <span class="o">&amp;</span> <span class="nv">t</span><span class="p">]</span>
</span><span class="line">         <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">power</span> <span class="nv">%</span> <span class="p">(</span><span class="nf">find-power</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nb">take-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">%</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">primes</span><span class="p">)))</span>
</span><span class="line">         <span class="nv">acc</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="k">if </span><span class="nv">h</span> <span class="p">(</span><span class="nf">recur</span> <span class="nv">t</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">h</span> <span class="nv">acc</span><span class="p">))</span> <span class="nv">acc</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://github.com/mishadoff/numberto/blob/master/src/numberto/factorial.clj">Code available here</a></p>

<p><em>Note:</em> <code>primes</code> is a function generates lazy-sequence of prime numbers. It can be taken from <code>clojure.contrib.lazy-seqs</code>.</p>

<h3 id="testing">Testing</h3>

<blockquote>
  <p>Anyway, why do you think it is faster?
You performing more calculations than just multiplying numbers.</p>
</blockquote>

<p>Let’s see.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 10 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">10</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">10</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 100 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">100</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">100</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 1000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 10000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 100000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">100000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">100000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 1000000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">1000000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">1000000</span><span class="p">))</span> <span class="nv">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nb">== </span><span class="mi">10</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.051054 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.137587 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">100</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.081365 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.376653 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">1000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 1.59252 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 3.212842 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">10000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 161.856965 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 76.452529 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">100000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 19403.375319 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 6372.35266 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">1000000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 2863893.471718 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 1079632.255919 msecs&quot;</span>
</span><span class="line"><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For small factorials <code>(&lt; 1000)</code> improved version works ~2 times slower.
Around the thousand it has the same performance as standard version.
And, finally, some win (up to 3 times) for larger numbers.</p>

<p>Theoretically, you can implement generalized factorial with these two algorithms
and switch between them, depending on input. But who really need it? </p>

<blockquote>
  <p>Question: What the complexity of this algorithm?</p>
</blockquote>

<p><strong>P.S.</strong> Enterprise lovers would say factorial complexity is <code>O(1)</code>.
Just precompute all values and save them to database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 018]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-018/"/>
    <updated>2013-05-17T00:26:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-018</id>
    <content type="html"><![CDATA[<blockquote>
  <p>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   3
</span><span class="line">  7 4
</span><span class="line"> 2 4 6
</span><span class="line">8 5 9 3</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>That is, 3 + 7 + 4 + 9 = 23.</p>

  <p>Find the maximum total from top to bottom of the triangle below:</p>

  <p>[Check out big triangle in original link]</p>

  <p>NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route.
However, Problem 67, is the same challenge with a triangle containing one-hundred rows;
it cannot be solved by brute force, and requires a clever method! ;o)</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=18">http://projecteuler.net/problem=18</a></p>

<!-- more -->

<p>As note says we can try every route and it will be just good.
Instead of that, we can behave much better with clever method.</p>

<p>(Some time ago, I gave basic explanation on my approach in <a href="http://stackoverflow.com/questions/8002252/euler-project-18-approach">StackOverflow question</a>)</p>

<p>We have example triangle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   3
</span><span class="line">  7 4
</span><span class="line"> 2 4 6
</span><span class="line">8 5 9 3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Instead of testing each route from top to the bottom, we moving from bottom
to the top and always select the best choice. As we want to find the max sum, we perform addition im place.</p>

<p>Assuming we on the 3rd line (2 4 6).</p>

<p><strong>From 2</strong> we can go either 8 or 5, 8 is better (maximize your sum), then you calculate first
sum <code>8 + 2 = 10</code>.</p>

<p><strong>From 4</strong> we can go either 5 or 9, 9 is better, <code>4 + 9 = 13</code>.</p>

<p><strong>From 6</strong> we can go either 9 or 3, 9 is better, <code>9 + 6 = 15</code>.</p>

<p>Now, we removing last row, because we processed all routes and selected best ones, and replacing
3rd row with calculated sums. Current triangle looks like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">    3
</span><span class="line">  7  4
</span><span class="line">10 13 15</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Repeat the same action until we get one number, which will be solution.</p>

<p>Let’s transform this idea to clojure.</p>

<p>First of all we need datastructure to represent triangle.
List of lists would be good:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">triangle</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">7</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="mi">2</span> <span class="mi">4</span> <span class="mi">6</span><span class="p">)</span> <span class="p">(</span><span class="mi">8</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">3</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we want to know, what direction generates the best sum.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">max-row</span> <span class="p">[</span><span class="nv">lst</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">reduce max </span><span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nf">partition</span> <span class="mi">2</span> <span class="mi">1</span> <span class="nv">lst</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It breaks list to pairs, and select max from each pair.
For example, <code>[8 5 9 3]</code> we split to <code>[[8 5] [5 9] [9 3]]</code>
and select max from each sublist <code>[8 9 9]</code>.</p>

<p>Just add this list to previous one</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">step-max</span> <span class="p">[</span><span class="nv">lst1</span> <span class="nv">lst2</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">map + </span><span class="p">(</span><span class="nf">max-row</span> <span class="nv">lst1</span><span class="p">)</span> <span class="nv">lst2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One iteration of <code>step-max</code> creates smaller triangle with sums on the bottom row.
But we need only one number.</p>

<p>Correct, <code>reduce</code> is ideal!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce </span><span class="nv">step-max</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">triangle</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem018.clj">code</a></p>

<p><strong>P.S.</strong> Problem 067 can be solved with the same code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 2]]></title>
    <link href="http://mishadoff.github.io/blog/programming-digest-2/"/>
    <updated>2013-04-22T14:43:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/programming-digest-2</id>
    <content type="html"><![CDATA[<p>Why math is needed for developers, what is REST, how to become experienced
developer…in 10 years, “coding it’s just writing” and some practice:
Naive Bayes Classifier, functional programming and Java 8.</p>

<!-- more -->

<h3 id="math-for-programmershttpsteve-yeggeblogspotcom200603math-for-programmershtml">1. <a href="http://steve-yegge.blogspot.com/2006/03/math-for-programmers.html">Math For Programmers</a></h3>

<p>Another great post by Steve Yegge about math. Math for developers.
As everyone might to retort, knowing math is not mandatory for software engineering field, but you know:</p>

<blockquote>
  <p>Math is… ummm, please don’t tell anyone I said this;
I’ll never get invited to another party as long as I live.
But math, well… I’d better whisper this, so listen up: (it’s actually kinda fun.)</p>
</blockquote>

<p>I totally agree. It’s a lot of fun.
Just read subreddit <a href="http://www.reddit.com/r/math/">math</a>, even if you don’t understand anything.</p>

<p>Pick your favourite math subject and try to dig more.
Statistics, Linear Algebra, Discrete Math, Combinatorics, Operation Research, Group Theory
and more; one of them can be a good start.</p>

<p>Does that really helps? Well, maybe. But it’s definitely improve your problem solving skill.</p>

<p>And believe. Math makes you a <em>better</em> programmer.</p>

<h3 id="how-i-explained-rest-to-my-wifehttptomaykocomwritingsrest-to-my-wife">2. <a href="http://tomayko.com/writings/rest-to-my-wife">How I Explained REST to My Wife</a></h3>

<p>Good article about how web works. I found it very useful for understanding
some parts I thought I understood. By the way, great examples.</p>

<blockquote>
  <p>Ryan: I can’t drive a cup and I can’t drink a car. But some verbs are almost universal like GET, PUT, and DELETE.</p>

  <p>Wife: You can’t DELETE a cup.</p>

  <p>Ryan: Well, okay, but you can throw it away.</p>
</blockquote>

<p>Unfortunately, author of this article take it down due to lot of complaints about
article gender-oriented nature. I don’t think it’s offensive and here is the link with
<a href="http://web.archive.org/web/20130116005443/http://tomayko.com/writings/rest-to-my-wife">copy from web archive</a></p>

<h3 id="programmer-competency-matrixhttpwwwindiangeeknetwp-contentuploadsprogrammer20competency20matrixhtm">3. <a href="http://www.indiangeek.net/wp-content/uploads/Programmer%20competency%20matrix.htm">Programmer Competency Matrix</a></h3>

<p>Do you think you are great programmer? Test yourself.</p>

<p><strong>Algorithms</strong></p>

<ul>
  <li><strong>2^n (Level 0)</strong>. Unable to find the average of numbers in an array
(It’s hard to believe but I’ve interviewed such candidates)</li>
  <li><strong>n^2 (Level 1)</strong>. Basic sorting, searching and data structure traversal and retrieval algorithms</li>
  <li><strong>n (Level 2)</strong>. Tree, Graph, simple greedy and divide and conquer algorithms, is able to understand
the relevance of the levels of this matrix.</li>
  <li><strong>log(n) (Level 3)</strong>. Able to recognize and code dynamic programming solutions, good knowledge of graph algorithms,
good knowledge of numerical computation algorithms, able to identify NP problems etc.</li>
</ul>

<p>In any case, this <em>test</em> helps you to build plan for programming
related skills and gives understanding what you need to know to become an expert.</p>

<h3 id="teach-yourself-programming-in-ten-yearshttpnorvigcom21-dayshtml">4. <a href="http://norvig.com/21-days.html">Teach Yourself Programming in Ten Years</a></h3>

<p>Article by Peter Norvig.
Great guy, I got to know from <a href="https://www.ai-class.com/">Artificial Intelligence</a> course.</p>

<p>His writing is critique of popular books, like “Learn Java in 21 Days”.
Peter explains that it is impossible to be a great
engineer in such short period, and to become an expert you need aproximately 10 years.</p>

<p>It reminds me a picture “How to become a C++ Developer in 21 Days”:</p>

<p><img src="http://i.imgur.com/3FckcgF.png" alt="" /></p>

<p>If you totally disagree with his idea, just test yourself in previous article.</p>

<h3 id="on-being-a-senior-engineerhttpwwwkitchensoapcom20121025on-being-a-senior-engineer">5. <a href="http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">On Being A Senior Engineer</a></h3>

<p>And logically continue. What behaviour differentiate senior engineer from “not senior” one?</p>

<blockquote>
  <p>Mature engineers seek out constructive criticism of their designs.</p>
</blockquote>

<p>Actually you could find more useful rules there and list of
<strong>The Ten Commandments of Egoless Programming</strong>.</p>

<blockquote>
  <ol>
    <li>Understand and accept that you will make mistakes.</li>
    <li>You are not your code.</li>
    <li>No matter how much “karate” you know, someone else will always know more.</li>
    <li>Don’t rewrite code without consultation.</li>
    <li>Treat people who know less than you with respect, deference, and patience.</li>
    <li>The only constant in the world is change. Be open to it and accept it with a smile.</li>
    <li>The only true authority stems from knowledge, not from position.</li>
    <li>Fight for what you believe, but gracefully accept defeat.</li>
    <li>Don’t be “the coder in the corner.”</li>
    <li>Critique code instead of people – be kind to the coder, not to the code.</li>
  </ol>
</blockquote>

<p>Note, that article touch some psychological aspect of person. So I don’t
think it can be 100% applied to everyone, but still worth to read.</p>

<h3 id="coding-its-just-writinghttpwwwcodinghorrorcomblog200811coding-its-just-writinghtml">6. <a href="http://www.codinghorror.com/blog/2008/11/coding-its-just-writing.html">Coding: It’s Just Writing</a></h3>

<p>Jeff Atwood explais basic the idea of:</p>

<blockquote>
  <p>The unexpected relationship between writing code and writing.</p>
</blockquote>

<p>To write good code, you must write good.</p>

<p>Article contains a reference to the book “The Elements of Style” with some quotes.</p>

<blockquote>
  <p>Vigorous writing is concise. A sentence should contain no unnecessary words,
a paragraph no unnecessary sentences, for the same reason that a drawing should
have no unnecessary lines and a machine no unnecessary parts.
This requires not that the writer make all his sentences short,
or that he avoid all detail and treat his subjects only in outline, but that every word tell.</p>
</blockquote>

<p>Read this book. Perhaps it is boring, it contains some advices to improve you writing skills.</p>

<h3 id="how-to-build-a-naive-bayes-classifierhttpswwwbionicspiritcomblog20120209howto-build-naive-bayes-classifierhtml">7. <a href="https://www.bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html">How To Build a Naive Bayes Classifier</a></h3>

<p>Now some practice.</p>

<p>Article is great explanation of how Naive Bayes Classifier work.
With pictures, code examples, common pitfalls and good sense of humour.</p>

<p>Although, it’s one of the simplest classification algorithms, but with some tweeks and
good train set it can give good results.</p>

<p><img src="https://www.bionicspirit.com/assets/img/conditional-prob-9a27ee0e.png" alt="" /></p>

<p>Here is the place where the math is needed. But article is so great,
that even monkey with banana (and degree in math) can understand how it works.</p>

<h3 id="functors-applicatives-and-monads-in-pictureshttpaditioposts2013-04-17-functorsapplicativesandmonadsinpictureshtml">8. <a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">Functors, Applicatives, And Monads In Pictures</a></h3>

<p>Number of articles that explain what is monad grow fast. Just another one.</p>

<p>Even if you don’t understand what Haskell and monad is, look at the cool pictures.</p>

<p><img src="http://adit.io/imgs/functors/fmap_just.png" alt="" /></p>

<h3 id="list-out-of-lambdahttpsteveloshcomblog201303list-out-of-lambda">9. <a href="http://stevelosh.com/blog/2013/03/list-out-of-lambda/">List Out Of Lambda</a></h3>

<p>Good introduction to functional programming. Not for beginners, I think.</p>

<blockquote>
  <p>This blog post is a thought exercise.
It’s not something you’d ever use for real code.
But just like a guitarist practices scales that she won’t ever play in a song,
we programmers should be exercising our brains every so often.</p>
</blockquote>

<p>How to implement fancy list, map, filter features with just
first-class functions. Basic operations on numbers included. JavaScript.</p>

<h3 id="everything-about-java-8httpwwwtechempowercomblog20130326everything-about-java-8">10. <a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">Everything about Java 8</a></h3>

<p>Let’s review again what will be in Java 8. Most wanted release ever.</p>

<p>In this overview you will test other important changes, not only lambdas.</p>

<p><em>Sad, that release postponed to early 2014 due to security issues.</em>
<em>But more time to play with developer preview features.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 017]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-017/"/>
    <updated>2013-04-09T21:13:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-017</id>
    <content type="html"><![CDATA[<blockquote>
  <p>If the numbers 1 to 5 are written out in words: one, two, three, four, five,
then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.</p>

  <p>If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=17">http://projecteuler.net/problem=17</a></p>

<!-- more -->

<p>To solve this problem we need some sort of mapping that defines association
between number and its string representation, e.g <code>123 = one hundred and twenty three</code>.</p>

<p>This can be done with maps in clojure in form <code>{:1 "one" :2 "two"}</code>.
But if pay more atention to this map, we see that key is a numeric value.
Exactly what plain arrays do.</p>

<p>Then we just define all mappings, obtain all arrays string elements, find their lengths and sum them.</p>

<p>One problem that providing mapping for each number between 1 and 1000 is a “bit” routine task, so we
need some formula to calculate representation instead of hardcoding it. We come to defining groups.</p>

<p>First group is just <em>first 20</em> numbers:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">first20</span> <span class="p">[</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span> <span class="s">&quot;four&quot;</span> <span class="s">&quot;five&quot;</span>
</span><span class="line">              <span class="s">&quot;six&quot;</span> <span class="s">&quot;seven&quot;</span> <span class="s">&quot;eight&quot;</span> <span class="s">&quot;nine&quot;</span> <span class="s">&quot;ten&quot;</span>
</span><span class="line">              <span class="s">&quot;eleven&quot;</span> <span class="s">&quot;twelve&quot;</span> <span class="s">&quot;thirteen&quot;</span> <span class="s">&quot;fourteen&quot;</span> <span class="s">&quot;fifteen&quot;</span>
</span><span class="line">              <span class="s">&quot;sixteen&quot;</span> <span class="s">&quot;seventeen&quot;</span> <span class="s">&quot;eighteen&quot;</span> <span class="s">&quot;nineteen&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: there is no “zero” as we don’t use it in spoken language.</p>

<p>Second group is numbers that divides 10:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">decas</span> <span class="p">[</span><span class="s">&quot;&quot;</span> <span class="s">&quot;ten&quot;</span> <span class="s">&quot;twenty&quot;</span> <span class="s">&quot;thirty&quot;</span> <span class="s">&quot;forty&quot;</span> <span class="s">&quot;fifty&quot;</span> <span class="s">&quot;sixty&quot;</span> <span class="s">&quot;seventy&quot;</span> <span class="s">&quot;eighty&quot;</span> <span class="s">&quot;ninety&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: empty first element here is used to reduce additional check. Its length is 0, that has no effect at all.</p>

<p>And the last ones are three used values:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">h</span> <span class="s">&quot;hundred&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">t</span> <span class="s">&quot;thousand&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">a</span> <span class="s">&quot;and&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The basic function will calculate the length string representation of some number.
Let’s call it <code>word-length</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">word-length</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">count </span><span class="nv">t</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">first20</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line">        <span class="p">(</span><span class="nb">&lt; </span><span class="nv">n</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">q</span> <span class="p">(</span><span class="nb">quot </span><span class="nv">n</span> <span class="mi">10</span><span class="p">)</span> <span class="nv">m</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)</span>
</span><span class="line">              <span class="nv">d</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">decas</span> <span class="nv">q</span><span class="p">))]</span>
</span><span class="line">          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span> <span class="nv">d</span>
</span><span class="line">              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">q</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">first20</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nb">+ </span><span class="nv">m</span> <span class="p">(</span><span class="nb">* </span><span class="mi">10</span> <span class="nv">q</span><span class="p">)))))</span>
</span><span class="line">                  <span class="p">(</span><span class="nb">+ </span><span class="nv">d</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">first20</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">m</span><span class="p">)))))))</span>
</span><span class="line">        <span class="p">(</span><span class="nb">&lt; </span><span class="nv">n</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">q</span> <span class="p">(</span><span class="nb">quot </span><span class="nv">n</span> <span class="mi">100</span><span class="p">)</span> <span class="nv">m</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="mi">100</span><span class="p">)]</span>
</span><span class="line">          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">word-length</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="nv">h</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">count </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="nv">h</span><span class="p">)</span> <span class="p">(</span><span class="nf">word-length</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nf">word-length</span> <span class="nv">m</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Little explanation:</p>

<ul>
  <li>If number is <code>1000</code> then the length of string “one” + “thousand”, 11.</li>
  <li>If number is lower than <code>100</code> then extract its decade part. If there is no
reminder for division by 10, the length is length of that decade part.</li>
  <li>Otherwise, if number in <code>first20</code>, length taken from array <code>first20</code>.</li>
  <li>Otherwise the length is decade part plus remainder.</li>
  <li>If number is lower than <code>1000</code> then extract hundred part. If there is no
reminder for division by 100, the length is “hundred” plus number of hundreds.</li>
  <li>Otherwise, the length is “hundred” plus number of hundreds, plus the word “and” and
recursively calculate the length of remainder, which is lower than <code>100</code>.</li>
</ul>

<p>Awful word-presentation of algorithm, because of… Reading code is much simpler, I know.</p>

<p>And the last part just sum up all word-lengths:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="nv">word-length</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1001</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check the code <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem017.clj">here</a>.</p>

<p>P.S. In fact algorithm is very simple, but needs some time to understand few branches.
By the way, the problem is little boring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Golf: Game of Life]]></title>
    <link href="http://mishadoff.github.io/blog/code-golf-game-of-life/"/>
    <updated>2013-03-07T17:59:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/code-golf-game-of-life</id>
    <content type="html"><![CDATA[<p>Conway’s Game of Life in a tweet.</p>

<!-- more -->

<p>Recently, my friend pointed out me an article <a href="http://trelford.com/blog/post/140.aspx">Life in a tweet</a>
where <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a> was implemented in one tweet
(<em>less than 140 characters</em>) in Ruby and F#. I took this challenge.</p>

<h3 id="tweet">Tweet</h3>

<p>Here is the final version in <code>137</code> characters of Clojure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">g</span> <span class="nv">r</span><span class="p">](</span><span class="nf">reduce</span><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">](</span><span class="nf">update-in</span> <span class="nv">i</span> <span class="nv">j</span><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">v</span><span class="p">](</span><span class="nf">get</span><span class="p">[</span><span class="nv">v</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="p">(</span><span class="nf">-</span><span class="p">(</span><span class="nb">apply </span><span class="nv">+</span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-in</span> <span class="nv">g%</span> <span class="mi">0</span><span class="p">)(</span><span class="nf">for</span><span class="p">[</span><span class="nv">a</span><span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span><span class="nv">b</span><span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]]</span>
</span><span class="line"><span class="p">(</span><span class="nb">map + </span><span class="nv">j</span><span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]))))</span><span class="nv">v</span> <span class="mi">2</span><span class="p">)</span><span class="mi">0</span><span class="p">))))</span><span class="nv">g</span> <span class="nv">r</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="sugared-version">“Sugared” version</h3>

<p>Translate tweet to more readable code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">step-sugar</span> <span class="p">[</span><span class="nv">grid</span> <span class="nv">range</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">count-neighbours</span> <span class="c1">;; determine number of neighbours</span>
</span><span class="line">        <span class="p">(</span><span class="nf">fn</span><span class="p">[[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">]]</span>
</span><span class="line">          <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-in</span> <span class="nv">grid</span> <span class="nv">%</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">                         <span class="p">(</span><span class="nf">for</span><span class="p">[</span><span class="nv">a</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="nv">b</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]]</span>
</span><span class="line">                           <span class="p">[(</span><span class="nb">+ </span><span class="nv">i</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">j</span> <span class="nv">b</span><span class="p">)]))))</span>
</span><span class="line">        <span class="nv">new-value</span>  <span class="c1">;; calculate new value for cell</span>
</span><span class="line">        <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">v</span> <span class="p">[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">]]</span>
</span><span class="line">          <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">c</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">count-neighbours</span> <span class="p">[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">])</span> <span class="nv">v</span><span class="p">)]</span>
</span><span class="line">            <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="mi">3</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">                  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">v</span>
</span><span class="line">                  <span class="ss">:else</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class="line">        <span class="nv">evolve-cell</span> <span class="c1">;; update cell in a grid</span>
</span><span class="line">        <span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">g</span> <span class="nv">i</span><span class="p">]</span> <span class="p">(</span><span class="nf">update-in</span> <span class="nv">g</span> <span class="nv">i</span> <span class="o">#</span><span class="p">(</span><span class="nf">new-value</span> <span class="nv">%</span> <span class="nv">i</span><span class="p">)))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">reduce </span><span class="nv">evolve-cell</span> <span class="nv">grid</span> <span class="nv">range</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Actually, this version is cheating,
due to passing one extra-parameter <code>range</code> that contains all indices
need to be updated in form <code>[[0 1] [1 1]]...</code></p>

<p>On the other side it gives us two features:</p>

<ul>
  <li><strong>Works for rectangular grid</strong>. Although, initial
implementation assumes the world is square.</li>
  <li><strong>Specific part of world can be updated</strong>. It gives possibility
to update specific area in the world, for example <em>west organisms evolve faster</em>.</li>
</ul>

<p>To use this function you need:</p>

<ul>
  <li>World</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">grid</span> <span class="p">[[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">           <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">           <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Evolution</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">evolution</span> <span class="p">[</span><span class="nv">g</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">p</span> <span class="p">(</span><span class="nb">count </span><span class="nv">g</span><span class="p">)</span> <span class="nv">q</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">get </span><span class="nv">g</span> <span class="mi">0</span><span class="p">))</span>
</span><span class="line">        <span class="nb">range </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="nv">p</span><span class="p">)</span> <span class="nv">j</span> <span class="p">(</span><span class="nb">range </span><span class="nv">q</span><span class="p">)][</span><span class="nv">i</span> <span class="nv">j</span><span class="p">])]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">iterate </span><span class="o">#</span><span class="p">(</span><span class="nf">step-sugar</span> <span class="nv">%</span> <span class="nv">range</span><span class="p">)</span> <span class="nv">g</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Visualization</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">print-grid</span> <span class="p">[</span><span class="nv">g</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">s</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">apply str </span><span class="p">(</span><span class="nb">replace </span><span class="p">{</span><span class="mi">0</span> <span class="s">&quot;.&quot;</span> <span class="mi">1</span> <span class="s">&quot;⚫&quot;</span><span class="p">}</span> <span class="nv">%</span><span class="p">))</span> <span class="nv">g</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="nv">s</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="testing">Testing</h3>

<p>To make sure results are correct use the following
<code>run</code> function and compare results to some common
<a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Examples_of_patterns">examples</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">run</span> <span class="p">[</span><span class="nv">grid</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">g</span> <span class="p">(</span><span class="nf">evolution</span> <span class="nv">grid</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">print-grid</span> <span class="nv">g</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">1000</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pattern examples:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">block</span> <span class="p">[[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">glider</span> <span class="p">[[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Full history of implementation and more life patterns
<a href="https://github.com/mishadoff/prog-experiment/blob/master/clojure/life.clj">available here</a></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 016]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-016/"/>
    <updated>2013-03-05T01:31:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-016</id>
    <content type="html"><![CDATA[<blockquote>
  <p>2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.</p>

  <p>What is the sum of the digits of the number 2^1000 ?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=16">http://projecteuler.net/problem=16</a></p>

<!-- more -->

<p>Are you kidding me?</p>

<ul>
  <li>Find 1000th <em>power of two</em></li>
  <li>Sum its digits</li>
</ul>

<p>In <a href="http://mishadoff.github.io/blog/clojure-euler-problem-008/">Clojure Euler: Problem 008</a> we
learned how to sum digits in the number. Just gentle reminder:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">sum-of-digits</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">int </span><span class="nv">%</span><span class="p">)</span> <span class="mi">48</span><span class="p">)</span> <span class="p">(</span><span class="nb">seq </span><span class="p">(</span><span class="nb">str </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, let’s create sequence of powers of two:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">powers-of-2</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="nb">partial * </span><span class="mi">2</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Unfortunately, this sequence throws <code>integer overflow</code> on the <code>64th</code> element.
We can fix that using <em>long arithmetics</em>, which known as <code>BigInteger</code> in Java.
Change <code>1</code> to <code>1N</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="nb">partial * </span><span class="mi">2</span><span class="p">)</span> <span class="mi">1</span><span class="nv">N</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Another way is to use <strong>automatic promotion</strong> operator (<code>+'</code>, <code>*'</code>).
If result of some operation is not suitable for some type,
instead of invalid computation and runtime exception, clojure automatically promotes
the type to suitable one (<em>for example</em> <code>Long.MAX_VALUE +' 1</code> <em>works fine and produces
 correct result with type of</em> <code>BigInteger</code>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="nb">partial </span><span class="nv">*</span><span class="o">&#39;</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Choose <code>powers-of-2</code> that you prefer and final result will look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">sum-of-digits</span> <span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nb">take </span><span class="mi">1001</span> <span class="p">(</span><span class="nf">powers-of-2</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem016.clj">github</a></p>

<p><strong>P.S.</strong> Automatic promotion is a beatiful thing. But be aware about losing in
speed of calculations. Also, no way back. If promotion happened, <em>depromotion</em> won’t.</p>
]]></content>
  </entry>
  
</feed>
