<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.io/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.io/"/>
  <updated>2014-03-28T18:53:44+02:00</updated>
  <id>http://mishadoff.github.io/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Numberto: Expressions]]></title>
    <link href="http://mishadoff.github.io/blog/numberto-expressions/"/>
    <updated>2014-03-24T00:25:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/numberto-expressions</id>
    <content type="html"><![CDATA[<p>Numberto has new features!</p>

<!-- more -->

<p>In <a href="http://mishadoff.github.io/blog/announcing-numberto">previous post</a>
I wrote about simple clojure library <a href="https://github.com/mishadoff/numberto">numberto</a> for experiments with numbers.</p>

<p>New version of <em>numberto</em> has a bunch of new features.</p>

<h3 id="expressions">Expressions</h3>

<p>Expressions package provides two functions: <code>eval-infix</code> to evaluate infix expression
and <code>infix-&gt;prefix</code> to build prefix lisp-style expression from mathematical notation.</p>

<p>Let’s give it alias for simplicity</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">e</span> <span class="nv">eval-infix</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Evaluate simple math expression</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1+2&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or more complex</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1+2*(3-4/2)&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>handle priorities</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;2+2*2&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and left/right associativity</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1024/2/2/2/2&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">64</span>
</span><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;2^3^4&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">2417851639229258349412352</span><span class="nv">N</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oh, what’s this? Long numbers? Sure, ratios and floats supported as well</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1/3&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">1</span><span class="nv">/3</span>
</span><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1.1/0.9&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mf">1.2222222222222223</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Unary operations</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;(-1)^100&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>functions and symbols</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;sin(e) + sqrt(pi)&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mf">2.183235141408425</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>vararg functions</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;sum(1,2,3,sum())/max(1,2)&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can also provide bindings for unknown functions and symbols</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;factorial(n)/20&quot;</span>
</span><span class="line">   <span class="p">{</span><span class="ss">:bindings</span>
</span><span class="line">     <span class="p">{</span><span class="s">&quot;factorial&quot;</span> <span class="o">#</span><span class="p">(</span><span class="nb">reduce </span><span class="nv">*</span><span class="o">&#39;</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">%</span><span class="p">)))</span>
</span><span class="line">      <span class="s">&quot;n&quot;</span> <span class="mi">10</span><span class="p">}})</span>
</span><span class="line"><span class="nv">=&gt;</span> <span class="mi">181440</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Worth to mention that you can easily redefine existing
or define your own new unary, binary operations, functions
and symbols. Just add additional properties to <code>eval-infix</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="c1">;; return current time in millis</span>
</span><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;now()&quot;</span> <span class="p">{</span><span class="ss">:bindings</span> <span class="p">{</span><span class="s">&quot;now&quot;</span> <span class="o">#</span><span class="p">(</span><span class="nf">.getTime</span> <span class="p">(</span><span class="nf">java.util.Date.</span><span class="p">))}})</span> <span class="nv">=&gt;</span> <span class="nb">some long </span><span class="nv">number</span>
</span><span class="line"><span class="c1">;; override priorities</span>
</span><span class="line"><span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1+2*3&quot;</span> <span class="p">{</span><span class="ss">:binary-ops</span> <span class="p">{</span><span class="s">&quot;+&quot;</span> <span class="p">{</span><span class="ss">:function</span> <span class="nb">+ </span><span class="ss">:priority</span> <span class="mi">100</span><span class="p">}}})</span> <span class="nv">=&gt;</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>infix-&gt;prefix</code> has exactly the same functionality, but it builds prefix expression instead.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">infix-&gt;prefix</span> <span class="s">&quot;(1+2)*3-(4/avg(3,5)-sum(1))&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nv">=&gt;</span>
</span><span class="line"><span class="s">&quot;(- (* (+ 1 2) 3) (- (/ 4 (avg 3 5)) (sum 1)))&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It can be useful if you googled some formula but bored to translate it manually to clojure.</p>

<p>For example, take the <a href="http://en.wikipedia.org/wiki/Simpson%27s_rule">Simpson’s rule</a></p>

<p><img src="http://upload.wikimedia.org/math/1/a/0/1a0fb4456375307fdde8ab85954d95be.png" alt="" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">infix-&gt;prefix</span> <span class="s">&quot;(b-a)/6*(f(a)+4*f((a+b)/2)+f(b))&quot;</span><span class="p">)</span>
</span><span class="line"><span class="nv">=&gt;</span>
</span><span class="line"><span class="s">&quot;(* (/ (- b a) 6) (+ (+ (f a) (* 4 (f (/ (+ a b) 2)))) (f b)))&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="implementation">Implementation</h4>

<p>Would be good to try <a href="https://github.com/Engelberg/instaparse">instaparse</a> for such purpose,
but I decided to use custom implementation using standard
<a href="http://en.wikipedia.org/wiki/Shunting-yard_algorithm">Shunting-yard algorithm</a>.
Just couple of hacks added to handle unaries and vararg functions.
Code is awful. If you really want to dig in - run debug mode.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">binding </span><span class="p">[</span><span class="nv">*DEBUG*</span> <span class="nv">true</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">e</span> <span class="s">&quot;1+2&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="limitations">Limitations</h4>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>No way to define non-prefix unary operation, like “10!” or “</td>
          <td>10</td>
          <td>”</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Can not handle simplified math form, like “2x^2 + 3^x + 5”.
Multiplication sign should be declared explicitly</li>
  <li>Not able to simplify ops in lisp-style expression. <code>(* (* 1 2) 3)</code> instead of <code>(* 1 2 3)</code></li>
  <li>False positives handling. Some stupid expressions indicates about error <code>(e "1+")</code>, some not <code>(e "1+()1)</code>. I still working on this, but it is not critical.</li>
</ul>

<h3 id="solvers">Solvers</h3>

<p>Here is the puzzle:</p>

<blockquote>
  <p>You have four numbers [3, 4, 5, 6].<br />
You have four binary operations [+, -, *, /] and parentheses ()</p>

  <p>How to insert operations between numbers to get number 42?</p>
</blockquote>

<p>Hah, that simple <code>3*4 + 5*6 = 42</code></p>

<p>Ok, get <code>42</code>, but you forced to use one division <code>/</code>.</p>

<p>Not so obvious?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">solve-insert-ops-num</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span> <span class="mi">42</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">([</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3+45-6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3/4*56&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3*4+5*6&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you use <code>solve-insert-ops</code> function it gives all possible values can be obtained by inserting operations between numbers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">solve-insert-ops</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">])</span> <span class="nv">=&gt;</span> <span class="c1">;; long list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Default implementation uses 4 basic operations, no parens and no restrictions. Instead, you can override options</p>

<p>to use parens, specify level</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">solve-insert-ops-num</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span> <span class="mi">42</span> <span class="p">{</span><span class="ss">:parens</span> <span class="mi">1</span><span class="p">})</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">([</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3+45-6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;(3+45)-6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3+(45-6)&quot;</span><span class="p">]</span>
</span><span class="line"> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3/4*56&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;(3/4)*56&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3/(4/56)&quot;</span><span class="p">]</span>
</span><span class="line"> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3*4+5*6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;(3*4)+5*6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3*4+(5*6)&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>limit some operations</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">solve-insert-ops-num</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span> <span class="mi">42</span> <span class="p">{</span><span class="ss">:rules</span> <span class="p">[[</span><span class="ss">:max</span> <span class="s">&quot;*&quot;</span> <span class="mi">1</span><span class="p">]]})</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">([</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3+45-6&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">42</span><span class="nv">N</span> <span class="s">&quot;3/4*56&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>:max</code>, <code>:min</code>, <code>:max-in-a-row</code>, <code>:min-in-a-row</code> options are supported.</p>

<p>Add new operations (supported by expressions package)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">solve-insert-ops-num</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span> <span class="mi">80</span>
</span><span class="line">                      <span class="p">{</span><span class="ss">:ops</span> <span class="p">[</span><span class="s">&quot;+&quot;</span> <span class="s">&quot;-&quot;</span> <span class="s">&quot;*&quot;</span> <span class="s">&quot;/&quot;</span> <span class="s">&quot;^&quot;</span><span class="p">]</span>
</span><span class="line">                       <span class="ss">:rules</span> <span class="p">[[</span><span class="ss">:max</span> <span class="s">&quot;^&quot;</span> <span class="mi">1</span><span class="p">]]})</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="p">([</span><span class="mi">80</span><span class="nv">N</span> <span class="s">&quot;3^4+5-6&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Keep in mind, always limit time consuming operations (<em>like</em> <code>^</code>) as it builds all possible permutations and you can wait your answer forever.</p>

<p>There are also couple of <em>new</em> interesting things, like
getting digits of <code>pi</code>, <code>e</code>, <code>sqrt(n)</code>, ratio numbers up to desired level and other. <a href="https://github.com/mishadoff/numberto/blob/master/doc/intro.md">Check it out</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 4]]></title>
    <link href="http://mishadoff.github.io/blog/programming-digest-4/"/>
    <updated>2013-11-25T22:50:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/programming-digest-4</id>
    <content type="html"><![CDATA[<p>How to live in the Kingdom of Nouns, why mathematicians cry, filling gaps in algorithms, portion of clojure, STM, HTTP and more.</p>

<!-- more -->

<h3 id="execution-in-the-kingdom-of-nounshttpsteve-yeggeblogspotcom200603execution-in-kingdom-of-nounshtml">1. <a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Execution in the Kingdom of Nouns</a></h3>

<p>Another great Steve Yegge’s post. Not a post, a tale about <em>Javaland</em>, a place where all verbs are owned by nouns. Accept it like an analogy between OOP and FP.</p>

<blockquote>
  <p>Verbs in Javaland are responsible for all the work, but as they are held
in contempt by all, no Verb is ever permitted to wander about freely.
If a Verb is to be seen in public at all,
it must be escorted at all times by a Noun.</p>
</blockquote>

<p>Of course <em>to be escorted</em> must be replaced by <strong>VerbEscorter</strong>.</p>

<blockquote>
  <p>The Verb “execute”, and its synonymous cousins “run”, “start”, “go”,
“justDoIt”, “makeItSo”, and the like, can perform the work of any
other Verb by replacing it with an appropriate Executioner and a
call to execute(). Need to wait? Waiter.execute().
Brush your teeth? ToothBrusher(myTeeth).go().
Take out the garbage? TrashDisposalPlanExecutor.doIt().
No Verb is safe; all can be replaced by a Noun on the run.</p>
</blockquote>

<p>You are not forced to use functions everywhere, but use them where it is appropriate to simplify solution and avoid <a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">enterprise hell</a>. You know, not everything is an object. The same way not everything is a function. </p>

<h3 id="a-mathematicians-lamenthttpwwwmaaorgexternalarchivedevlinlockhartslamentpdf">2. <a href="http://www.maa.org/external_archive/devlin/LockhartsLament.pdf">A Mathematician’s Lament</a></h3>

<p>Long paper by Paul Lockhart about problems in mathematical education.</p>

<blockquote>
  <p>Math class is stupid and boring. - Students.</p>
</blockquote>

<p>Author claims that mathematics is an art, instead of some practical thing. Of course, it can be applied in real world and it is, but it’s not primary goal of math.</p>

<blockquote>
  <p>A mathematician, like a painter or poet is a maker
of patterns. If his patterns are more permanent than theirs,
it is because they are made wit <em>ideas</em>.</p>
</blockquote>

<p>Very exciting reading.</p>

<h3 id="algorithmshttpcstheorystackexchangecomquestions19759core-algorithms-deployed1977319773">3. <a href="http://cstheory.stackexchange.com/questions/19759/core-algorithms-deployed/19773#19773">Algorithms</a></h3>

<p>Algorithms are not just devils you need to learn for CS course or to prepare for interview. You can <em>apply</em> them to solve real-world problems. This SO answer provides links and some explanations where specific algorithm is used in linux kernel, chromium browser and some utils.</p>

<blockquote>
  <p>…
Red-Black trees are used for scheduling, virtual memory management,
to track file descriptors and directory entries, etc.</p>
</blockquote>

<blockquote>
  <p>grep, implements the Boyer-Moore algorithm</p>
</blockquote>

<blockquote>
  <p>fgrep implements the Aho-Corasick string matching algorithm.
…</p>
</blockquote>

<p>Even Bubblesort has its <a href="https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/drivers/media/common/saa7146/saa7146_hlp.c">application</a>!</p>

<h3 id="rich-hickeys-greatest-hitshttpthechangelogcomrich-hickeys-greatest-hits">4. <a href="http://thechangelog.com/rich-hickeys-greatest-hits/">Rich Hickey’s Greatest Hits</a></h3>

<p>I’m huge Rich Hickey’s fan. It’s just a list of his most interesting presentations. Definitely, must see.</p>

<p><img src="http://farm4.staticflickr.com/3229/2613013337_bcc9c7857d.jpg" alt="" /></p>

<ul>
  <li><a href="http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey">Are We There Yet (2009)</a></li>
  <li><a href="http://www.youtube.com/watch?v=f84n5oFoZBc">Hammock Driven Development (2010)</a></li>
  <li><a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple Made Easy (2011)</a></li>
  <li><a href="http://www.infoq.com/presentations/Value-Values">The Value of Values (2012)</a></li>
  <li><a href="http://www.youtube.com/watch?v=ROor6_NGIWU">The Language of the System (2012)</a></li>
  <li><a href="http://www.infoq.com/presentations/Design-Composition-Performance">Design, Composition and Performance (2013)</a></li>
</ul>

<h3 id="clojure-persistent-vectorhttphypirioncommusingsunderstanding-persistent-vector-pt-1">5. <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">Clojure Persistent Vector</a></h3>

<p>Two parts explanation how clojure vector works.</p>

<p>Yeah, simple square brackets <code>[1 2 3]</code> in clojure have a lot complex things under the hood. Moreover, it gives understanding not only how vectors work, but how all other persistent structures can be implemeted in efficient manner.</p>

<h3 id="software-transactional-memoryhttpjavaociwebcommarkstmarticlehtml">6. <a href="http://java.ociweb.com/mark/stm/article.html">Software Transactional Memory</a></h3>

<p>Have you heard about STM?</p>

<p>It’s a good model for concurrency control, like database transactions, but on memory. Much simpler and less error-prone to use. This article explain STM basics with some implementation details. </p>

<p>For my attempt to implement STM refer <a href="http://www.slideshare.net/mishadoff/implementing-stm-in-java">presentation</a></p>

<h3 id="a-software-developers-huide-to-httphttpodetocodecomarticles741aspx">7. <a href="http://odetocode.com/articles/741.aspx">A Software Developer’s Huide to HTTP</a></h3>

<p>Five Parts article of looking at HTTP from developer’s perspective. Worth reading to dig into some details. </p>

<h3 id="ideas-for-computinghttpsgithubcomsamsquireideas">8. <a href="https://github.com/samsquire/ideas">100 Ideas for Computing</a></h3>

<p>Great list, perhaps most ideas are already partially implemented.</p>

<blockquote>
  <p>This is a vision for how computing could be.
I began writing ideas down a number of years ago,
this is a selection of ideas old and new.</p>
</blockquote>

<p>Some of them are <a href="https://github.com/samsquire/ideas#68-right-click-outsource">great</a>:</p>

<blockquote>
  <p>Task management between computers is an unsolved problem in desktop
environments. Many users have multiple devices. Sending tasks,
inputs or outputs to different computers is painful. Usually sending
audio to be played through another computer, taking control of an
application running on another computer, sharing files or
streaming data to other machines requires special software. </p>
</blockquote>

<p>It would be great to have the same in reverse order also. I get a phone call, but phone is far away. Much better to click on current machine <em>Accept Call</em> and to talk. Security can be a challenging.</p>

<p>Some <a href="https://github.com/samsquire/ideas#18-shortcut-format">problematic</a>:</p>

<blockquote>
  <p>Keyboard shortcuts are configured differently in each program.
Shortcut configuration should be in a standard format.
This way you can load them and share them between operating
systems and share configurations between applications.</p>
</blockquote>

<p>This reminds me of xkcd comics:</p>

<p><img src="http://imgs.xkcd.com/comics/standards.png" alt="" /></p>

<p>Some ideas are <a href="https://github.com/samsquire/ideas#31-mounting-source-code">not so great</a>:</p>

<p><em>Mounting source code</em> does not solve a problem at all, it’s just adds a bit of sugar to project structure and adds more pain to build tools.</p>

<h3 id="top-10-lists-common-java-mistakeshttpjavadzonecomarticlestop-10-lists-common-java">9. <a href="http://java.dzone.com/articles/top-10-lists-common-java">Top 10 Lists Common Java Mistakes</a></h3>

<p>Metalist of Top 10 items of Top 10 java pitfalls.</p>

<p>Hundred times discussed, but if you are java programmer, you may refresh your knowledge. List of common java pitfalls includes:</p>

<blockquote>
  <p>Using Singletons</p>
</blockquote>

<blockquote>
  <p>The GOF religion</p>
</blockquote>

<blockquote>
  <p>Return null from API methods</p>
</blockquote>

<p>By the way, this list contains some other useful java things, like top 10 java people and top 15 worst Computer Software blunders. Not worst, but definitely bad.</p>

<h3 id="rare-are-gc-talkshttpfurious-waterfall-55herokucomruby-guideinternalsgchtml">10. <a href="http://furious-waterfall-55.heroku.com/ruby-guide/internals/gc.html">Rare Are GC Talks</a></h3>

<p>Different Garbage Collector algorithms briefly explained. Bookshelf used as an analogy:</p>

<blockquote>
  <p>Bookshelf - Memory, Books - Objects.</p>
</blockquote>

<p>Ruby GC implementation discussed, but you are not forced to know ruby to understand that. By the way, article contains a lot of links to more detailed GC algorithms explanation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 022]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-022/"/>
    <updated>2013-10-20T13:22:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-022</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Using <a href="http://projecteuler.net/project/names.txt">names.txt</a>
a 46K text file containing over five-thousand first names,
begin by sorting it into alphabetical order. Then working out the alphabetical
value for each name, multiply this value by its alphabetical
position in the list to obtain a name score.</p>

  <p>For example, when the list is sorted into alphabetical order,
COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.
So, COLIN would obtain a score of 938 x 53 = 49714.</p>

  <p>What is the total of all the name scores in the file?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=22">http://projecteuler.net/problem=22</a></p>

<!-- more -->

<p>Problem is very easy, assuming you know how to work with files.</p>

<p>First of all read the file, clojure has awesome simple function <code>slurp</code>, discussed in <a href="http://mishadoff.github.io/blog/clojure-euler-problem-008">Clojure Euler: Problem 008</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;names.txt&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then, you need to select all words in that file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\w+&quot;</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;names.txt&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It return a list with the names. How that simple, yeah?</p>

<p>Next two steps are:</p>

<ul>
  <li>sort list in ascending order, what is done by calling <code>sort</code> function</li>
  <li>calculate score for each word</li>
</ul>

<p>By the way, <code>score</code> consists of two parts. First of all, you must calculate natural score of the word, without its actual position in sorted list, and then you must multiply that score on its position.</p>

<p>First part looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">score</span> <span class="p">[</span><span class="nv">string</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">int </span><span class="nv">%</span><span class="p">)</span> <span class="mi">64</span><span class="p">)</span> <span class="nv">string</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Convert each character to its positional number in alphabet. For example the character “A” (<em>capitalized</em>) has ascii value of <code>65</code>. If we substract <code>64</code> it becomes <code>1</code>, what means “A” is a first letter in alphabet and so on.</p>

<p>To track positions in list we use
<a href="http://clojuredocs.org/clojure_core/clojure.core/map-indexed">map-indexed</a>
function. It works almost the same way as map, except it accept function of two arguments, index of item in current list, and item itself.</p>

<p>For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">map-indexed</span> <span class="o">#</span><span class="p">(</span><span class="nf">vec</span> <span class="p">[</span><span class="nv">%1</span> <span class="nv">%2</span><span class="p">])</span> <span class="p">[</span><span class="s">&quot;a&quot;</span> <span class="s">&quot;b&quot;</span> <span class="s">&quot;c&quot;</span><span class="p">])</span> <span class="nv">=&gt;</span> <span class="p">([</span><span class="mi">0</span> <span class="s">&quot;a&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="s">&quot;b&quot;</span><span class="p">]</span> <span class="p">[</span><span class="mi">2</span> <span class="s">&quot;c&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>As indices start from zero, do not forget increment!</p>

<p>Bind all together</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span>
</span><span class="line">        <span class="p">(</span><span class="nf">map-indexed</span> <span class="o">#</span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">inc </span><span class="nv">%1</span><span class="p">)</span> <span class="p">(</span><span class="nf">score</span> <span class="nv">%2</span><span class="p">))</span>
</span><span class="line">                     <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\w+&quot;</span> <span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;names.txt&quot;</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Solved! <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem022.clj">Code is here</a></p>

<p><em>P.S.</em> Actually, this code is not elegant. We need to read from the end to the beginning of expression. And it can be solved by Threading Macro. Read the nice <strong>Fogus</strong> <a href="http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/">explanation</a></p>

<p>Our last solution, becomes transformed to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="s">&quot;names.txt&quot;</span>
</span><span class="line">	<span class="p">(</span><span class="nf">slurp</span><span class="p">)</span>
</span><span class="line">	<span class="p">(</span><span class="nb">re-seq </span><span class="o">#</span><span class="s">&quot;\w+&quot;</span><span class="p">)</span>
</span><span class="line">	<span class="p">(</span><span class="nf">sort</span><span class="p">)</span>
</span><span class="line">	<span class="p">(</span><span class="nf">map-indexed</span> <span class="o">#</span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">inc </span><span class="nv">%1</span><span class="p">)</span> <span class="p">(</span><span class="nf">score</span> <span class="nv">%2</span><span class="p">)))</span>
</span><span class="line">	<span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Way more readable, huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 021]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-021/"/>
    <updated>2013-10-05T15:24:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-021</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Evaluate the sum of all the amicable numbers under 10000.</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=21">http://projecteuler.net/problem=21</a></p>

<!-- more -->

<blockquote>
  <p>Let d(n) be defined as the sum of proper divisors of n
(numbers less than n which divide evenly into n).</p>

  <p>If d(a) = b and d(b) = a, where a != b, then a and b are an
amicable pair and each of a and b are called amicable numbers.</p>

  <p>For example, the proper divisors of 220 are
1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.
The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.</p>
</blockquote>

<p>We can do it <em>bruteforcely</em>, but we won’t.</p>

<p>Let start with the function <code>d</code>. We call it <code>sum-of-proper-divisors</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">sum-of-proper-divisors</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">base</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">))</span> <span class="p">(</span><span class="nb">range </span><span class="mi">2</span> <span class="p">(</span><span class="nf">Math/sqrt</span> <span class="nv">n</span><span class="p">)))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">reduce + </span><span class="mi">1</span> <span class="p">(</span><span class="nb">concat </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">base</span><span class="p">)</span> <span class="nv">base</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bad approach to find all divisors: to iterate on all numbers from 1 to <code>n</code>
and check if it is divisor or not.
Instead, we iterate from 1 to <code>sqrt(n)</code>, find one divisor and
calculate another symmetric divisor.</p>

<p>For example, take number <code>10</code>.
We iterating from <code>2</code> to <code>(sqrt 10)</code>. Number <code>2</code> is divisor, so we divide <code>(/ 10 2)</code>, get <code>5</code> which is also divisor. And so on.</p>

<p>This is predicate checks where two numbers amicable or not:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">amicable?</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">= </span><span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</span><span class="line">       <span class="p">(</span><span class="nb">= </span><span class="nv">a</span> <span class="p">(</span><span class="nf">sum-of-proper-divisors</span> <span class="nv">b</span><span class="p">))</span>
</span><span class="line">       <span class="p">(</span><span class="nb">= </span><span class="nv">b</span> <span class="p">(</span><span class="nf">sum-of-proper-divisors</span> <span class="nv">a</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Obvious enough, just consider that we skip case where <code>(= a b)</code>.</p>

<p>The last part is to use our functions to obtain result.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">sums</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">map </span><span class="nv">sum-of-proper-divisors</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">10000</span><span class="p">)))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">10000</span><span class="p">)]</span>
</span><span class="line">      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">amicable?</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">sums</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">i</span><span class="p">)))</span> <span class="nv">i</span> <span class="mi">0</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just generate all sums, and check if another number <code>i</code> produce the amicable pair. Done!</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem021.clj">Code</a></p>

<p><strong>P.S.</strong> Take a look at the last snippet. <code>vec</code> is really important there.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing numberto]]></title>
    <link href="http://mishadoff.github.io/blog/announcing-numberto/"/>
    <updated>2013-09-01T04:23:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/announcing-numberto</id>
    <content type="html"><![CDATA[<p>All you need to play with numbers!</p>

<!-- more -->

<p><a href="https://github.com/mishadoff/numberto">numberto</a>
- simple clojure library with a bunch of functions operating on numbers.</p>

<p>I created this project for two reasons:</p>

<ol>
  <li>Solving problems on <a href="http://projecteuler.net">Project Euler</a>, <a href="http://www.4clojure.com/">4Clojure</a> and just playground with numbers needed common functions. I just extracted them to separate util library.</li>
  <li>Practice to develop clojure project with unit tests, continuos integration, documentation and publishing to clojars.</li>
</ol>

<h3 id="get-it">Get it</h3>

<p>Current version is <code>0.0.2</code> available to download on
<a href="https://clojars.org/numberto/versions/0.0.2">Clojars</a> or
as lein dependency <code>[numberto "0.0.2"]</code></p>

<h3 id="example-usage">Example usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">number-&gt;roman</span> <span class="mi">19</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="s">&quot;XIX&quot;</span>
</span><span class="line"><span class="p">(</span><span class="nb">take </span><span class="mi">10</span> <span class="nv">fibonacci</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">8</span> <span class="mi">13</span> <span class="mi">21</span> <span class="mi">34</span> <span class="mi">55</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">shift-right</span> <span class="mi">123456789</span> <span class="mi">3</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="mi">789123456</span>
</span><span class="line"><span class="p">(</span><span class="nf">count-digits</span> <span class="p">(</span><span class="nf">!</span> <span class="mi">100000</span><span class="p">))</span> <span class="nv">=&gt;</span> <span class="mi">456574</span>
</span><span class="line"><span class="p">(</span><span class="nf">factorize</span> <span class="mi">234</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">13</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Can you read long numbers?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">number-name</span> <span class="mi">16532561257523723757234781264</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="s">&quot;sixteen octillion five hundred thirty two septillion five hundred sixty one sextillion</span>
</span><span class="line"><span class="s">two hundred fifty seven quintillion five hundred twenty three quadrillion seven hundred</span>
</span><span class="line"><span class="s">twenty three trillion seven hundred fifty seven billion two hundred thirty four million</span>
</span><span class="line"><span class="s">seven hundred eighty one thousand two hundred sixty four&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="structure">Structure</h3>

<p>Each logical set of functions moved to separate namespace. Here is the list of namespaces:</p>

<ul>
  <li><strong>Converters</strong>.
number to digits, char to digit, roman to arabic</li>
  <li><strong>Math</strong>.
Often used functions, such as <code>count-digits</code>, <code>shuffle-num</code>, <code>reverse-num</code> and some from common math <code>abs</code>, <code>gcd</code>, <code>lcm</code></li>
  <li><strong>Seqs</strong>.
Various lazy sequences: <code>fibonacci</code>, <code>farey</code>, <code>palindromes</code>.</li>
  <li><strong>Primes</strong>.
Prime numbers lazy sequence, factorization and totient function</li>
  <li><strong>Factorial</strong>.
Standard and Improved version of factorial</li>
  <li><strong>Generators</strong>.
Generate random numbers</li>
  <li><strong>Printers</strong>.
Pretty print for long numbers</li>
</ul>

<p>Check out <a href="https://github.com/mishadoff/numberto/blob/master/doc/intro.md">detailed intro</a></p>

<p><strong>P.S.</strong> I still experimenting, so expect a lot of changes between versions until make something stable. Comments and advices are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Golf: Brainfuck Interpreter]]></title>
    <link href="http://mishadoff.github.io/blog/code-golf-brainfuck-interpreter/"/>
    <updated>2013-08-09T17:44:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/code-golf-brainfuck-interpreter</id>
    <content type="html"><![CDATA[<p>Brainfuck Interpreter in two tweets.</p>

<!-- more -->

<p>Previous article <a href="http://mishadoff.github.io/blog/code-golf-game-of-life/">Code Golf: Game of Life</a> raised some interest, and I decided to proceed. Today’s problem is a Brainfuck Interpreter.</p>

<p><a href="http://en.wikipedia.org/wiki/Brainfuck">Brainfuck</a> is an esoteric programming language, famous because of its small command set. It is based on array of cells (Turing Tape) and pointer to this array. There are only 8 commands: </p>

<ul>
  <li><code>&gt;</code> move to the next cell</li>
  <li><code>&lt;</code> move to the previous cell</li>
  <li><code>+</code> increment value in the current cell</li>
  <li><code>-</code> decrement value in the current cell</li>
  <li><code>.</code> print char with ascii value of current cell</li>
  <li><code>,</code> read ascii value for input char to the current cell</li>
  <li><code>[</code> start loop until value of pointer is not zero </li>
  <li><code>]</code> finish loop</li>
</ul>

<p>That’s all. Brainfuck is <a href="http://en.wikipedia.org/wiki/Turing_completeness">Turing Complete</a> language, that means it capable to implement any program. If you crazy, of course.</p>

<h3 id="tweet">Tweet</h3>

<p>Final version took <code>280</code> characters in Clojure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">a</span> <span class="nv">p</span> <span class="nv">k</span> <span class="nv">c</span><span class="p">](</span><span class="nf">let</span><span class="p">[</span><span class="nv">h</span> <span class="o">#</span><span class="p">(</span><span class="nb">nth </span><span class="nv">%1</span><span class="err">@</span><span class="nv">%2</span><span class="p">)</span><span class="nv">e</span> <span class="o">#</span><span class="p">(</span><span class="nf">h</span> <span class="nv">a</span> <span class="nv">p</span><span class="p">)</span><span class="nv">s</span> <span class="o">#</span><span class="p">(</span><span class="nf">swap!</span> <span class="nv">%1%2</span> <span class="mi">1</span><span class="p">)</span><span class="nv">t</span>
</span><span class="line"><span class="o">#</span><span class="p">(</span><span class="nb">aset </span><span class="nv">a</span><span class="err">@</span><span class="nv">p</span><span class="p">(</span><span class="nf">%</span><span class="p">(</span><span class="nf">e</span><span class="p">)</span><span class="mi">1</span><span class="p">))</span><span class="nv">l</span> <span class="o">#</span><span class="p">(</span><span class="nf">do</span><span class="p">(</span><span class="nf">s</span> <span class="nv">k</span> <span class="nv">%</span><span class="p">)(</span><span class="nf">case</span><span class="p">(</span><span class="nf">h</span> <span class="nv">c</span> <span class="nv">k</span><span class="p">)</span><span class="sc">\]</span><span class="p">()</span><span class="sc">\[</span><span class="p">()(</span><span class="nf">recur</span> <span class="nv">%</span><span class="p">)</span>
</span><span class="line"><span class="p">))](</span><span class="nf">while</span><span class="p">(</span><span class="nf">&gt;</span><span class="p">(</span><span class="nb">count </span><span class="nv">c</span><span class="p">)</span><span class="err">@</span><span class="nv">k</span><span class="p">)(</span><span class="nf">do</span><span class="p">(</span><span class="nf">case</span><span class="p">(</span><span class="nf">h</span> <span class="nv">c</span> <span class="nv">k</span><span class="p">)</span><span class="sc">\&gt;</span><span class="p">(</span><span class="nf">s</span> <span class="nv">p</span> <span class="nv">+</span><span class="p">)</span><span class="sc">\&lt;</span><span class="p">(</span><span class="nf">s</span> <span class="nv">p</span> <span class="nv">-</span><span class="p">)</span><span class="sc">\+</span>
</span><span class="line"><span class="p">(</span><span class="nf">t</span> <span class="nv">+</span><span class="p">)</span><span class="sc">\-</span><span class="p">(</span><span class="nf">t</span> <span class="nv">-</span><span class="p">)</span><span class="sc">\.</span><span class="p">(</span><span class="nf">print</span><span class="p">(</span><span class="nf">char</span><span class="p">(</span><span class="nf">e</span><span class="p">)))</span><span class="sc">\,</span><span class="p">(</span><span class="nb">aset </span><span class="nv">a</span><span class="err">@</span><span class="nv">p</span><span class="p">(</span><span class="nf">.read</span> <span class="nv">*in*</span><span class="p">))</span><span class="sc">\[</span><span class="p">(</span><span class="nf">if</span>
</span><span class="line"><span class="p">(</span><span class="nf">=</span><span class="p">(</span><span class="nf">e</span><span class="p">)</span><span class="mi">0</span><span class="p">)(</span><span class="nf">l</span> <span class="nv">+</span><span class="p">))</span><span class="sc">\]</span><span class="p">(</span><span class="nf">if</span><span class="p">(</span><span class="nf">&gt;</span><span class="p">(</span><span class="nf">e</span><span class="p">)</span><span class="mi">0</span><span class="p">)(</span><span class="nf">l</span> <span class="nv">-</span><span class="p">)))(</span><span class="nf">s</span> <span class="nv">k</span> <span class="nv">+</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Exactly 2 tweets.</p>

<h3 id="sugared-version">“Sugared” version</h3>

<p>Translating to more readable code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">parse-internal</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">pt</span> <span class="nv">pc</span> <span class="nv">cs</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">act</span> <span class="p">[]</span>
</span><span class="line">            <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">cs</span> <span class="err">@</span><span class="nv">pc</span><span class="p">)</span>
</span><span class="line">              <span class="sc">\&gt;</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nv">pt</span> <span class="nv">inc</span><span class="p">)</span>
</span><span class="line">              <span class="sc">\&lt;</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nv">pt</span> <span class="nv">dec</span><span class="p">)</span>
</span><span class="line">              <span class="sc">\+</span> <span class="p">(</span><span class="nb">aset </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nb">nth </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span><span class="p">)))</span>
</span><span class="line">              <span class="sc">\-</span> <span class="p">(</span><span class="nb">aset </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nb">nth </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span><span class="p">)))</span>
</span><span class="line">              <span class="sc">\.</span> <span class="p">(</span><span class="nb">print </span><span class="p">(</span><span class="nb">char </span><span class="p">(</span><span class="nb">nth </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span><span class="p">)))</span>
</span><span class="line">              <span class="sc">\,</span> <span class="p">(</span><span class="nb">aset </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span> <span class="p">(</span><span class="nf">.read</span> <span class="nv">*in*</span><span class="p">))</span>
</span><span class="line">              <span class="sc">\[</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nb">nth </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span><span class="p">))</span> <span class="p">(</span><span class="nf">loop-</span> <span class="nv">inc</span><span class="p">))</span>
</span><span class="line">              <span class="sc">\]</span> <span class="p">(</span><span class="nb">if-not </span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nb">nth </span><span class="nv">a</span> <span class="err">@</span><span class="nv">pt</span><span class="p">))</span> <span class="p">(</span><span class="nf">loop-</span> <span class="nv">dec</span><span class="p">))))</span>
</span><span class="line">          <span class="p">(</span><span class="nf">loop-</span> <span class="p">[</span><span class="nv">f</span><span class="p">]</span>
</span><span class="line">            <span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nf">swap!</span> <span class="nv">pc</span> <span class="nv">f</span><span class="p">)</span>
</span><span class="line">                <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">cs</span> <span class="err">@</span><span class="nv">pc</span><span class="p">)</span>
</span><span class="line">                  <span class="sc">\[</span> <span class="p">()</span>
</span><span class="line">                  <span class="sc">\]</span> <span class="p">()</span>
</span><span class="line">                  <span class="p">(</span><span class="nf">recur</span> <span class="nv">f</span><span class="p">))))]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">while</span> <span class="p">(</span><span class="nb">not= </span><span class="p">(</span><span class="nb">count </span><span class="nv">cs</span><span class="p">)</span> <span class="err">@</span><span class="nv">pc</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="nf">do</span>
</span><span class="line">        <span class="p">(</span><span class="nf">act</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="nf">swap!</span> <span class="nv">pc</span> <span class="nv">inc</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So, what’s happening there?</p>

<p>Function arguments are parameters of our tape and brainfuck program.</p>

<ul>
  <li><code>a</code> is an array represents finite tape <code>e.g (int-array 100)</code></li>
  <li><code>pt</code> is an atom - pointer to the tape</li>
  <li><code>pc</code> is an atom - pointer to the command list</li>
  <li><code>cs</code> command list</li>
</ul>

<p>Function <code>act</code> decides which action to perform depending on current command,
<code>loop</code> allows us to move command pointer inside a loop,
and main <code>while-do</code> loop executes commands until they exhausted. Simple enough.</p>

<p>To make our interpreter more friendly we create function <code>parse</code> that accepts
string - program, written in brainfuck.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nb">parse </span><span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nf">int-array</span> <span class="mi">100</span><span class="p">)</span>  <span class="c1">;; Turing Tape</span>
</span><span class="line">        <span class="nv">p</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)</span>         <span class="c1">;; Pointer to Tape</span>
</span><span class="line">        <span class="nv">k</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)</span>         <span class="c1">;; Pointer to Command</span>
</span><span class="line">        <span class="nv">c</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">seq </span><span class="nv">s</span><span class="p">))]</span>   <span class="c1">;; Vector of Commands</span>
</span><span class="line">    <span class="p">(</span><span class="nf">parse-internal</span> <span class="nv">a</span> <span class="nv">p</span> <span class="nv">k</span> <span class="nv">c</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="testing">Testing</h4>

<p>Print “Hello, world”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">parse </span><span class="s">&quot;++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]</span>
</span><span class="line"><span class="s">        &gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;</span>
</span><span class="line"><span class="s">        .+++.------.--------.&gt;+.&gt;.&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span>
</span><span class="line"><span class="nv">Hello</span> <span class="nv">World!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Input 5 characters and reverse print them</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">parse </span><span class="s">&quot;,&gt;,&gt;,&gt;,&gt;,.&lt;.&lt;.&lt;.&lt;.&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="nv">&lt;wait</span> <span class="nv">input</span> <span class="s">&quot;hello&quot;</span><span class="nv">&gt;</span>
</span><span class="line"><span class="nv">olleh</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>More complex program need nested loops, which is not supported by
this version (<em>for the sake of small size!</em>)</p>

<p>History of implementation, nested loops and more available <a href="https://github.com/mishadoff/prog-experiment/blob/master/clojure/brainfuck.clj">here</a></p>

<p><strong>P.S.</strong> This version is not “fully-featured” brainfuck interpreter.</p>

<ul>
  <li>It does not work for inifinite tape</li>
  <li>Cell datatype is fixed and not assumed to be cyclic. For example, if cell type is unsigned byte <code>[0..255]</code>, then <code>255 + 1 != 0</code> and break interpreter</li>
  <li>Only unsigned types supported</li>
  <li>Nested loops are not allowed</li>
  <li>No error handling</li>
</ul>

<p>But, you are welcome to improve it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 3]]></title>
    <link href="http://mishadoff.github.io/blog/programming-digest-3/"/>
    <updated>2013-07-22T20:33:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/programming-digest-3</id>
    <content type="html"><![CDATA[<p>Why your software sucks and what is the “Secret Weapon”. Also,
algorithm complexities refresher, functional programming, including
Scala and Clojure, concurrency and lot of humor.</p>

<!-- more -->

<h3 id="big-ball-of-mudhttpwwwlaputanorgmud">1. <a href="http://www.laputan.org/mud/">Big Ball of Mud</a></h3>

<blockquote>
  <p>What does your programming day look like? </p>
</blockquote>

<p><img src="http://www.laputan.org/images/pictures/spaghetti-medium.jpg" alt="" /></p>

<p>The article describes problems in software design and explains
why almost every system nowadays look like “Big Ball of Mud”.</p>

<p>There are seven <em>real</em> patterns in software design:</p>

<ul>
  <li>BIG BALL OF MUD</li>
  <li>THROWAWAY CODE</li>
  <li>PIECEMEAL GROWTH</li>
  <li>KEEP IT WORKING</li>
  <li>SHEARING LAYERS</li>
  <li>SWEEPING IT UNDER THE RUG</li>
  <li>RECONSTRUCTION </li>
</ul>

<p><em>caps preserved due to original article</em></p>

<p>And our favorite phrase:</p>

<blockquote>
  <p>It works, so why fix it?</p>
</blockquote>

<h3 id="no-silver-bullethttpwwwcsnottacukcahg51issdocumentsnosilverbullethtml">2. <a href="http://www.cs.nott.ac.uk/~cah/G51ISS/Documents/NoSilverBullet.html">No Silver Bullet</a></h3>

<p>Classic article by Frederick Brooks, Jr.</p>

<p>Object-oriented programming? Artificial Intelligence? Expert systems? Time-sharing?
Graphical or Automated programming?</p>

<p>Nothing helps you.</p>

<blockquote>
  <p>The most radical possible solution for constructing software is not to construct it at all.</p>
</blockquote>

<p>Demotivating, but helpful.</p>

<h3 id="beating-the-averageshttpwwwpaulgrahamcomavghtml">3. <a href="http://www.paulgraham.com/avg.html">Beating the Averages</a></h3>

<p>This is inspiring one.</p>

<p>Brooks told “There is no Silver Bullet”, but Paul Graham reveals “The Secret Weapon”.</p>

<p>The article is success story of startup called Viaweb.
Chosen technologies were so good, that allowed Viaweb to compete with all similar startups.</p>

<blockquote>
  <p>Our secret weapon was similar.
We wrote our software in a weird AI language, with a bizarre syntax full of parentheses.</p>
</blockquote>

<p>As you probably understood, it was Lisp.</p>

<h3 id="know-thy-complexitieshttpbigocheatsheetcom">4. <a href="http://bigocheatsheet.com/">Know Thy Complexities!</a></h3>

<p>Plain algorithm complexity cheatsheet. Contains time and space complexities
for common algorithms and datastructures.</p>

<h3 id="adventures-in-functional-programminghttpvimeocom45140590">5. <a href="http://vimeo.com/45140590">Adventures in Functional Programming</a></h3>

<blockquote>
  <p>Did you know that recursion is just syntactic sugar over higher-order functions?</p>
</blockquote>

<p>Awesome screencast by Jim Weirich about Y-Combinator in JavaScript.</p>

<h3 id="scala-problemshttpaperiodicnetphilscalas-99">6. <a href="http://aperiodic.net/phil/scala/s-99/">99 Scala Problems</a></h3>

<p>I am not using Scala and prefer Clojure for rapid protyping, but find such articles
extremely useful when learning new language. Just exploring the code shows that Scala is
the powerful and expressive language.</p>

<p><strong>P.S.</strong> I am on half way to publish “99 Clojure Problems”.</p>

<h3 id="locks-actors-and-stm-in-pictureshttpaditioposts2013-05-15-locks-actors-and-stm-in-pictureshtml">7. <a href="http://adit.io/posts/2013-05-15-Locks,-Actors,-And-STM-In-Pictures.html">Locks, Actors, And STM In Pictures</a></h3>

<p>Great pictures. This is nice intro to concurrency and overview of some common cocurrency problems.</p>

<p><img src="http://adit.io/imgs/concurrency/threads_using_mutex.png" alt="" /></p>

<h3 id="understanding-clojure-concurrencyhttpblakesmithme20120515understanding-clojure-concurrency-part-1html">8. <a href="http://blakesmith.me/2012/05/15/understanding-clojure-concurrency-part-1.html">Understanding Clojure Concurrency</a></h3>

<p>Clojure is exciting language with great concurrency capabilities:
default immutability, atoms, refs, agents, promises, futures and software transactional memory.</p>

<p>This article is an introduction to them. Check out the <a href="http://blakesmith.me/2012/05/25/understanding-clojure-concurrency-part-2.html">2nd part</a></p>

<h3 id="wathttpswwwdestroyallsoftwarecomtalkswat">9. <a href="https://www.destroyallsoftware.com/talks/wat">Wat</a></h3>

<p>This is the video screencast of Gary Bernhardt’s talk.
Sarcastic and great presentation of weird Ruby and JavaScript behaviour.</p>

<blockquote>
  <p>An object plus an object is actually…. Not A Number!</p>
</blockquote>

<h3 id="what-is-the-most-intellectual-joke-you-knowhttpwwwredditcomraskredditcomments1h1cygwhatsthemostintellectualjokeyouknow">10. <a href="http://www.reddit.com/r/AskReddit/comments/1h1cyg/whats_the_most_intellectual_joke_you_know/">What is the most intellectual joke you know</a></h3>

<p>We touch humorous side and this article (<em>reddit thread</em>) not about programming, just jokes.</p>

<blockquote>
  <p>Q: What does the “B” in Benoit B. Mandelbrot stand for?</p>

  <p>A: Benoit B. Mandelbrot.</p>
</blockquote>

<p>In fact, some of the jokes related to programming.</p>

<blockquote>
  <p>There are only two hard things in Computer Science: cache invalidation, naming things, and off-by-one errors.</p>
</blockquote>

<p>Some of them a bit stupid, but still fun.</p>

<blockquote>
  <p>How many surrealists does it take to screw in a light bulb?</p>

  <p>A fish.</p>
</blockquote>

<p>Definitely, worth to read!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 020]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-020/"/>
    <updated>2013-07-21T13:39:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-020</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Find the sum of the digits in the number 100!</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=20">http://projecteuler.net/problem=20</a></p>

<!-- more -->

<p>First of all we need to calculate factorial.
Without integer overflows, stack overflows and other caveats.</p>

<p>Previous article <a href="http://mishadoff.github.io/blog/fast-factorial/">Fast Factorial</a> has working solution
that we might use.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(defn ! [n]
</span><span class="line">  (reduce *' (range 1 (inc n))))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, calculate the sum of digits, the same function that we used in
<a href="http://mishadoff.github.io/blog/clojure-euler-problem-008/">Clojure Euler: Problem 008</a> and
<a href="http://mishadoff.github.io/blog/clojure-euler-problem-016/">Clojure Euler: Problem 016</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(defn sum-of-digits [n]
</span><span class="line">  (reduce + (map #(- (int %) 48) (seq (str n)))))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And the final line</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(sum-of-digits (! 100))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Simple enough, huh?</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem020.clj">Code</a></p>

<p><strong>P.S.</strong> The functions <code>sum-of-digits</code>, <code>count-digits</code> and similar used often
and look very ugly, so I decided to create a separate set of functions (<em>library?</em>)
which I can refer. It should be a set of common mathematic functions, including
different sequences, sums, converters, interesting numbers. You might use it too.
Welcome to <a href="https://github.com/mishadoff/numberto/">numberto</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 019]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-019/"/>
    <updated>2013-07-10T01:59:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-019</id>
    <content type="html"><![CDATA[<blockquote>
  <p>How many Sundays fell on the first of the month
during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=19">http://projecteuler.net/problem=19</a></p>

<!-- more -->

<p>Project Euler also gives following information:</p>

<ul>
  <li>1 Jan 1900 was a Monday.</li>
  <li>
    <p>A poem</p>

    <p>Thirty days has September,<br />
April, June and November.<br />
All the rest have thirty-one,<br />
Saving February alone,<br />
Which has twenty-eight, rain or shine.<br />
And on leap years, twenty-nine.<br /></p>
  </li>
  <li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li>
</ul>

<p>Implementin calendars logic is great, but java interoperability is much better!</p>

<p>First of all, take standard java <code>GregorianCalendar</code> class.
We can import it <em>almost</em> the same way as we use <code>require</code> </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">import </span><span class="p">[</span><span class="nv">java.util</span> <span class="nv">GregorianCalendar</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To create an object use function <code>new</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">new </span><span class="nv">GregorianCalendar</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But it is more idiomatic way to create java objects with special syntax:
<em>period after class name</em> </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">GregorianCalendar.</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To configure calendar object to specific date we need to set some its
properties. Setters syntax is following (assuming <code>calendar</code>
is an object of calendar):</p>

<p>Java</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">calendar</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">GregorianCalendar</span><span class="o">.</span><span class="na">YEAR</span><span class="o">,</span> <span class="mi">2013</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Clojure</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">.set</span> <span class="nv">calendar</span> <span class="nv">GregorianCalendar/YEAR</span> <span class="mi">2013</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Executing lot of setters is the same boilerplate as in java:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">do</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">calendar</span> <span class="nv">GregorianCalendar/YEAR</span> <span class="mi">2013</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">calendar</span> <span class="nv">GregorianCalendar/MONTH</span> <span class="mi">11</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">calendar</span> <span class="nv">GregorianCalendar/DAY_OF_MONTH</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To avoid repetition of object name we can use <code>doto</code> macro:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">doto </span><span class="p">(</span><span class="nf">GregorianCalendar.</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/YEAR</span> <span class="mi">2013</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/MONTH</span> <span class="mi">11</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/DAY_OF_MONTH</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This macro <em>magically</em> performs the same set of operations as above, but in more readable way.</p>

<p>Now we can create calendar objects for the <em>first of the
specific month of the specific year</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">calendar-for</span> <span class="p">[</span><span class="nv">year</span> <span class="nv">month</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">doto </span><span class="p">(</span><span class="nf">GregorianCalendar.</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/YEAR</span> <span class="nv">year</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/MONTH</span> <span class="nv">month</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">.set</span> <span class="nv">GregorianCalendar/DAY_OF_MONTH</span> <span class="mi">1</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just iterate through all such objects in date range given in problem definition
and count Sundays.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce </span><span class="nv">+</span>
</span><span class="line">  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">year</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1901</span> <span class="p">(</span><span class="nb">inc </span><span class="mi">2000</span><span class="p">))</span> <span class="nv">month</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="mi">12</span><span class="p">))]</span>
</span><span class="line">    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">c</span> <span class="p">(</span><span class="nf">calendar-for</span> <span class="nv">year</span> <span class="nv">month</span><span class="p">)]</span>
</span><span class="line">          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">GregorianCalendar/SUNDAY</span>
</span><span class="line">                 <span class="p">(</span><span class="nf">.get</span> <span class="nv">c</span> <span class="nv">GregorianCalendar/DAY_OF_WEEK</span><span class="p">))</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem019.clj">Problem solved</a>!</p>

<p><strong>P.S.</strong> Java interoperability is ugly but still useful. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[randomorg-0.1]]></title>
    <link href="http://mishadoff.github.io/blog/randomorg-0-dot-1/"/>
    <updated>2013-07-06T15:33:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/randomorg-0-dot-1</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mishadoff/randomorg">randomorg-0.1</a> released!</p>

<!-- more -->

<p>If you use random numbers in your software you might be interested in
better numbers distribution than <code>Random.nextInt()</code>.</p>

<p>Someone solves this problem with hardware generators, few entropy sources and
even <a href="http://www.amazon.com/Million-Random-Digits-Normal-Deviates/dp/0833030477/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1373114958&amp;sr=1-1&amp;keywords=A+Million+Random+Digits+with+100%2C000+Normal+Deviates">books</a>.</p>

<p>By the way, there is great service <a href="http://random.org">random.org</a>
which allows to generate random numbers via atmospheric noise.</p>

<p><strong>randomorg</strong> is a small java library for random.org API.</p>

<p>Check project page for usage and documentation!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Factorial]]></title>
    <link href="http://mishadoff.github.io/blog/fast-factorial/"/>
    <updated>2013-06-07T01:08:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/fast-factorial</id>
    <content type="html"><![CDATA[<p>Factorial function is simple enough. But there is still some fun about it.
In <a href="http://mishadoff.github.io/blog/stirlings-approximation/">Stirling’s Approximation</a> article
we’ve seen how to calculate good factorial approximation faster than <em>exact</em> value.
By the way, there is an algorithm to calculate <em>exact</em> value of factorial faster
than “by definition”.</p>

<!-- more -->

<h3 id="factorials">Factorials</h3>

<p>Most of programming languages tutorials shows the following
approach to calculate factorial (<em>transformed to clojure</em>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">factorial</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">      <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="p">(</span><span class="nf">factorial</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Simple recursive solution.</p>

<p><em>Note:</em> Since clojure allows using <code>!</code> character in function name, it is good name for factorial.</p>

<p><code>(! 10)</code> works, <code>(! 20)</code> works, <code>(! 30)</code>…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nb">&gt; </span><span class="nv">ArithmeticException</span> <span class="nv">integer</span> <span class="nv">overflow</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oops.</p>

<p>Default clojure integer type is 64 bit (<code>Long</code>).
It does not fit well for <em>such large input</em>, so we rewrite function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">      <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">n</span> <span class="p">(</span><span class="nf">!</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just one character added, <code>*</code> became <code>*'</code>. It is automatic type promotion.
If type can not hold the value without losing precision, it automatically extends.
In this case, <code>Long</code> becames <code>BigInteger</code> and all works fine.</p>

<p><code>(! 30)</code> works, <code>(! 300)</code> works, <code>(! 3000)</code> works,
<code>(! 30000)</code>…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nb">&gt; </span><span class="nv">StackOverflowError</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Yet another overflow.</p>

<p>Well, stack size is limited. We don’t need to consume stackframes and
will use <code>loop/recur</code> approach.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">cur</span> <span class="nv">n</span> <span class="nv">acc</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">cur</span><span class="p">)</span> <span class="nv">acc</span>
</span><span class="line">        <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">cur</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">cur</span> <span class="nv">acc</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It is also recursive approach, but instead of saving so far calculated value
in stack, we pass it to the function as a parameter.
Clojure optimize tail recursion to iterative version and does not consume stack.
It succesfully calculates factorial for 30000,
and for any other value. Great!</p>

<p>If we look at the factorial as a calculation process, not definition, it means
“product of all numbers between 1 and n”. It is very concise for functional programming:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce </span><span class="nv">*</span><span class="o">&#39;</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">n</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Does not consume stack, no number overflow, but works
~2 times slower than <code>loop/recur</code> version.</p>

<p>I don’t know the reason, but it seems time wasted
by <code>reduce</code> for creating intermediate results. So we choose
previous <code>loop/recur</code> function as baseline factorial.</p>

<h3 id="fast-factorial">Fast Factorial</h3>

<p>Here is another way to calculate factorial.</p>

<p>Let’s consider example <code>12!</code>.</p>

<p>Factorial is a product of numbers <code>12! = 1 * 2 * 3 * ... * 11 * 12</code>.
Perform prime factorization of each number.
For example, prime factorization of <code>12</code> is <code>2 * 2 * 3</code>.</p>

<p>After that we get a factorization of the <code>12!</code>, which contains only prime numbers.
To find factorial value we can just multiply them all. But we do clever trick instead.</p>

<p>Group every prime number and its power.
E.g. if we have factorization <code>2 * 2 * 2 * 3 * 5</code> it becomes vector of pairs <code>[[2 3] [3 1] [5 1]]</code>.</p>

<p>To calculate power we have simple <code>power</code> implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">power</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce </span><span class="nv">*</span><span class="o">&#39;</span> <span class="p">(</span><span class="nb">repeat </span><span class="nv">n</span> <span class="nv">x</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Trick is using exponentiation by squaring, which reduce
exponentiation complexity from <code>O(n)</code> to <code>O(log n)</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">power</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">        <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">x</span>
</span><span class="line">        <span class="p">(</span><span class="nf">even?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">power*</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">x</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="mi">2</span><span class="p">))</span>
</span><span class="line">        <span class="p">(</span><span class="nf">odd?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">power*</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">x</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">dec </span><span class="nv">n</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It is not tail-recursive solution and theoretically may cause
stackoverflow, but its not critical. It works well for large numbers.</p>

<p>Actually, we do not perform factorization. We just know that factorization of <code>n!</code> contains all prime numbers below or equal <code>n</code> and every number have some multiplicity. </p>

<p>The function calculates how many times prime number <code>k</code> occurs in factorial factorization for <code>n</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">find-power</span> <span class="p">[</span><span class="nv">n</span> <span class="nv">k</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">total</span> <span class="nv">n</span> <span class="nv">sum</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nb">/ </span><span class="nv">total</span> <span class="nv">k</span><span class="p">))]</span>
</span><span class="line">      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">i</span><span class="p">)</span> <span class="nv">sum</span>
</span><span class="line">          <span class="p">(</span><span class="nf">recur</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">sum</span> <span class="nv">i</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Binding all together:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">!!</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">loop </span><span class="p">[[</span><span class="nv">h</span> <span class="o">&amp;</span> <span class="nv">t</span><span class="p">]</span>
</span><span class="line">         <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">power</span> <span class="nv">%</span> <span class="p">(</span><span class="nf">find-power</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nb">take-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">%</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">primes</span><span class="p">)))</span>
</span><span class="line">         <span class="nv">acc</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="k">if </span><span class="nv">h</span> <span class="p">(</span><span class="nf">recur</span> <span class="nv">t</span> <span class="p">(</span><span class="nf">*</span><span class="o">&#39;</span> <span class="nv">h</span> <span class="nv">acc</span><span class="p">))</span> <span class="nv">acc</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://github.com/mishadoff/numberto/blob/master/src/numberto/factorial.clj">Code available here</a></p>

<p><em>Note:</em> <code>primes</code> is a function generates lazy-sequence of prime numbers. It can be taken from <code>clojure.contrib.lazy-seqs</code>.</p>

<h3 id="testing">Testing</h3>

<blockquote>
  <p>Anyway, why do you think it is faster?
You performing more calculations than just multiplying numbers.</p>
</blockquote>

<p>Let’s see.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 10 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">10</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">10</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 100 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">100</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">100</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 1000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 10000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 100000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">100000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">100000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="s">&quot;== 1000000 ==&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!</span> <span class="mi">1000000</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">!!</span> <span class="mi">1000000</span><span class="p">))</span> <span class="nv">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="nb">== </span><span class="mi">10</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.051054 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.137587 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">100</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.081365 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 0.376653 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">1000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 1.59252 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 3.212842 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">10000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 161.856965 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 76.452529 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">100000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 19403.375319 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 6372.35266 msecs&quot;</span>
</span><span class="line"><span class="nb">== </span><span class="mi">1000000</span> <span class="nv">==</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 2863893.471718 msecs&quot;</span>
</span><span class="line"><span class="s">&quot;Elapsed time: 1079632.255919 msecs&quot;</span>
</span><span class="line"><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For small factorials <code>(&lt; 1000)</code> improved version works ~2 times slower.
Around the thousand it has the same performance as standard version.
And, finally, some win (up to 3 times) for larger numbers.</p>

<p>Theoretically, you can implement generalized factorial with these two algorithms
and switch between them, depending on input. But who really need it? </p>

<blockquote>
  <p>Question: What the complexity of this algorithm?</p>
</blockquote>

<p><strong>P.S.</strong> Enterprise lovers would say factorial complexity is <code>O(1)</code>.
Just precompute all values and save them to database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 018]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-018/"/>
    <updated>2013-05-17T00:26:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-018</id>
    <content type="html"><![CDATA[<blockquote>
  <p>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   3
</span><span class="line">  7 4
</span><span class="line"> 2 4 6
</span><span class="line">8 5 9 3</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>That is, 3 + 7 + 4 + 9 = 23.</p>

  <p>Find the maximum total from top to bottom of the triangle below:</p>

  <p>[Check out big triangle in original link]</p>

  <p>NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route.
However, Problem 67, is the same challenge with a triangle containing one-hundred rows;
it cannot be solved by brute force, and requires a clever method! ;o)</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=18">http://projecteuler.net/problem=18</a></p>

<!-- more -->

<p>As note says we can try every route and it will be just good.
Instead of that, we can behave much better with clever method.</p>

<p>(Some time ago, I gave basic explanation on my approach in <a href="http://stackoverflow.com/questions/8002252/euler-project-18-approach">StackOverflow question</a>)</p>

<p>We have example triangle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   3
</span><span class="line">  7 4
</span><span class="line"> 2 4 6
</span><span class="line">8 5 9 3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Instead of testing each route from top to the bottom, we moving from bottom
to the top and always select the best choice. As we want to find the max sum, we perform addition im place.</p>

<p>Assuming we on the 3rd line (2 4 6).</p>

<p><strong>From 2</strong> we can go either 8 or 5, 8 is better (maximize your sum), then you calculate first
sum <code>8 + 2 = 10</code>.</p>

<p><strong>From 4</strong> we can go either 5 or 9, 9 is better, <code>4 + 9 = 13</code>.</p>

<p><strong>From 6</strong> we can go either 9 or 3, 9 is better, <code>9 + 6 = 15</code>.</p>

<p>Now, we removing last row, because we processed all routes and selected best ones, and replacing
3rd row with calculated sums. Current triangle looks like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">    3
</span><span class="line">  7  4
</span><span class="line">10 13 15</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Repeat the same action until we get one number, which will be solution.</p>

<p>Let’s transform this idea to clojure.</p>

<p>First of all we need datastructure to represent triangle.
List of lists would be good:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">triangle</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">7</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="mi">2</span> <span class="mi">4</span> <span class="mi">6</span><span class="p">)</span> <span class="p">(</span><span class="mi">8</span> <span class="mi">5</span> <span class="mi">9</span> <span class="mi">3</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we want to know, what direction generates the best sum.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">max-row</span> <span class="p">[</span><span class="nv">lst</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">reduce max </span><span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nf">partition</span> <span class="mi">2</span> <span class="mi">1</span> <span class="nv">lst</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It breaks list to pairs, and select max from each pair.
For example, <code>[8 5 9 3]</code> we split to <code>[[8 5] [5 9] [9 3]]</code>
and select max from each sublist <code>[8 9 9]</code>.</p>

<p>Just add this list to previous one</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">step-max</span> <span class="p">[</span><span class="nv">lst1</span> <span class="nv">lst2</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">map + </span><span class="p">(</span><span class="nf">max-row</span> <span class="nv">lst1</span><span class="p">)</span> <span class="nv">lst2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One iteration of <code>step-max</code> creates smaller triangle with sums on the bottom row.
But we need only one number.</p>

<p>Correct, <code>reduce</code> is ideal!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce </span><span class="nv">step-max</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">triangle</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem018.clj">code</a></p>

<p><strong>P.S.</strong> Problem 067 can be solved with the same code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest 2]]></title>
    <link href="http://mishadoff.github.io/blog/programming-digest-2/"/>
    <updated>2013-04-22T14:43:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/programming-digest-2</id>
    <content type="html"><![CDATA[<p>Why math is needed for developers, what is REST, how to become experienced
developer…in 10 years, “coding it’s just writing” and some practice:
Naive Bayes Classifier, functional programming and Java 8.</p>

<!-- more -->

<h3 id="math-for-programmershttpsteve-yeggeblogspotcom200603math-for-programmershtml">1. <a href="http://steve-yegge.blogspot.com/2006/03/math-for-programmers.html">Math For Programmers</a></h3>

<p>Another great post by Steve Yegge about math. Math for developers.
As everyone might to retort, knowing math is not mandatory for software engineering field, but you know:</p>

<blockquote>
  <p>Math is… ummm, please don’t tell anyone I said this;
I’ll never get invited to another party as long as I live.
But math, well… I’d better whisper this, so listen up: (it’s actually kinda fun.)</p>
</blockquote>

<p>I totally agree. It’s a lot of fun.
Just read subreddit <a href="http://www.reddit.com/r/math/">math</a>, even if you don’t understand anything.</p>

<p>Pick your favourite math subject and try to dig more.
Statistics, Linear Algebra, Discrete Math, Combinatorics, Operation Research, Group Theory
and more; one of them can be a good start.</p>

<p>Does that really helps? Well, maybe. But it’s definitely improve your problem solving skill.</p>

<p>And believe. Math makes you a <em>better</em> programmer.</p>

<h3 id="how-i-explained-rest-to-my-wifehttptomaykocomwritingsrest-to-my-wife">2. <a href="http://tomayko.com/writings/rest-to-my-wife">How I Explained REST to My Wife</a></h3>

<p>Good article about how web works. I found it very useful for understanding
some parts I thought I understood. By the way, great examples.</p>

<blockquote>
  <p>Ryan: I can’t drive a cup and I can’t drink a car. But some verbs are almost universal like GET, PUT, and DELETE.</p>

  <p>Wife: You can’t DELETE a cup.</p>

  <p>Ryan: Well, okay, but you can throw it away.</p>
</blockquote>

<p>Unfortunately, author of this article take it down due to lot of complaints about
article gender-oriented nature. I don’t think it’s offensive and here is the link with
<a href="http://web.archive.org/web/20130116005443/http://tomayko.com/writings/rest-to-my-wife">copy from web archive</a></p>

<h3 id="programmer-competency-matrixhttpwwwindiangeeknetwp-contentuploadsprogrammer20competency20matrixhtm">3. <a href="http://www.indiangeek.net/wp-content/uploads/Programmer%20competency%20matrix.htm">Programmer Competency Matrix</a></h3>

<p>Do you think you are great programmer? Test yourself.</p>

<p><strong>Algorithms</strong></p>

<ul>
  <li><strong>2^n (Level 0)</strong>. Unable to find the average of numbers in an array
(It’s hard to believe but I’ve interviewed such candidates)</li>
  <li><strong>n^2 (Level 1)</strong>. Basic sorting, searching and data structure traversal and retrieval algorithms</li>
  <li><strong>n (Level 2)</strong>. Tree, Graph, simple greedy and divide and conquer algorithms, is able to understand
the relevance of the levels of this matrix.</li>
  <li><strong>log(n) (Level 3)</strong>. Able to recognize and code dynamic programming solutions, good knowledge of graph algorithms,
good knowledge of numerical computation algorithms, able to identify NP problems etc.</li>
</ul>

<p>In any case, this <em>test</em> helps you to build plan for programming
related skills and gives understanding what you need to know to become an expert.</p>

<h3 id="teach-yourself-programming-in-ten-yearshttpnorvigcom21-dayshtml">4. <a href="http://norvig.com/21-days.html">Teach Yourself Programming in Ten Years</a></h3>

<p>Article by Peter Norvig.
Great guy, I got to know from <a href="https://www.ai-class.com/">Artificial Intelligence</a> course.</p>

<p>His writing is critique of popular books, like “Learn Java in 21 Days”.
Peter explains that it is impossible to be a great
engineer in such short period, and to become an expert you need aproximately 10 years.</p>

<p>It reminds me a picture “How to become a C++ Developer in 21 Days”:</p>

<p><img src="http://i.imgur.com/3FckcgF.png" alt="" /></p>

<p>If you totally disagree with his idea, just test yourself in previous article.</p>

<h3 id="on-being-a-senior-engineerhttpwwwkitchensoapcom20121025on-being-a-senior-engineer">5. <a href="http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">On Being A Senior Engineer</a></h3>

<p>And logically continue. What behaviour differentiate senior engineer from “not senior” one?</p>

<blockquote>
  <p>Mature engineers seek out constructive criticism of their designs.</p>
</blockquote>

<p>Actually you could find more useful rules there and list of
<strong>The Ten Commandments of Egoless Programming</strong>.</p>

<blockquote>
  <ol>
    <li>Understand and accept that you will make mistakes.</li>
    <li>You are not your code.</li>
    <li>No matter how much “karate” you know, someone else will always know more.</li>
    <li>Don’t rewrite code without consultation.</li>
    <li>Treat people who know less than you with respect, deference, and patience.</li>
    <li>The only constant in the world is change. Be open to it and accept it with a smile.</li>
    <li>The only true authority stems from knowledge, not from position.</li>
    <li>Fight for what you believe, but gracefully accept defeat.</li>
    <li>Don’t be “the coder in the corner.”</li>
    <li>Critique code instead of people – be kind to the coder, not to the code.</li>
  </ol>
</blockquote>

<p>Note, that article touch some psychological aspect of person. So I don’t
think it can be 100% applied to everyone, but still worth to read.</p>

<h3 id="coding-its-just-writinghttpwwwcodinghorrorcomblog200811coding-its-just-writinghtml">6. <a href="http://www.codinghorror.com/blog/2008/11/coding-its-just-writing.html">Coding: It’s Just Writing</a></h3>

<p>Jeff Atwood explais basic the idea of:</p>

<blockquote>
  <p>The unexpected relationship between writing code and writing.</p>
</blockquote>

<p>To write good code, you must write good.</p>

<p>Article contains a reference to the book “The Elements of Style” with some quotes.</p>

<blockquote>
  <p>Vigorous writing is concise. A sentence should contain no unnecessary words,
a paragraph no unnecessary sentences, for the same reason that a drawing should
have no unnecessary lines and a machine no unnecessary parts.
This requires not that the writer make all his sentences short,
or that he avoid all detail and treat his subjects only in outline, but that every word tell.</p>
</blockquote>

<p>Read this book. Perhaps it is boring, it contains some advices to improve you writing skills.</p>

<h3 id="how-to-build-a-naive-bayes-classifierhttpswwwbionicspiritcomblog20120209howto-build-naive-bayes-classifierhtml">7. <a href="https://www.bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html">How To Build a Naive Bayes Classifier</a></h3>

<p>Now some practice.</p>

<p>Article is great explanation of how Naive Bayes Classifier work.
With pictures, code examples, common pitfalls and good sense of humour.</p>

<p>Although, it’s one of the simplest classification algorithms, but with some tweeks and
good train set it can give good results.</p>

<p><img src="https://www.bionicspirit.com/assets/img/conditional-prob-9a27ee0e.png" alt="" /></p>

<p>Here is the place where the math is needed. But article is so great,
that even monkey with banana (and degree in math) can understand how it works.</p>

<h3 id="functors-applicatives-and-monads-in-pictureshttpaditioposts2013-04-17-functorsapplicativesandmonadsinpictureshtml">8. <a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">Functors, Applicatives, And Monads In Pictures</a></h3>

<p>Number of articles that explain what is monad grow fast. Just another one.</p>

<p>Even if you don’t understand what Haskell and monad is, look at the cool pictures.</p>

<p><img src="http://adit.io/imgs/functors/fmap_just.png" alt="" /></p>

<h3 id="list-out-of-lambdahttpsteveloshcomblog201303list-out-of-lambda">9. <a href="http://stevelosh.com/blog/2013/03/list-out-of-lambda/">List Out Of Lambda</a></h3>

<p>Good introduction to functional programming. Not for beginners, I think.</p>

<blockquote>
  <p>This blog post is a thought exercise.
It’s not something you’d ever use for real code.
But just like a guitarist practices scales that she won’t ever play in a song,
we programmers should be exercising our brains every so often.</p>
</blockquote>

<p>How to implement fancy list, map, filter features with just
first-class functions. Basic operations on numbers included. JavaScript.</p>

<h3 id="everything-about-java-8httpwwwtechempowercomblog20130326everything-about-java-8">10. <a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">Everything about Java 8</a></h3>

<p>Let’s review again what will be in Java 8. Most wanted release ever.</p>

<p>In this overview you will test other important changes, not only lambdas.</p>

<p><em>Sad, that release postponed to early 2014 due to security issues.</em>
<em>But more time to play with developer preview features.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 017]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-017/"/>
    <updated>2013-04-09T21:13:00+03:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-017</id>
    <content type="html"><![CDATA[<blockquote>
  <p>If the numbers 1 to 5 are written out in words: one, two, three, four, five,
then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.</p>

  <p>If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=17">http://projecteuler.net/problem=17</a></p>

<!-- more -->

<p>To solve this problem we need some sort of mapping that defines association
between number and its string representation, e.g <code>123 = one hundred and twenty three</code>.</p>

<p>This can be done with maps in clojure in form <code>{:1 "one" :2 "two"}</code>.
But if pay more atention to this map, we see that key is a numeric value.
Exactly what plain arrays do.</p>

<p>Then we just define all mappings, obtain all arrays string elements, find their lengths and sum them.</p>

<p>One problem that providing mapping for each number between 1 and 1000 is a “bit” routine task, so we
need some formula to calculate representation instead of hardcoding it. We come to defining groups.</p>

<p>First group is just <em>first 20</em> numbers:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">first20</span> <span class="p">[</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="s">&quot;three&quot;</span> <span class="s">&quot;four&quot;</span> <span class="s">&quot;five&quot;</span>
</span><span class="line">              <span class="s">&quot;six&quot;</span> <span class="s">&quot;seven&quot;</span> <span class="s">&quot;eight&quot;</span> <span class="s">&quot;nine&quot;</span> <span class="s">&quot;ten&quot;</span>
</span><span class="line">              <span class="s">&quot;eleven&quot;</span> <span class="s">&quot;twelve&quot;</span> <span class="s">&quot;thirteen&quot;</span> <span class="s">&quot;fourteen&quot;</span> <span class="s">&quot;fifteen&quot;</span>
</span><span class="line">              <span class="s">&quot;sixteen&quot;</span> <span class="s">&quot;seventeen&quot;</span> <span class="s">&quot;eighteen&quot;</span> <span class="s">&quot;nineteen&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: there is no “zero” as we don’t use it in spoken language.</p>

<p>Second group is numbers that divides 10:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">decas</span> <span class="p">[</span><span class="s">&quot;&quot;</span> <span class="s">&quot;ten&quot;</span> <span class="s">&quot;twenty&quot;</span> <span class="s">&quot;thirty&quot;</span> <span class="s">&quot;forty&quot;</span> <span class="s">&quot;fifty&quot;</span> <span class="s">&quot;sixty&quot;</span> <span class="s">&quot;seventy&quot;</span> <span class="s">&quot;eighty&quot;</span> <span class="s">&quot;ninety&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: empty first element here is used to reduce additional check. Its length is 0, that has no effect at all.</p>

<p>And the last ones are three used values:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">h</span> <span class="s">&quot;hundred&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">t</span> <span class="s">&quot;thousand&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">a</span> <span class="s">&quot;and&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The basic function will calculate the length string representation of some number.
Let’s call it <code>word-length</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">word-length</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">count </span><span class="nv">t</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">first20</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line">        <span class="p">(</span><span class="nb">&lt; </span><span class="nv">n</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">q</span> <span class="p">(</span><span class="nb">quot </span><span class="nv">n</span> <span class="mi">10</span><span class="p">)</span> <span class="nv">m</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)</span>
</span><span class="line">              <span class="nv">d</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">decas</span> <span class="nv">q</span><span class="p">))]</span>
</span><span class="line">          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span> <span class="nv">d</span>
</span><span class="line">              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">q</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">first20</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nb">+ </span><span class="nv">m</span> <span class="p">(</span><span class="nb">* </span><span class="mi">10</span> <span class="nv">q</span><span class="p">)))))</span>
</span><span class="line">                  <span class="p">(</span><span class="nb">+ </span><span class="nv">d</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">nth </span><span class="nv">first20</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">m</span><span class="p">)))))))</span>
</span><span class="line">        <span class="p">(</span><span class="nb">&lt; </span><span class="nv">n</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">q</span> <span class="p">(</span><span class="nb">quot </span><span class="nv">n</span> <span class="mi">100</span><span class="p">)</span> <span class="nv">m</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="mi">100</span><span class="p">)]</span>
</span><span class="line">          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">word-length</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="nv">h</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">count </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="nv">h</span><span class="p">)</span> <span class="p">(</span><span class="nf">word-length</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nf">word-length</span> <span class="nv">m</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Little explanation:</p>

<ul>
  <li>If number is <code>1000</code> then the length of string “one” + “thousand”, 11.</li>
  <li>If number is lower than <code>100</code> then extract its decade part. If there is no
reminder for division by 10, the length is length of that decade part.</li>
  <li>Otherwise, if number in <code>first20</code>, length taken from array <code>first20</code>.</li>
  <li>Otherwise the length is decade part plus remainder.</li>
  <li>If number is lower than <code>1000</code> then extract hundred part. If there is no
reminder for division by 100, the length is “hundred” plus number of hundreds.</li>
  <li>Otherwise, the length is “hundred” plus number of hundreds, plus the word “and” and
recursively calculate the length of remainder, which is lower than <code>100</code>.</li>
</ul>

<p>Awful word-presentation of algorithm, because of… Reading code is much simpler, I know.</p>

<p>And the last part just sum up all word-lengths:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="nv">word-length</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1001</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check the code <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem017.clj">here</a>.</p>

<p>P.S. In fact algorithm is very simple, but needs some time to understand few branches.
By the way, the problem is little boring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Golf: Game of Life]]></title>
    <link href="http://mishadoff.github.io/blog/code-golf-game-of-life/"/>
    <updated>2013-03-07T17:59:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/code-golf-game-of-life</id>
    <content type="html"><![CDATA[<p>Conway’s Game of Life in a tweet.</p>

<!-- more -->

<p>Recently, my friend pointed out me an article <a href="http://trelford.com/blog/post/140.aspx">Life in a tweet</a>
where <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a> was implemented in one tweet
(<em>less than 140 characters</em>) in Ruby and F#. I took this challenge.</p>

<h3 id="tweet">Tweet</h3>

<p>Here is the final version in <code>137</code> characters of Clojure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">g</span> <span class="nv">r</span><span class="p">](</span><span class="nf">reduce</span><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">](</span><span class="nf">update-in</span> <span class="nv">i</span> <span class="nv">j</span><span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">v</span><span class="p">](</span><span class="nf">get</span><span class="p">[</span><span class="nv">v</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="p">(</span><span class="nf">-</span><span class="p">(</span><span class="nb">apply </span><span class="nv">+</span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-in</span> <span class="nv">g%</span> <span class="mi">0</span><span class="p">)(</span><span class="nf">for</span><span class="p">[</span><span class="nv">a</span><span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span><span class="nv">b</span><span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]]</span>
</span><span class="line"><span class="p">(</span><span class="nb">map + </span><span class="nv">j</span><span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]))))</span><span class="nv">v</span> <span class="mi">2</span><span class="p">)</span><span class="mi">0</span><span class="p">))))</span><span class="nv">g</span> <span class="nv">r</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="sugared-version">“Sugared” version</h3>

<p>Translate tweet to more readable code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">step-sugar</span> <span class="p">[</span><span class="nv">grid</span> <span class="nv">range</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">count-neighbours</span> <span class="c1">;; determine number of neighbours</span>
</span><span class="line">        <span class="p">(</span><span class="nf">fn</span><span class="p">[[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">]]</span>
</span><span class="line">          <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-in</span> <span class="nv">grid</span> <span class="nv">%</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">                         <span class="p">(</span><span class="nf">for</span><span class="p">[</span><span class="nv">a</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="nv">b</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]]</span>
</span><span class="line">                           <span class="p">[(</span><span class="nb">+ </span><span class="nv">i</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">j</span> <span class="nv">b</span><span class="p">)]))))</span>
</span><span class="line">        <span class="nv">new-value</span>  <span class="c1">;; calculate new value for cell</span>
</span><span class="line">        <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">v</span> <span class="p">[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">]]</span>
</span><span class="line">          <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">c</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">count-neighbours</span> <span class="p">[</span><span class="nv">i</span> <span class="nv">j</span><span class="p">])</span> <span class="nv">v</span><span class="p">)]</span>
</span><span class="line">            <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="mi">3</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">1</span>
</span><span class="line">                  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">v</span>
</span><span class="line">                  <span class="ss">:else</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class="line">        <span class="nv">evolve-cell</span> <span class="c1">;; update cell in a grid</span>
</span><span class="line">        <span class="p">(</span><span class="nf">fn</span><span class="p">[</span><span class="nv">g</span> <span class="nv">i</span><span class="p">]</span> <span class="p">(</span><span class="nf">update-in</span> <span class="nv">g</span> <span class="nv">i</span> <span class="o">#</span><span class="p">(</span><span class="nf">new-value</span> <span class="nv">%</span> <span class="nv">i</span><span class="p">)))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">reduce </span><span class="nv">evolve-cell</span> <span class="nv">grid</span> <span class="nv">range</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Actually, this version is cheating,
due to passing one extra-parameter <code>range</code> that contains all indices
need to be updated in form <code>[[0 1] [1 1]]...</code></p>

<p>On the other side it gives us two features:</p>

<ul>
  <li><strong>Works for rectangular grid</strong>. Although, initial
implementation assumes the world is square.</li>
  <li><strong>Specific part of world can be updated</strong>. It gives possibility
to update specific area in the world, for example <em>west organisms evolve faster</em>.</li>
</ul>

<p>To use this function you need:</p>

<ul>
  <li>World</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">grid</span> <span class="p">[[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">           <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">           <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Evolution</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">evolution</span> <span class="p">[</span><span class="nv">g</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">p</span> <span class="p">(</span><span class="nb">count </span><span class="nv">g</span><span class="p">)</span> <span class="nv">q</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">get </span><span class="nv">g</span> <span class="mi">0</span><span class="p">))</span>
</span><span class="line">        <span class="nb">range </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="nv">p</span><span class="p">)</span> <span class="nv">j</span> <span class="p">(</span><span class="nb">range </span><span class="nv">q</span><span class="p">)][</span><span class="nv">i</span> <span class="nv">j</span><span class="p">])]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">iterate </span><span class="o">#</span><span class="p">(</span><span class="nf">step-sugar</span> <span class="nv">%</span> <span class="nv">range</span><span class="p">)</span> <span class="nv">g</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Visualization</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">print-grid</span> <span class="p">[</span><span class="nv">g</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">s</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">apply str </span><span class="p">(</span><span class="nb">replace </span><span class="p">{</span><span class="mi">0</span> <span class="s">&quot;.&quot;</span> <span class="mi">1</span> <span class="s">&quot;⚫&quot;</span><span class="p">}</span> <span class="nv">%</span><span class="p">))</span> <span class="nv">g</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">println </span><span class="nv">s</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="testing">Testing</h3>

<p>To make sure results are correct use the following
<code>run</code> function and compare results to some common
<a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Examples_of_patterns">examples</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">run</span> <span class="p">[</span><span class="nv">grid</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">g</span> <span class="p">(</span><span class="nf">evolution</span> <span class="nv">grid</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">print-grid</span> <span class="nv">g</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="mi">1000</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pattern examples:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">block</span> <span class="p">[[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">glider</span> <span class="p">[[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span><span class="line">             <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Full history of implementation and more life patterns
<a href="https://github.com/mishadoff/prog-experiment/blob/master/clojure/life.clj">available here</a></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 016]]></title>
    <link href="http://mishadoff.github.io/blog/clojure-euler-problem-016/"/>
    <updated>2013-03-05T01:31:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/clojure-euler-problem-016</id>
    <content type="html"><![CDATA[<blockquote>
  <p>2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.</p>

  <p>What is the sum of the digits of the number 2^1000 ?</p>
</blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=16">http://projecteuler.net/problem=16</a></p>

<!-- more -->

<p>Are you kidding me?</p>

<ul>
  <li>Find 1000th <em>power of two</em></li>
  <li>Sum its digits</li>
</ul>

<p>In <a href="http://mishadoff.github.io/blog/clojure-euler-problem-008/">Clojure Euler: Problem 008</a> we
learned how to sum digits in the number. Just gentle reminder:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">sum-of-digits</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">int </span><span class="nv">%</span><span class="p">)</span> <span class="mi">48</span><span class="p">)</span> <span class="p">(</span><span class="nb">seq </span><span class="p">(</span><span class="nb">str </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, let’s create sequence of powers of two:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">powers-of-2</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="nb">partial * </span><span class="mi">2</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Unfortunately, this sequence throws <code>integer overflow</code> on the <code>64th</code> element.
We can fix that using <em>long arithmetics</em>, which known as <code>BigInteger</code> in Java.
Change <code>1</code> to <code>1N</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="nb">partial * </span><span class="mi">2</span><span class="p">)</span> <span class="mi">1</span><span class="nv">N</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Another way is to use <strong>automatic promotion</strong> operator (<code>+'</code>, <code>*'</code>).
If result of some operation is not suitable for some type,
instead of invalid computation and runtime exception, clojure automatically promotes
the type to suitable one (<em>for example</em> <code>Long.MAX_VALUE +' 1</code> <em>works fine and produces
 correct result with type of</em> <code>BigInteger</code>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">iterate </span><span class="p">(</span><span class="nb">partial </span><span class="nv">*</span><span class="o">&#39;</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Choose <code>powers-of-2</code> that you prefer and final result will look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">sum-of-digits</span> <span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nb">take </span><span class="mi">1001</span> <span class="p">(</span><span class="nf">powers-of-2</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem016.clj">github</a></p>

<p><strong>P.S.</strong> Automatic promotion is a beatiful thing. But be aware about losing in
speed of calculations. Also, no way back. If promotion happened, <em>depromotion</em> won’t.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Magic. Part 4: sun.misc.Unsafe]]></title>
    <link href="http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/"/>
    <updated>2013-02-26T02:37:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe</id>
    <content type="html"><![CDATA[<p>Java is a safe programming language and prevents programmer
from doing a lot of stupid mistakes, most of which based on memory management.
But, there is a way to do such <em>mistakes</em> intentionally, using <code>Unsafe</code> class.</p>

<p>This article is a quick overview of <code>sun.misc.Unsafe</code> <em>public</em> API and few
interesting cases of its usage.</p>

<!-- more -->

<h3 id="unsafe-instantiation">Unsafe instantiation</h3>

<p>Before usage, we need to create instance of <code>Unsafe</code> object.
There is no simple way to do it like <code>Unsafe unsafe = new Unsafe()</code>,
because <code>Unsafe</code> class has private constructor. It also has static
<code>getUnsafe()</code> method, but if you naively try to call <code>Unsafe.getUnsafe()</code> you, probably,
get <code>SecurityException</code>. Using this method available only from trusted code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="n">Unsafe</span> <span class="nf">getUnsafe</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Class</span> <span class="n">cc</span> <span class="o">=</span> <span class="n">sun</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Reflection</span><span class="o">.</span><span class="na">getCallerClass</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">cc</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SecurityException</span><span class="o">(</span><span class="s">&quot;Unsafe&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">theUnsafe</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is how java validates if code is trusted.
It is just checking that our code was loaded with
primary classloader.</p>

<p>We can make our code “trusted”. Use option <code>bootclasspath</code> when running
your program and specify
path to system classes plus your one that will use <code>Unsafe</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">java</span> <span class="o">-</span><span class="nl">Xbootclasspath:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">jdk1</span><span class="o">.</span><span class="mf">7.0</span><span class="o">/</span><span class="n">jre</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">rt</span><span class="o">.</span><span class="na">jar</span><span class="o">:.</span> <span class="n">com</span><span class="o">.</span><span class="na">mishadoff</span><span class="o">.</span><span class="na">magic</span><span class="o">.</span><span class="na">UnsafeClient</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But it’s too hard.</p>

<p><code>Unsafe</code> class contains its instance called <code>theUnsafe</code>, which marked as <code>private</code>.
We can steal that variable via java reflection.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Field</span> <span class="n">f</span> <span class="o">=</span> <span class="n">Unsafe</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;theUnsafe&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line"><span class="n">Unsafe</span> <span class="n">unsafe</span> <span class="o">=</span> <span class="o">(</span><span class="n">Unsafe</span><span class="o">)</span> <span class="n">f</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Note:</em> Ignore your IDE. For example, eclipse show error “Access restriction…”
but if you run code, all works just fine. If the error is annoying, ignore errors on
<code>Unsafe</code> usage in:</p>

<pre><code>Preferences -&gt; Java -&gt; Compiler -&gt; Errors/Warnings -&gt;
Deprecated and restricted API -&gt; Forbidden reference -&gt; Warning
</code></pre>

<h3 id="unsafe-api">Unsafe API</h3>

<p>Class <a href="http://www.docjar.com/docs/api/sun/misc/Unsafe.html">sun.misc.Unsafe</a>
consists of <code>105</code> methods. There are, actually,
few groups of important methods for manipulating with various entities.
Here is some of them:</p>

<ul>
  <li><strong>Info</strong>. Just returns some low-level memory information.
    <ul>
      <li><code>addressSize</code></li>
      <li><code>pageSize</code></li>
    </ul>
  </li>
  <li><strong>Objects</strong>. Provides methods for object and its fields manipulation.
    <ul>
      <li><code>allocateInstance</code></li>
      <li><code>objectFieldOffset</code></li>
    </ul>
  </li>
  <li><strong>Classes</strong>. Provides methods for classes and static fields manipulation.
    <ul>
      <li><code>staticFieldOffset</code></li>
      <li><code>defineClass</code></li>
      <li><code>defineAnonymousClass</code></li>
      <li><code>ensureClassInitialized</code></li>
    </ul>
  </li>
  <li><strong>Arrays</strong>. Arrays manipulation.
    <ul>
      <li><code>arrayBaseOffset</code></li>
      <li><code>arrayIndexScale</code></li>
    </ul>
  </li>
  <li><strong>Synchronization</strong>. Low level primitives for synchronization.
    <ul>
      <li><code>monitorEnter</code></li>
      <li><code>tryMonitorEnter</code></li>
      <li><code>monitorExit</code></li>
      <li><code>compareAndSwapInt</code></li>
      <li><code>putOrderedInt</code></li>
    </ul>
  </li>
  <li><strong>Memory</strong>. Direct memory access methods.
    <ul>
      <li><code>allocateMemory</code></li>
      <li><code>copyMemory</code></li>
      <li><code>freeMemory</code></li>
      <li><code>getAddress</code></li>
      <li><code>getInt</code></li>
      <li><code>putInt</code></li>
    </ul>
  </li>
</ul>

<h3 id="interesting-use-cases">Interesting use cases</h3>

<h4 id="avoid-initialization">Avoid initialization</h4>

<p><code>allocateInstance</code> method can be <em>useful</em> when you need to skip object initialization phase
or bypass security checks in constructor or you want instance of that class
but don’t have any public constructor. Consider following class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">a</span><span class="o">;</span> <span class="c1">// not initialized value</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">A</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// initialization</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">a</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">;</span> <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Instantiating it using constructor, reflection and unsafe gives
different results.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">A</span> <span class="n">o1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">A</span><span class="o">();</span> <span class="c1">// constructor</span>
</span><span class="line"><span class="n">o1</span><span class="o">.</span><span class="na">a</span><span class="o">();</span> <span class="c1">// prints 1</span>
</span><span class="line">
</span><span class="line"><span class="n">A</span> <span class="n">o2</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span> <span class="c1">// reflection</span>
</span><span class="line"><span class="n">o2</span><span class="o">.</span><span class="na">a</span><span class="o">();</span> <span class="c1">// prints 1</span>
</span><span class="line">
</span><span class="line"><span class="n">A</span> <span class="n">o3</span> <span class="o">=</span> <span class="o">(</span><span class="n">A</span><span class="o">)</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">allocateInstance</span><span class="o">(</span><span class="n">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// unsafe</span>
</span><span class="line"><span class="n">o3</span><span class="o">.</span><span class="na">a</span><span class="o">();</span> <span class="c1">// prints 0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Just think what happens to all your <a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singletons</a>.</p>

<h4 id="memory-corruption">Memory corruption</h4>

<p>This one is usual for every C programmer.
By the way, its common technique for security bypass.</p>

<p>Consider some simple class that check access rules:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">Guard</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">ACCESS_ALLOWED</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">giveAccess</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">42</span> <span class="o">==</span> <span class="n">ACCESS_ALLOWED</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The client code is <em>very secure</em> and calls
<code>giveAccess()</code> to check access rules. Unfortunately, for clients,
it always returns <code>false</code>. Only privileged users <em>somehow</em> can change
value of <code>ACCESS_ALLOWED</code> constant and get access.</p>

<p>In fact, it’s not true. Here is the code demostrates it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Guard</span> <span class="n">guard</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Guard</span><span class="o">();</span>
</span><span class="line"><span class="n">guard</span><span class="o">.</span><span class="na">giveAccess</span><span class="o">();</span>   <span class="c1">// false, no access</span>
</span><span class="line">
</span><span class="line"><span class="c1">// bypass</span>
</span><span class="line"><span class="n">Unsafe</span> <span class="n">unsafe</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">();</span>
</span><span class="line"><span class="n">Field</span> <span class="n">f</span> <span class="o">=</span> <span class="n">guard</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;ACCESS_ALLOWED&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">unsafe</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">guard</span><span class="o">,</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">objectFieldOffset</span><span class="o">(</span><span class="n">f</span><span class="o">),</span> <span class="mi">42</span><span class="o">);</span> <span class="c1">// memory corruption</span>
</span><span class="line">
</span><span class="line"><span class="n">guard</span><span class="o">.</span><span class="na">giveAccess</span><span class="o">();</span> <span class="c1">// true, access granted</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now all clients will get unlimited access.</p>

<p>Actually, the same functionality can be achieved by reflection.
But interesting, that we can modify any object, even ones
that we do not have references to.</p>

<p>For example, there is another <code>Guard</code> object in memory
located next to current <code>guard</code> object. We can modify its <code>ACCESS_ALLOWED</code> field with the following code</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">unsafe</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">guard</span><span class="o">,</span> <span class="mi">16</span> <span class="o">+</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">objectFieldOffset</span><span class="o">(</span><span class="n">f</span><span class="o">),</span> <span class="mi">42</span><span class="o">);</span> <span class="c1">// memory corruption</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note, we didn’t use any reference to this object.
<code>16</code> is size of <code>Guard</code> object in 32 bit architecture.
We can calculate it manually or use <code>sizeOf</code> method, that defined… right now.</p>

<h4 id="sizeof"><strong>sizeOf</strong></h4>

<p>Using <code>objectFieldOffset</code> method we can implement C-style <code>sizeof</code> function.
This implementation returns <em>shallow</em> size of object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">sizeOf</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Unsafe</span> <span class="n">u</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">();</span>
</span><span class="line">    <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Field</span><span class="o">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Field</span><span class="o">&gt;();</span>
</span><span class="line">    <span class="n">Class</span> <span class="n">c</span> <span class="o">=</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</span><span class="line">    <span class="k">while</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="n">Object</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">f</span> <span class="o">:</span> <span class="n">c</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">((</span><span class="n">f</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">Modifier</span><span class="o">.</span><span class="na">STATIC</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">fields</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">getSuperclass</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// get offset</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">maxSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">f</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="na">objectFieldOffset</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">&gt;</span> <span class="n">maxSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">maxSize</span> <span class="o">=</span> <span class="n">offset</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="o">((</span><span class="n">maxSize</span><span class="o">/</span><span class="mi">8</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="mi">8</span><span class="o">;</span>   <span class="c1">// padding</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Algorithm is the following: go through all <em>non-static</em> fields including all
superclases, get offset for each field, find maximum and add padding.
Probably, I missed something, but idea is clear.</p>

<p>Much simpler <code>sizeOf</code> can be achieved if we just read <code>size</code> value from
the class struct for this object, which located with offset 12 in <code>JVM 1.7 32 bit</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">sizeOf</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">){</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">getUnsafe</span><span class="o">().</span><span class="na">getAddress</span><span class="o">(</span>
</span><span class="line">        <span class="n">normalize</span><span class="o">(</span><span class="n">getUnsafe</span><span class="o">().</span><span class="na">getInt</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="mi">4L</span><span class="o">))</span> <span class="o">+</span> <span class="mi">12L</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>normalize</code> is a method for casting signed int to unsigned long, for
correct address usage.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">normalize</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span><span class="o">(</span><span class="n">value</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="o">(~</span><span class="mi">0L</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">32</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Awesome, this method returns the same result as our previous <code>sizeof</code>
function.</p>

<p>In fact, for good, safe and accurate <code>sizeof</code> function better to use
<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html">java.lang.instrument</a> package,
but it requires specifyng <code>agent</code> option in your JVM.</p>

<h4 id="shallow-copy"><strong>Shallow copy</strong></h4>

<p>Having implementation of calculating shallow object size, we can simply
add function that copy objects. Standard solution need modify your code with <code>Cloneable</code>,
or you can implement custom copy function in your object, but it won’t be multipurpose function.</p>

<p>Shallow copy:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="n">Object</span> <span class="nf">shallowCopy</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">size</span> <span class="o">=</span> <span class="n">sizeOf</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">toAddress</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">address</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">().</span><span class="na">allocateMemory</span><span class="o">(</span><span class="n">size</span><span class="o">);</span>
</span><span class="line">    <span class="n">getUnsafe</span><span class="o">().</span><span class="na">copyMemory</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">address</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">fromAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>toAddress</code> and <code>fromAddress</code> convert object to its address in memory and vice versa.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kt">long</span> <span class="nf">toAddress</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Object</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span><span class="n">obj</span><span class="o">};</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">baseOffset</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">().</span><span class="na">arrayBaseOffset</span><span class="o">(</span><span class="n">Object</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nf">normalize</span><span class="o">(</span><span class="n">getUnsafe</span><span class="o">().</span><span class="na">getInt</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">baseOffset</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">static</span> <span class="n">Object</span> <span class="nf">fromAddress</span><span class="o">(</span><span class="kt">long</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Object</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span><span class="kc">null</span><span class="o">};</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">baseOffset</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">().</span><span class="na">arrayBaseOffset</span><span class="o">(</span><span class="n">Object</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">getUnsafe</span><span class="o">().</span><span class="na">putLong</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">baseOffset</span><span class="o">,</span> <span class="n">address</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This copy function can be used to copy object of any type, its size will be calculated
dynamically. Note that after copying you need to cast object to specific type.</p>

<h4 id="hide-password">Hide Password</h4>

<p>One more interesting usage of direct memory access in <code>Unsafe</code> is removing
unwanted objects from memory.</p>

<p>Most of the APIs for retrieving user’s password, have signature
as <code>byte[]</code> or <code>char[]</code>. Why arrays?</p>

<p>It is completely for security reason, because we can nullify array elements after we don’t need them.
If we retrieve password as <code>String</code> it can be saved like an object in memory and nullifying that
string just perform dereference operation. This object still in memory by the time GC decide to perform cleanup.</p>

<p>This trick creates fake <code>String</code> object with the same size and replace original one in memory:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&quot;l00k@myHor$e&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">String</span> <span class="n">fake</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">,</span> <span class="s">&quot;?&quot;</span><span class="o">));</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">password</span><span class="o">);</span> <span class="c1">// l00k@myHor$e</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fake</span><span class="o">);</span> <span class="c1">// ????????????</span>
</span><span class="line">
</span><span class="line"><span class="n">getUnsafe</span><span class="o">().</span><span class="na">copyMemory</span><span class="o">(</span>
</span><span class="line">          <span class="n">fake</span><span class="o">,</span> <span class="mi">0L</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">toAddress</span><span class="o">(</span><span class="n">password</span><span class="o">),</span> <span class="n">sizeOf</span><span class="o">(</span><span class="n">password</span><span class="o">));</span>
</span><span class="line">
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">password</span><span class="o">);</span> <span class="c1">// ????????????</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fake</span><span class="o">);</span> <span class="c1">// ????????????</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Feel safe.</p>

<p><strong>UPDATE:</strong> That way is not really safe. For real safety we need to nullify
backed char array via reflection:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Field</span> <span class="n">stringValue</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">stringValue</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line"><span class="kt">char</span><span class="o">[]</span> <span class="n">mem</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">[])</span> <span class="n">stringValue</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
</span><span class="line"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mem</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">  <span class="n">mem</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;?&#39;</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Thanks to <em>Peter Verhas</em> for pointing out that.</p>

<h4 id="multiple-inheritance"><strong>Multiple Inheritance</strong></h4>

<p>There is no multiple inheritance in java.</p>

<p>Correct, except we can cast every type to every another one, if we want.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">long</span> <span class="n">intClassAddress</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">getUnsafe</span><span class="o">().</span><span class="na">getInt</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="mi">4L</span><span class="o">));</span>
</span><span class="line"><span class="kt">long</span> <span class="n">strClassAddress</span> <span class="o">=</span> <span class="n">normalize</span><span class="o">(</span><span class="n">getUnsafe</span><span class="o">().</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="mi">4L</span><span class="o">));</span>
</span><span class="line"><span class="n">getUnsafe</span><span class="o">().</span><span class="na">putAddress</span><span class="o">(</span><span class="n">intClassAddress</span> <span class="o">+</span> <span class="mi">36</span><span class="o">,</span> <span class="n">strClassAddress</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This snippet adds <code>String</code> class to <code>Integer</code> superclasses, so we can cast
without runtime exception.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="o">(</span><span class="n">Object</span><span class="o">)</span> <span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">666</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One problem that we must do it with pre-casting to object. To cheat compiler.</p>

<h4 id="dynamic-classes">Dynamic classes</h4>

<p>We can create classes in runtime, for example from
compiled <code>.class</code> file. To perform that read class contents
to byte array and pass it properly to <code>defineClass</code> method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">byte</span><span class="o">[]</span> <span class="n">classContents</span> <span class="o">=</span> <span class="n">getClassContent</span><span class="o">();</span>
</span><span class="line"><span class="n">Class</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">().</span><span class="na">defineClass</span><span class="o">(</span>
</span><span class="line">              <span class="kc">null</span><span class="o">,</span> <span class="n">classContents</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">classContents</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class="line">    <span class="n">c</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">).</span><span class="na">invoke</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(),</span> <span class="kc">null</span><span class="o">);</span> <span class="c1">// 1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And reading from file defined as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getClassContent</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/home/mishadoff/tmp/A.class&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">FileInputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
</span><span class="line">    <span class="kt">byte</span><span class="o">[]</span> <span class="n">content</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[(</span><span class="kt">int</span><span class="o">)</span><span class="n">f</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span><span class="line">    <span class="n">input</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class="line">    <span class="n">input</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">    <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This can be useful, when you must create classes dynamically, some proxies
or aspects for existing code.</p>

<h4 id="throw-an-exception">Throw an Exception</h4>

<p>Don’t like checked exceptions? Not a problem.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">getUnsafe</span><span class="o">().</span><span class="na">throwException</span><span class="o">(</span><span class="k">new</span> <span class="n">IOException</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This method throws checked exception, but your code not forced to catch or rethrow it.
Just like runtime exception.</p>

<h4 id="fast-serialization">Fast Serialization</h4>

<p>This one is more practical.</p>

<p>Everyone knows that standard java <code>Serializable</code> capability
to perform serialization is very slow. It also require class
to have public non-argument constructor.</p>

<p><code>Externalizable</code> is better, but it needs to define schema for
class to be serialized.</p>

<p>Popular high-performance libraries, like <a href="http://code.google.com/p/kryo/">kryo</a>
have dependencies, which can be unacceptable with low-memory requirements.</p>

<p>But full serialization cycle can be easily achieved with unsafe class.</p>

<p>Serialization:</p>

<ul>
  <li>Build schema for object using reflection. It can be done once for class.</li>
  <li>Use <code>Unsafe</code> methods <code>getLong</code>, <code>getInt</code>, <code>getObject</code>, etc. to retrieve actual field values.</li>
  <li>Add <code>class</code> identifier to have capability restore this object.</li>
  <li>Write them to the file or any output.</li>
</ul>

<p>You can also add compression to save space.</p>

<p>Deserialization:</p>

<ul>
  <li>Create instance of serialized class. <code>allocateInstance</code> helps, because does not require any constructor.</li>
  <li>Build schema. The same as 1 step in serialization.</li>
  <li>Read all fields from file or any input.</li>
  <li>Use <code>Unsafe</code> methods <code>putLong</code>, <code>putInt</code>, <code>putObject</code>, etc. to fill the object.</li>
</ul>

<p>Actually, there are much more details in correct inplementation, but intuition is clear.</p>

<p>This serialization will be really fast.</p>

<p>By the way, there are some attempts in <code>kryo</code> to use <code>Unsafe</code> <a href="http://code.google.com/p/kryo/issues/detail?id=75">http://code.google.com/p/kryo/issues/detail?id=75</a></p>

<h4 id="big-arrays"><strong>Big Arrays</strong></h4>

<p>As you know <code>Integer.MAX_VALUE</code> constant is a max size of java array.
Using direct memory allocation we can create arrays with size limited by only heap size.</p>

<p>Here is <code>SuperArray</code> implementation:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">SuperArray</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">BYTE</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">size</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">address</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">SuperArray</span><span class="o">(</span><span class="kt">long</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class="line">        <span class="n">address</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">().</span><span class="na">allocateMemory</span><span class="o">(</span><span class="n">size</span> <span class="o">*</span> <span class="n">BYTE</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">long</span> <span class="n">i</span><span class="o">,</span> <span class="kt">byte</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">getUnsafe</span><span class="o">().</span><span class="na">putByte</span><span class="o">(</span><span class="n">address</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">BYTE</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">(</span><span class="kt">long</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">getUnsafe</span><span class="o">().</span><span class="na">getByte</span><span class="o">(</span><span class="n">address</span> <span class="o">+</span> <span class="n">idx</span> <span class="o">*</span> <span class="n">BYTE</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And sample usage:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">long</span> <span class="n">SUPER_SIZE</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line"><span class="n">SuperArray</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SuperArray</span><span class="o">(</span><span class="n">SUPER_SIZE</span><span class="o">);</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Array size:&quot;</span> <span class="o">+</span> <span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">());</span> <span class="c1">// 4294967294</span>
</span><span class="line"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">array</span><span class="o">.</span><span class="na">set</span><span class="o">((</span><span class="kt">long</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span><span class="mi">3</span><span class="o">);</span>
</span><span class="line">    <span class="n">sum</span> <span class="o">+=</span> <span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">((</span><span class="kt">long</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Sum of 100 elements:&quot;</span> <span class="o">+</span> <span class="n">sum</span><span class="o">);</span>  <span class="c1">// 300</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In fact, this technique uses <code>off-heap memory</code> and partially
available in <code>java.nio</code> package.</p>

<p>Memory allocated this way not located in the heap and not under GC management, so take care of it
using <code>Unsafe.freeMemory()</code>. It also does not perform any boundary checks, so any
illegal access may cause JVM crash.</p>

<p>It can be useful for math computations, where code can operate with large arrays of data.
Also, it can be interesting for realtime programmers, where GC delays on large arrays can
break the limits.</p>

<h4 id="concurrency">Concurrency</h4>

<p>And few words about concurrency with <code>Unsafe</code>.
<code>compareAndSwap</code> methods are atomic and can be used to implement
high-performance lock-free data structures.</p>

<p>For example, consider the problem to increment value in the shared object
using lot of threads.</p>

<p>First we define simple interface <code>Counter</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">interface</span> <span class="nc">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">increment</span><span class="o">();</span>
</span><span class="line">    <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then we define worker thread <code>CounterClient</code>, that uses <code>Counter</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">CounterClient</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">Counter</span> <span class="n">c</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">num</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">CounterClient</span><span class="o">(</span><span class="n">Counter</span> <span class="n">c</span><span class="o">,</span> <span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">num</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">c</span><span class="o">.</span><span class="na">increment</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And this is testing code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">int</span> <span class="n">NUM_OF_THREADS</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">NUM_OF_INCREMENTS</span> <span class="o">=</span> <span class="mi">100000</span><span class="o">;</span>
</span><span class="line"><span class="n">ExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">NUM_OF_THREADS</span><span class="o">);</span>
</span><span class="line"><span class="n">Counter</span> <span class="n">counter</span> <span class="o">=</span> <span class="o">...</span> <span class="c1">// creating instance of specific counter</span>
</span><span class="line"><span class="kt">long</span> <span class="n">before</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class="line"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM_OF_THREADS</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">service</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">CounterClient</span><span class="o">(</span><span class="n">counter</span><span class="o">,</span> <span class="n">NUM_OF_INCREMENTS</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="n">service</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class="line"><span class="n">service</span><span class="o">.</span><span class="na">awaitTermination</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">);</span>
</span><span class="line"><span class="kt">long</span> <span class="n">after</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Counter result: &quot;</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="na">getCounter</span><span class="o">());</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Time passed in ms:&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">after</span> <span class="o">-</span> <span class="n">before</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First implementation is not-synchronized counter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">StupidCounter</span> <span class="kd">implements</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">counter</span><span class="o">++;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="nl">result:</span> <span class="mi">99542945</span>
</span><span class="line"><span class="n">Time</span> <span class="n">passed</span> <span class="n">in</span> <span class="nl">ms:</span> <span class="mi">679</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Working fast, but no threads management at all, so result is inaccurate.
Second attempt, add easiest java-way synchronization:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">SyncCounter</span> <span class="kd">implements</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">counter</span><span class="o">++;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="nl">result:</span> <span class="mi">100000000</span>
</span><span class="line"><span class="n">Time</span> <span class="n">passed</span> <span class="n">in</span> <span class="nl">ms:</span> <span class="mi">10136</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Radical synchronization always work. But timings is awful.
Let’s try <code>ReentrantReadWriteLock</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">LockCounter</span> <span class="kd">implements</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">WriteLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantReadWriteLock</span><span class="o">().</span><span class="na">writeLock</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class="line">        <span class="n">counter</span><span class="o">++;</span>
</span><span class="line">        <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="nl">result:</span> <span class="mi">100000000</span>
</span><span class="line"><span class="n">Time</span> <span class="n">passed</span> <span class="n">in</span> <span class="nl">ms:</span> <span class="mi">8065</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Still correct, and timings are better. What about atomics?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">AtomicCounter</span> <span class="kd">implements</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="n">AtomicLong</span> <span class="n">counter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicLong</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">counter</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">counter</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="nl">result:</span> <span class="mi">100000000</span>
</span><span class="line"><span class="n">Time</span> <span class="n">passed</span> <span class="n">in</span> <span class="nl">ms:</span> <span class="mi">6552</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>AtomicCounter</code> is even better. Finally, try <code>Unsafe</code>
primitive <code>compareAndSwapLong</code> to see if it is really privilegy to use it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">CASCounter</span> <span class="kd">implements</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">long</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">Unsafe</span> <span class="n">unsafe</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">offset</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">CASCounter</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="n">unsafe</span> <span class="o">=</span> <span class="n">getUnsafe</span><span class="o">();</span>
</span><span class="line">        <span class="n">offset</span> <span class="o">=</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">objectFieldOffset</span><span class="o">(</span><span class="n">CASCounter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;counter&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">before</span> <span class="o">=</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(!</span><span class="n">unsafe</span><span class="o">.</span><span class="na">compareAndSwapLong</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">offset</span><span class="o">,</span> <span class="n">before</span><span class="o">,</span> <span class="n">before</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">before</span> <span class="o">=</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getCounter</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">counter</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Counter</span> <span class="nl">result:</span> <span class="mi">100000000</span>
</span><span class="line"><span class="n">Time</span> <span class="n">passed</span> <span class="n">in</span> <span class="nl">ms:</span> <span class="mi">6454</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hmm, seems equal to atomics. Maybe atomics use <code>Unsafe</code>? (<em>YES</em>)</p>

<p>In fact this example is easy enough, but it shows some power of <code>Unsafe</code>.</p>

<p>As I said, <code>CAS</code> primitive can be used to implement lock-free data structures.
The intuition behind this is simple:</p>

<ul>
  <li>Have some state</li>
  <li>Create a copy of it</li>
  <li>Modify it</li>
  <li>Perform <code>CAS</code></li>
  <li>Repeat if it fails</li>
</ul>

<p>Actually, in real it is more hard than you can imagine. There are a lot of problems like
<a href="http://en.wikipedia.org/wiki/ABA_problem">ABA Problem</a>, instructions reordering, etc.</p>

<p>If you really interested, you can refer to the awesome presentation about <a href="http://www.azulsystems.com/about_us/presentations/lock-free-hash">lock-free HashMap</a></p>

<p><strong>UPDATE:</strong> Added <code>volatile</code> keyword to <code>counter</code> variable to avoid risk of infinite loop.</p>

<p>Kudos to <em>Nitsan Wakart</em></p>

<h3 id="bonus">Bonus</h3>

<p>Documentation for <code>park</code> method from <code>Unsafe</code> class contains
longest English sentence I’ve ever seen:</p>

<blockquote>
  <p>Block current thread, returning when a balancing
unpark occurs, or a balancing unpark has
already occurred, or the thread is interrupted, or, if not
absolute and time is not zero, the given time nanoseconds have
elapsed, or if absolute, the given deadline in milliseconds
since Epoch has passed, or spuriously (i.e., returning for no
“reason”). Note: This operation is in the Unsafe class only
because unpark is, so it would be strange to place it
elsewhere.</p>
</blockquote>

<h3 id="conclusion">Conclusion</h3>

<p>Although, <code>Unsafe</code> has a bunch of useful applications, never use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elephant-Oriented Programming]]></title>
    <link href="http://mishadoff.github.io/blog/elephant-oriented-programming/"/>
    <updated>2013-02-26T00:58:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/elephant-oriented-programming</id>
    <content type="html"><![CDATA[<p>Have you heard about Elephant-Oriented Programming?</p>

<!-- more -->

<h4 id="read-very-clever-bookhttplearnyouahaskellcom-with-an-elephant-on-cover">1. Read <a href="http://learnyouahaskell.com/">very clever book</a> with an <em>elephant</em> on cover.</h4>

<p><img src="http://i.imgur.com/ndEJc05.png" height="300px" width="240px" /></p>

<h4 id="i-bet-you-didnt-understand-anything-so-choose-easy-programming-languagehttpphpnet-with-an-elephant">2. I bet you didn’t understand anything, so choose <a href="http://php.net/">easy programming language</a> with an <em>elephant</em>.</h4>

<p><img src="http://i.imgur.com/NzWiT2N.jpg" alt="" /></p>

<h4 id="what-is-ide-we-already-have-elephant-text-editorhttpsevernotecom">3. What is IDE? We already have <em>elephant</em> <a href="https://evernote.com/">text editor</a>.</h4>

<p><img src="http://i.imgur.com/7JcFlTu.jpg" alt="" /></p>

<h4 id="for-real-life-programming-tasks-we-need-storage-postgresqlhttpwwwpostgresqlorg-database-is-good-because-of-elephant">4. For real life programming tasks we need storage. <a href="http://www.postgresql.org/">PostgreSQL</a> database is good. Because of <em>elephant</em>.</h4>

<p><img src="http://i.imgur.com/A4FWqXy.png" alt="" /></p>

<h4 id="and-finally-fancy-word-big-datahttphadoopapacheorg-did-you-say-big-elephants-are-big">5. And finally, fancy word <a href="http://hadoop.apache.org/">Big Data</a>. Did you say “big”? <em>Elephants</em> are big.</h4>

<p><img src="http://hadoop.apache.org/images/hadoop-logo.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stirling's Approximation]]></title>
    <link href="http://mishadoff.github.io/blog/stirlings-approximation/"/>
    <updated>2013-02-23T01:38:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/stirlings-approximation</id>
    <content type="html"><![CDATA[<p>Do you like factorials?</p>

<p>Probably, you do. If no, whatever, read this post to know
how get rid of factorials.</p>

<!-- more -->

<h3 id="tldr">TL;DR</h3>

<script type="math/tex; mode=display">
ln(n!) = n \cdot ln(n) - n + 1
</script>

<p>It is <a href="http://en.wikipedia.org/wiki/Stirling%27s_approximation">Stirling’s approximation</a>
or just Stirling’s formula.
It allows to replace factorials with their approximation.
If you not interested in math, skip to <a href="#usage">formula usage</a></p>

<h3 id="proof">Proof</h3>

<p>Replace factorial with its definition:</p>

<script type="math/tex; mode=display">
ln(n!) = ln(1 \cdot 2 \cdot 3 ...)
</script>

<p>Transform logarithm of multiplication to sum of logarithms:</p>

<script type="math/tex; mode=display">
ln(1 \cdot 2 \cdot 3 ...) = ln(1) + ln(2) + ln(3) + ... + ln(n)
</script>

<p>Take a look at the integral $\int_a^b f(x) dx$.
Replace $f(x)$ with $ln(x)$, $a$ with $1$, and $b$ with $n$. Then use numerical
integration with step <code>1</code> and <a href="http://en.wikipedia.org/wiki/Rectangle_method">right rectangle rule</a></p>

<script type="math/tex; mode=display">
\int_1^n ln(x) dx \approx ln(2) + ln(3) + ... + ln(n)
</script>

<p>Right-hand parts of two previous formulas are equal, with respect $ln(1)=0$. Then:</p>

<script type="math/tex; mode=display">
ln(1 \cdot 2 \cdot 3 ...) \approx \int_1^n ln(x) dx
</script>

<p>Calculate integral using <a href="http://en.wikipedia.org/wiki/Integration_by_parts">integration by parts</a>:</p>

<script type="math/tex; mode=display">
\int ln(x) dx = x \cdot ln(x) - \int x d(ln(x)) = x \cdot ln(x) - \int dt = x \cdot ln(x) - x + C
</script>

<p>Applying boundaries <code>[1..n]</code></p>

<script type="math/tex; mode=display">
n \cdot ln(n) - n + C - 1 \cdot ln(1) + 1 - C = n \cdot ln(n) - n + 1
</script>

<p>yields final result:</p>

<script type="math/tex; mode=display">
ln(n!) = n \cdot ln(n) - n + 1
</script>

<p>Exactly what on the top.</p>

<h3 id="developer-proof">Developer Proof</h3>

<p>It is much simpler proof, with lose of accuracy, but still valid for partial applications.</p>

<p>Replace factorial with its definition:</p>

<script type="math/tex; mode=display">
ln(n!) = ln(1 \cdot 2 \cdot 3 ...)
</script>

<p>Transform logarithm of multiplication to sum of logarithms:</p>

<script type="math/tex; mode=display">
ln(1 \cdot 2 \cdot 3 ...) = ln(1) + ln(2) + ln(3) + ... = \sum_{i=1}^n ln(i)
</script>

<p>From monotonic property of logarithms $a \leq b \rightarrow ln(a) \leq ln(b)$
take upper bound for each $ln(i)$:</p>

<script type="math/tex; mode=display">
\forall i \; ln(i) \leq ln(n)
</script>

<p>Then, using worst case substitution, sum can be rewritten as:</p>

<script type="math/tex; mode=display">
\sum_{i=1}^n ln(i) \leq \sum_{i=1}^N ln(n)
</script>

<p>But $ln(n)$ does not depend on <code>i</code>, so get rid of sum:</p>

<script type="math/tex; mode=display">
\sum_{i=1}^n ln(n) = n \cdot ln(n)
</script>

<p>Done.</p>

<h3 id="a-idusageausage"><a id="usage"></a>Usage</h3>

<ul>
  <li><strong>Algorithm complexity</strong></li>
</ul>

<p>No one cares about <code>O(log(n!))</code> of your algorithm, but everybody
knows that <code>O(n log n)</code>, <a href="http://en.wikipedia.org/wiki/Time_complexity#Linearithmic.2Fquasilinear_time">linearithmic complexity</a>,
is very good property of algorithm. By the way, do not scare people with factorial sign.</p>

<ul>
  <li><strong>Overflow prevention</strong></li>
</ul>

<p>If you try to calculate <code>ln(n!)</code> with most straightforward implementation
without suitable datatype, you’ll likely get the number overflow exception, in spite
of result value is not very large. For example for <code>n=100</code> overall result is
approximately <code>363</code> (<em>Stirling’s approximation gives 361</em>) where factorial value is $10^{154}$.</p>

<ul>
  <li><strong>Speedup</strong></li>
</ul>

<p>As far as I know, calculating factorial is <code>O(n)</code> complexity algorithm,
because we need <code>n</code> multiplications. Using Stirling’s approximation we need to calculate $n^n$ term, that can
be calculated in <code>O(log n)</code> with <a href="http://en.wikipedia.org/wiki/Exponentiation_by_squaring">clever trick</a></p>

<ul>
  <li><strong>Gamma function</strong></li>
</ul>

<p>It can be surprising, but factorials defined not only for positive integers.
So, for example <code>2.5!</code> is completely valid expression. <code>-6!</code> also. They can be calculated
using <a href="http://en.wikipedia.org/wiki/Gamma_function">Gamma-functions</a> for real numbers. Unfortunately, they are
pretty complicated, so people use Stirling’s formula instead.</p>

<ul>
  <li><strong>Partial applications</strong></li>
</ul>

<p>Almost everything that using factorials can use Stirling’s approximation. Permutations,
binomial coefficients, fractals, number theory and a huge amount of topics I’m not aware of.</p>

<p><strong>P.S.</strong> Stirling’s formula presented here is rough enough. More accurate formula is
$n! = \sqrt{2\pi} n^{n + 0.5}e^{-n}$.
Check its proof <a href="http://www.sosmath.com/calculus/sequence/stirling/stirling.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heisenberg Principle]]></title>
    <link href="http://mishadoff.github.io/blog/heisenberg-principle/"/>
    <updated>2013-02-21T00:24:00+02:00</updated>
    <id>http://mishadoff.github.io/blog/heisenberg-principle</id>
    <content type="html"><![CDATA[<p>It is so obvious, so I decided to write about it.</p>

<!-- more -->

<p><img src="http://i.imgur.com/pxxRKNR.jpg" alt="" /></p>

<p><a href="http://en.wikipedia.org/wiki/Uncertainty_principle">Heisenberg principle</a>
came from quantum mechanics and means that you can’t know exactly
both coordinates and speed of particle. If you improve accuracy of detecting
position, you lose accuracy in detecting speed and vice versa. <em>Uncertain</em> stuff.</p>

<p>In human-readable form it sounds like</p>

<blockquote>
  <p>Either one or the other</p>
</blockquote>

<p>The same in every field, even in software engineering.
If you implementing something or fixing bugs and your boss
yelling: “you must work <a href="http://www.youtube.com/watch?v=gAjR4_CbPpQ">better and faster</a>”
tell him <em>either one or the other</em>.</p>

<p><strong>P.S.</strong> Actually, you can say “go fuck yourself”, but it won’t be polite.</p>
]]></content>
  </entry>
  
</feed>
