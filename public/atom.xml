<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mishadoff thoughts]]></title>
  <link href="http://mishadoff.github.com/atom.xml" rel="self"/>
  <link href="http://mishadoff.github.com/"/>
  <updated>2013-02-12T00:37:18+02:00</updated>
  <id>http://mishadoff.github.com/</id>
  <author>
    <name><![CDATA[mishadoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming Digest 1]]></title>
    <link href="http://mishadoff.github.com/blog/programming-digest-1/"/>
    <updated>2013-02-12T02:00:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/programming-digest-1</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>1. <a href="http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html">Get that job at Google</a></h3>

<blockquote><p>&#8230;it&#8217;s highly likely that someone on the loop will be unimpressed with you,
even if you are Alan Turing. Especially if you&#8217;re Alan Turing,
in fact, since it means you obviously don&#8217;t know C++</p></blockquote>

<p>The quote accurately explains what this post about. The author gives great mental and
technical tips about interviewing process (not only in Google).
Big portion of motivation guaranteed, perhaps you man feel dumber after reading.</p>

<p>In few words, you must know: algorithm complexity, sorting, hashtables, trees,
graphs, other data structures, math, operating systems and at least one programming language very well.
Not bad, right? After reading that article I&#8217;ve build long-term learning plan for myself, which is still
not succesful. Great article.</p>

<h3>2. <a href="http://discrete.gr/complexity/">A Gentle Introduction to Algorithm Complexity Analysis</a></h3>

<p>This article helps you partially cover first thing from previous article: <em>algorithm complexity</em>.
By the way it is written with understandable <em>for programmers</em> language, examples, pictures, excerpts - I like
such style.</p>

<p>After reading, you&#8217;ll understand what time/space complexity is, difference between <em>Theta</em> and <em>Big-O</em> notations,
recursive functions complexity and lot more. By the way you will learn basic types of time complexities, and get
skill to differentiate complexities by yourselves. Note the articles consists of some excercises, which immediately followed
with solutions. But it is more productive to solve this exercises and then compare to solutions.</p>

<h3>2. <a href="http://clojurefun.wordpress.com/2013/01/21/on-structural-immutability/">On Structural Immutability</a></h3>

<h3>4. <a href="http://gamedev.tutsplus.com/articles/roundups/fantastic-gamedev-tutorials-from-across-the-web/">40+ Fantastic Game Development Tutorials From Across the Web</a></h3>

<h3>5. <a href="http://stackoverflow.com/questions/234075/what-is-your-best-programmer-joke/1284458">What is your best programming joke</a></h3>

<p>Tags:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Digest Announcement]]></title>
    <link href="http://mishadoff.github.com/blog/programming-digest-announcement/"/>
    <updated>2013-02-11T23:00:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/programming-digest-announcement</id>
    <content type="html"><![CDATA[<p>Recently, I come up with idea to share my favorite articles I found
on the internet and give basic description for them.</p>

<!-- more -->


<p>I do not plan this <em>digest</em> as periodical thing,
so the first pattern I found appropriate is to publish this as soon
as I have ten articles marked as <em>favorite</em> somewhere.</p>

<p>That&#8217;s the rule: <strong>each post - 10 articles</strong>.</p>

<p><em>Favorite</em> means <em>really favorite</em>, so I do not crosspost every article I&#8217;ve read.</p>

<p>Hard to say what topics will be covered.
I call it <em>programming digest</em> because most of articles will be somehow
related to programming, but do not blame me if you see articles with another
topic (math or humour), believe me they can be interesting also.</p>

<p>By the way, a lot of articles may be old, even very old (<em>don&#8217;t call me Necromancer</em>)
but if they appear here, I found them somehow relevant and important to post.</p>

<p>Hope, you&#8217;ll find such sort of digest is interesting for reading and I like if you
share your favorite <em>programming-related</em> articles with me.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 014]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-014/"/>
    <updated>2013-02-01T17:43:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-014</id>
    <content type="html"><![CDATA[<p>Clojure is fun</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Analysis: Facebook Hacker Cup 2013]]></title>
    <link href="http://mishadoff.github.com/blog/data-analysis-facebook-hacker-cup/"/>
    <updated>2013-02-01T12:42:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/data-analysis-facebook-hacker-cup</id>
    <content type="html"><![CDATA[<p>What programming language is most used?</p>

<!-- more -->


<p>To answer this question we use results from the qualification round
of <a href="https://www.facebook.com/hackercup">Facebook Hacker Cup 2013</a></p>

<p>If you only interested in statistics, <a href="#stats">skip!</a></p>

<h3>0. Intro</h3>

<p>As you may know, Facebook Hacker Cup is a programming contest. You have programming
problem and you need to solve it, in most cases in efficient way. You get input file
and you need to submit the output file in less than 6 minutes. Pretty simple.
The interesting part you need to submit your source code, that can be reviewed by
any of contestants after round.</p>

<p>These sources we use to get programming language statistics.</p>

<h3>1. Data</h3>

<p>Primary resource in statistics is data.</p>

<p>We have <a href="https://www.facebook.com/hackercup/scoreboard?round=185564241586420">scoreboard</a> page
(<em>You must be logged to FB to see results</em>) and interested in all links named <em>source</em>.
Open every link manually takes much time, so we will use automated approach
and will write program. Yes, in clojure.</p>

<h4>Dependencies</h4>

<p>For facebook authentification we can use:</p>

<ul>
<li><a href="https://github.com/DerGuteMoritz/clj-oauth2">OAuth authentification</a></li>
<li><a href="https://developers.facebook.com/">Facebook app</a></li>
<li><a href="http://seleniumhq.org/">Selenium</a></li>
</ul>


<p>I didn&#8217;t think too much about alternatives,
because I wanted to try selenium in clojure. It&#8217;s a time!</p>

<p>In few words, selenium provides capability to perform programmatically
browser events. Often used in automation. To use selenium in clojure program
just add <code>[clj-webdriver "0.6.0-beta2"]</code> to your project dependencies.</p>

<p>To simplify HTTP GET access we use library <code>[clj-http "0.6.3"]</code> and for
additional help <code>[org.clojure/clojure-contrib "1.2.0"]</code>.</p>

<p>In code we use following <em>requires</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-http.client</span> <span class="ss">:as</span> <span class="nv">http</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-webdriver.taxi</span> <span class="ss">:as</span> <span class="nv">web</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-webdriver.core</span> <span class="ss">:as</span> <span class="nv">c</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.contrib.math</span> <span class="ss">:as</span> <span class="nv">math</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Automation</h4>

<p>Before we will automate actions to gather sources we need to decide
what these actions are?</p>

<ul>
<li>Run browser</li>
<li>Open facebook url</li>
<li>Login to facebook

<ul>
<li>Enter login</li>
<li>Enter password</li>
<li>Press submit</li>
</ul>
</li>
<li>Go to scoreboard page</li>
<li>Process each page <code>loop [1..n]</code>

<ul>
<li>Go to page <code>n</code></li>
<li>Get all links</li>
<li>Filter links with sources</li>
<li>Process each link <code>loop [1..k]</code>

<ul>
<li>Go to link url <code>k</code></li>
<li>Get all page source</li>
<li>Filter out source code</li>
<li>Generate file name</li>
<li>Write source to file</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Pretty clear, right? Let&#8217;s code it sequentially.</p>

<h4>Implementation</h4>

<ul>
<li><em>Run browser</em> and <em>Open facebook url</em></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">web/set-driver!</span> <span class="p">{</span><span class="ss">:browser</span> <span class="ss">:firefox</span><span class="p">}</span> <span class="s">&quot;http://facebook.com&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>Login to facebook</em></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">web/input-text</span> <span class="s">&quot;#email&quot;</span> <span class="nv">username</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">web/input-text</span> <span class="s">&quot;#pass&quot;</span> <span class="nv">password</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">web/submit</span> <span class="s">&quot;#pass&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>Go to scoreboard page</em></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">web/to</span> <span class="s">&quot;https://www.facebook.com/hackercup/scoreboard?round=185564241586420&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>Process each page</em></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">page-num</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="mi">114</span><span class="p">))]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">process-page</span> <span class="nv">page-num</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Number of pages is hardcoded. It&#8217;s ok.
What is <code>process-page</code> method?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">process-page</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">url</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;https://www.facebook.com/hackercup/scoreboard?round=185564241586420&amp;page=&quot;</span> <span class="nv">n</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">web/to</span> <span class="nv">url</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">e</span> <span class="p">(</span><span class="nf">web/find-elements</span> <span class="p">{</span><span class="ss">:css</span> <span class="s">&quot;a&quot;</span><span class="p">})</span>
</span><span class='line'>            <span class="ss">:let</span> <span class="p">[</span><span class="nv">url</span> <span class="p">(</span><span class="nf">c/attribute</span> <span class="nv">e</span> <span class="s">&quot;href&quot;</span><span class="p">)]</span>
</span><span class='line'>            <span class="ss">:when</span> <span class="p">(</span><span class="nb">and </span><span class="nv">url</span> <span class="p">(</span><span class="nf">.startsWith</span> <span class="nv">url</span> <span class="s">&quot;https://fbcdn-dragon-a.akamaihd.net/&quot;</span><span class="p">))]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">process-url</span> <span class="nv">url</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>First of all,  we concat scoreboard link with page number to get actual link to each page.
Then we go to that page obtain all <code>a</code> elements, get their <code>href</code> values and filter
to save only ones that contain source code.</p>

<ul>
<li><em>Process each url</em></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">process-url</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">source-code</span> <span class="p">(</span><span class="ss">:body</span> <span class="p">(</span><span class="nf">http/get</span> <span class="nv">url</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">file-name</span> <span class="p">(</span><span class="nf">generate-filename</span> <span class="nv">url</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">spit</span> <span class="nv">file-name</span> <span class="nv">source-code</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this part we obtain html source of url and get its <code>:body</code> tag.
As all source urls contain just plain text, we don&#8217;t need additional
filtering. Just save it to file.</p>

<ul>
<li><em>Generate file name</em></li>
</ul>


<p>I don&#8217;t want to name file as url. That&#8217;s why for naming we use following
function: <code>timestamp + underscore + absolute value of url hashcode</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">generate-filename</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">str </span><span class="nv">DIRECTORY</span> <span class="p">(</span><span class="nf">System/currentTimeMillis</span><span class="p">)</span> <span class="s">&quot;_&quot;</span> <span class="p">(</span><span class="nf">math/abs</span> <span class="p">(</span><span class="nf">hash</span> <span class="nv">url</span><span class="p">))</span> <span class="s">&quot;.txt&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>DIRECTORY</code> is just <code>def</code> for folder where you want to place all sources.</p>

<p>Whole script source available <a href="https://github.com/mishadoff/clj-statistic-tools/blob/master/src/clj_statistic_tools/fbhackercup2013.clj">here</a></p>

<h4>Execution</h4>

<p>To run that script you need to write in clojure REPL
<code>(run "username" "password")</code>, with correct values for <em>username</em> and <em>password</em>, obviously.</p>

<p>It works some time. <em>Some time</em> equals to eight hours on my machine. Long enough.
But it&#8217;s ideal time for <em>night crawling</em>!</p>

<p>In the morning I had all work done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">ls</span> <span class="mi">-1</span> <span class="err">|</span> <span class="nv">wc</span> <span class="nv">-l</span> <span class="o">&amp;&amp;</span> <span class="nv">du</span>
</span></code></pre></td></tr></table></div></figure>


<p>prints</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="mi">20348</span>
</span><span class='line'><span class="mi">291120</span>  <span class="nv">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Good sign. We have more than 20K of source codes with total size almost 300Mb.</p>

<h3>2. Analysis</h3>

<p>Data is good. But no one interested in raw data, so we need process it.</p>

<p>Basically, we need to detect programming language by source file.
No extensions.</p>

<p>You can <a href="https://www.bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html">write your own classifier</a>
or use some existing tool.</p>

<p>I did few-minutes research on this topic and found
<a href="https://github.com/github/linguist">linguist</a> project.
It is written in <em>Ruby</em> and used in <a href="https://gist.github.com/">Gist</a> to
detect snippet language. Exactly what we need!</p>

<p><em>Unfortunately, I do not know ruby. I even could not build and run linguist classifier to
detect language in my files. Rvm, gems and modules driving me crazy. I surrendered.</em></p>

<p>Another solution to use javascript library <a href="http://softwaremaniacs.org/soft/highlight/en/">Highlight.js</a>.
It is used in syntax coloring, but have automatic language detection. Again, javascript and
reading files from filesystem&#8230; Don&#8217;t tell me about Node.js</p>

<p>I decided to write my own &#8220;classifier&#8221;. Honestly, it&#8217;s just regexp matching mechanism
on common language constructions: keywords, imports, most used functions, etc.</p>

<p>Iterative approach has been used.</p>

<p>Select some popular language construction say <code>#include &lt;iostream&gt;</code> and filter it as <code>C</code>. After filtering
we detect some subset of <code>C</code> language, remove them from all files list and repeat again with another construction.</p>

<p><em>I don&#8217;t know how <code>C++</code> different from <code>C</code>, so I accept them both as interchangeable languages but call it <code>C/C++</code>.
By the way, <code>C - C++ = 0</code>, so we assume they are equal.</em></p>

<p>I developed some number of patterns (they can be reviewed
<a href="https://github.com/mishadoff/clj-statistic-tools/blob/master/src/clj_statistic_tools/fbhackercup2013.clj">here</a>)
and processed all gathered source files.</p>

<p>Unfortunately, not all files were processed succesfully. I reviewed approximately 2000 files manually, few
new languages were detected but big amount of them were the crap: input data, binary files, some text information.</p>

<p>I think we don&#8217;t lose too much if we say <em>only 99% of files were processed</em>.</p>

<h3><a id="stats"></a>3. Statistics</h3>

<p><img src="http://i.imgur.com/sWyfLqv.png" alt="" /></p>

<p>If you don&#8217;t like this visualization, you can create your own. Here is data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">C/C++</span>          <span class="mi">10524</span>
</span><span class='line'><span class="nv">Java</span>            <span class="mi">3117</span>
</span><span class='line'><span class="nv">Python</span>          <span class="mi">3102</span>
</span><span class='line'><span class="nv">C#</span>              <span class="mi">1233</span>
</span><span class='line'><span class="nv">PHP</span>              <span class="mi">821</span>
</span><span class='line'><span class="nv">Ruby</span>             <span class="mi">488</span>
</span><span class='line'><span class="nv">Perl</span>             <span class="mi">142</span>
</span><span class='line'><span class="nv">Pascal/Delphi</span>    <span class="mi">136</span>
</span><span class='line'><span class="nv">Javascript</span>       <span class="mi">109</span>
</span><span class='line'><span class="nv">Haskell</span>           <span class="mi">85</span>
</span><span class='line'><span class="nv">Scala</span>             <span class="mi">72</span>
</span><span class='line'><span class="nv">Clojure</span>           <span class="mi">29</span>
</span><span class='line'><span class="nv">Go</span>                <span class="mi">28</span>
</span><span class='line'><span class="nv">Visual</span> <span class="nv">Basic</span>      <span class="mi">19</span>
</span><span class='line'><span class="nv">F#</span>                <span class="mi">12</span>
</span><span class='line'><span class="nv">Scheme</span>             <span class="mi">8</span>
</span><span class='line'><span class="nv">OCaml</span>              <span class="mi">7</span>
</span><span class='line'><span class="nv">Common</span> <span class="nv">Lisp</span>        <span class="mi">6</span>
</span><span class='line'><span class="nv">Lua</span>                <span class="mi">5</span>
</span><span class='line'><span class="nv">Matlab</span>             <span class="mi">4</span>
</span><span class='line'><span class="nv">Cocoa</span>              <span class="mi">3</span>
</span><span class='line'><span class="nv">Groovy</span>             <span class="mi">2</span>
</span><span class='line'><span class="nv">Dart</span>               <span class="mi">2</span>
</span><span class='line'><span class="nv">awk</span>                <span class="mi">1</span>
</span><span class='line'><span class="nv">Powershell</span>         <span class="mi">1</span>
</span><span class='line'><span class="nv">bash</span>               <span class="mi">1</span>
</span><span class='line'><span class="nv">Kotlin</span>             <span class="mi">1</span>
</span><span class='line'><span class="nv">ActionScript</span>       <span class="mi">1</span>
</span><span class='line'><span class="nv">Dylan</span>              <span class="mi">1</span>
</span><span class='line'><span class="nv">--------------------</span>
</span><span class='line'><span class="nv">crap</span>             <span class="mi">192</span>
</span><span class='line'><span class="nb">not </span><span class="nv">detected</span>     <span class="mi">196</span>
</span><span class='line'><span class="nv">--------------------</span>
</span><span class='line'><span class="nv">TOTAL</span>          <span class="mi">20348</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Conclusion</h3>

<ul>
<li>Top 5 was predicted but it&#8217;s extremely crazy that C/C++ occur more than 50%</li>
<li>Python has almost the same amount as Java</li>
<li>Good occurence of functional languages: Haskell, F#, Scala, Clojure, Ocaml</li>
<li>29 Clojure files that means there ~10 clojurists.</li>
<li>Two languages I never heard of:
<a href="http://www.dartlang.org/">Dart</a> and
<a href="http://opendylan.org/">Dylan</a></li>
<li><em>Parenthesis</em> languages still used: Common Lisp, Scheme and Clojure (of course)</li>
<li>Respect to matlabists</li>
<li>Few <em>exotic languages</em> used: awk, powershell, bash</li>
<li><a href="http://kotlin.jetbrains.org/">Kotlin</a> becomes popular!</li>
</ul>


<p><em>Warning:</em> Do not treat this statistics as real-world pattern. It is a programming competition with
a lot of geeks, they can use all they want. Also do not blame their code for quality. It was created just for
correctness and speed. Pay attention to code quality in production, but always remember:</p>

<blockquote><p>Your code may be elegant, by mine fucking works.</p>

<p>&#8211; <a href="http://omniti.com/seeds/your-code-may-be-elegant">Leon Fayer</a></p></blockquote>

<br />


<p><strong>P.S.</strong> First of all, it is not high-accurate statistics. As I am not
programming guru, I don&#8217;t know all possible languages&#8217; constructions
so it is likely that one construction overlapped with another. In that case
only first one will be checked. Ideally, would be good to have language
detecting library in clojure for future analysis. <em>Maybe</em>, I will do it.
Second of all, code presented here is not beautiful, not optimized, have a lot
of hardcode, but it works. Just in the spirit of Facebook Hacker Cup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 013]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-013/"/>
    <updated>2013-01-25T16:33:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-013</id>
    <content type="html"><![CDATA[<blockquote><p>Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=13">http://projecteuler.net/problem=13</a></p>

<!-- more -->


<p><em>Assume, here is a huge amount of digits. In any case, you can always find them in permalink.</em></p>

<p>What is the problem to sum one-hundred numbers?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">reduce + </span><span class="nv">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done.</p>

<p>Are you kidding me? Not so fast. The question is <em>what type of number you must choose</em>
to sum all these numbers. <code>int</code>? <code>long</code>? <code>looooong</code>? <code>super long long</code>?</p>

<p>Technique to sum very long numbers called
<a href="http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic">Bignum arithmetic</a>.
To solve that problem you just need to implement this technique&#8230; or use already implemented.</p>

<p>Java (<em>yeah we talking about it</em>) support long arithmetics with
<a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html">BigInteger</a>.
And clojure does.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="nv">bigint</span> <span class="nv">numbers</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that function you&#8217;ll get the big number.
Just truncate first 10 digits and you are good.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">apply str </span><span class="p">(</span><span class="nb">take </span><span class="mi">10</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="nv">bigint</span> <span class="nv">numbers</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>(for [i &#8221;<a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem013.clj">GitHub</a>&#8221;] i)</p>

<p><strong>P.S.</strong> Ideally, last line should be wrapped
with <code>(read-string ...)</code> to produce number type. But we using
manual submission, so it is fair.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 012]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-012/"/>
    <updated>2013-01-22T19:45:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-012</id>
    <content type="html"><![CDATA[<blockquote><p>What is the value of the first triangle number to have over five hundred divisors?</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=12">http://projecteuler.net/problem=12</a></p>

<!-- more -->


<blockquote><p>The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.</p>

<p>The first ten terms would be:</p>

<p>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, &#8230;</p>

<p>Let us list the factors of the first seven triangle numbers:</p></blockquote>

<pre><code> 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
</code></pre>

<blockquote><p>We can see that 28 is the first triangle number to have over five divisors.</p>

<p>What is the value of the first triangle number to have over five hundred divisors?</p></blockquote>

<p>When we see infinite sequence of some numbers, first thing that we do is implement it
with using <em>lazy sequences</em>. Simple explanation and example for Fibonacci numbers
can be found in <a href="http://mishadoff.github.com/blog/clojure-euler-problem-002">Clojure Euler: Problem 002</a>.</p>

<p>We have an easy case, so we implement triangle number as
sum of all integers below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">triangle-number</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">n</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t miss the possibility reduce complexity from <code>O(n)</code> to <code>O(1)</code>.
Just apply <a href="http://en.wikipedia.org/wiki/Arithmetic_progression">arithmetic progression</a> formula.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">triangle-number</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okey, we did small optimization (<em>not so small</em>) here and we have a function that calculates
triangle number for <code>n</code>. Let&#8217;s find all of them!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">triangles</span> <span class="p">(</span><span class="nb">map </span><span class="nv">triangle-number</span> <span class="p">(</span><span class="nb">iterate inc </span><span class="mi">1</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>triangles</code> refers to lazy sequence of <em>triangle numbers</em>.</p>

<blockquote><p>Do not evaluate lazy seqs!</p></blockquote>

<p>Use limit functions as <code>take</code>, <code>take-while</code>, <code>drop</code>, <code>drop-while</code> to test the
sequence values, or build other lazy seqs with <code>filter</code>, <code>map</code>, etc.</p>

<p>Now, we need a function to calculate number of divisors.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">num-of-divisors</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">n</span> <span class="nv">%</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">2</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nf">sqrt</span> <span class="nv">n</span><span class="p">))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we remember <a href="http://mishadoff.github.com/blog/clojure-euler-problem-003">Clojure Euler: Problem 003</a>
then we know that using <code>sqrt(n)</code> instead of <code>n</code> as upper bound for divisors
saves much time.
Don&#8217;t forget mutiply that value by two, as you skip number after <code>sqrt(n)</code>.</p>

<p>Last step: to calculate number over 500 divisors</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">drop-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">num-of-divisors</span> <span class="nv">%</span><span class="p">)</span> <span class="mi">500</span><span class="p">)</span> <span class="nv">triangles</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We got the result, but spent ~11 secs. Too much.</p>

<p><em>How can we improve our solution?</em></p>

<p>There is theorem about
<a href="http://en.wikipedia.org/wiki/Integer_factorization#Prime_decomposition">Prime Factorization</a>
states:</p>

<blockquote><p>Every positive integer has a unique prime factorization</p></blockquote>

<p>For example: 15 = 3<sup>1</sup> * 5<sup>1,</sup> 18 = 2<sup>1</sup> * 3<sup>2</sup> and so on.</p>

<p>Not hard to see that number of divisors from such factorization can be obtained
by multiplying all prime powers incremented by one.</p>

<p>For example number 18 have 6 divisors (1, 2, 3, 6, 9, 18).
If we take factorization 18 = 3<sup>1</sup> * 5<sup>1,</sup> then number of divisors is
equal to (1 + 1) * (2 + 1) = 6. You see, the same.
Not hard to prove this theorem or
<a href="http://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic#Proof">read the proof</a>.</p>

<p>Stop math, we need to code, so let&#8217;s code that.</p>

<p>First of all, we need factorization method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factorize</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">x</span> <span class="nv">n</span> <span class="p">[</span><span class="nv">p</span> <span class="o">&amp;</span> <span class="nv">ps</span><span class="p">]</span> <span class="nv">primes</span> <span class="nv">factors</span> <span class="p">[]]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">factors</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">x</span> <span class="nv">p</span><span class="p">))</span> <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">x</span> <span class="nv">p</span><span class="p">)</span> <span class="nv">primes</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">factors</span> <span class="nv">p</span><span class="p">))</span>
</span><span class='line'>          <span class="ss">:else</span> <span class="p">(</span><span class="nf">recur</span> <span class="nv">x</span> <span class="nv">ps</span> <span class="nv">factors</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It uses <code>primes</code> from <code>clojure.contrib.lazy-seqs</code>.
This method prints all factors (<em>including duplicates</em>) for <code>n</code>.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">factorize</span> <span class="mi">18</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But instead of actual values of divisors, we just need their count.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factorize-count</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce * </span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nb">comp inc </span><span class="nv">count</span><span class="p">)</span> <span class="p">(</span><span class="nb">vals </span><span class="p">(</span><span class="nf">group-by</span> <span class="nb">identity </span><span class="p">(</span><span class="nf">factorize</span> <span class="nv">n</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calculate the result again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">drop-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">factorize-count</span> <span class="nv">%</span><span class="p">)</span> <span class="mi">500</span><span class="p">)</span> <span class="nv">triangles</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bingo! It gives the correct result in less than 3 seconds.
Not bad as improvement.</p>

<p>{:code &#8221;<a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem012.clj">GitHub</a>&#8221;}</p>

<p><strong>P.S.</strong> If you test-addicted person, you, probably, point out
that function <code>num-of-divisors</code> yields incorrect result for input <code>1</code>.
We can live with that, because our needed number is much greater than 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Critical Software Bugs: Part 1]]></title>
    <link href="http://mishadoff.github.com/blog/critical-software-bugs-part-1/"/>
    <updated>2013-01-20T18:48:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/critical-software-bugs-part-1</id>
    <content type="html"><![CDATA[<p>Little journey through the history of most critical software bugs
with some code examples.</p>

<p><em>Do not try to reproduce any of these!</em></p>

<!-- more -->


<h3>Intro</h3>

<blockquote><p>Every last bug is the last but one.</p></blockquote>

<p><strong>Bugs</strong> are bad. Some of them cause uncomfortable work, more actions
than expected, inconsistency, layout issues, etc.
Some of them &#8221;<a href="http://en.wikipedia.org/wiki/Undocumented_feature">not a bug</a>&#8221; at all.</p>

<p><strong>Bad bugs</strong> much worse. They cause data corruption, invalid data representation,
unavailability to perform action, losing integrity and so on.</p>

<p>There are <strong>critical bugs</strong> with painful consequences. They can damage the health, nature, people
break buildings, technics. Theoretically, they
<a href="http://www.washingtonpost.com/wp-srv/inatl/longterm/coldwar/shatter021099b.htm">can lead to World War III</a>.
Hope, it&#8217;s just theoretically.</p>

<p>If you are software engineer, you definitely will commit the bugs. No panacea.
But if we aware about common mistakes, then less likely we make that mistakes.</p>

<p>This article is review of famous most critical software bugs
including brief history, consequences, root causes, possible solutions, code examples and some advices.</p>

<h3><a href="http://en.wikipedia.org/wiki/Mariner_1">Mariner 1</a> (1962)</h3>

<p><strong>History:</strong>
In 1962, spacecraft <em>Mariner 1</em> was guided by computer program with error causes
racket do not follow its expected trajectory. To prevent tragic consequences, racket
was destoyed immediately.</p>

<p><strong>Consequences:</strong> Money, $18 million.</p>

<p><strong>Reason:</strong>
There are tons of versions about what type of error it was, but official version
is <em>missing hyphen</em> (&#8216;-&#8216;) in program. Maybe it&#8217;s just a myth for publicity,
but, anyway, if the reason of bug is incorrect handwritten formula transcription
from paper to computer, it&#8217;s sad.</p>

<p>Probably, the root cause of that is writer and computer operator were different people.
It&#8217;s common case for that times. <em>Programming</em> was synonym to the <em>scientific calculations</em> not
an enterprise, as nowadays. That&#8217;s why scientist, programmer, and operator could be
different people.</p>

<p>Related story, it&#8217;s why zero symbol has a period or diagonal line inside - to prevent
confusing with &#8220;big O&#8221; for &#8220;typer&#8221; person. Just compare <code>0</code> and <code>O</code>.</p>

<p><strong>Solution:</strong>
It&#8217;s hardly can be a problem today (as it was 50 years ago), but if you write for somebody on the paper, write it accurate.
If you type into computer from someone&#8217;s paper sheet, check, re-check and double re-check
what you typing. Ask if you have concerns. Especially, if it is the program for spaceship.</p>

<p>In very <em>far-fetched</em> example missing minus sign can result into invalid computation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">double</span> <span class="nf">getDiscountPercent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">0.25</span><span class="o">;</span> <span class="c1">// instead of return -0.25;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">calculatePrice</span><span class="o">(</span><span class="kt">double</span> <span class="n">initial</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">initial</span> <span class="o">*</span> <span class="o">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">getDiscountPercent</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That way instead of paying $75, you pay $125.</p>

<p><strong>Lesson:</strong> Always check your manual rewriting actions.</p>

<h3><a href="http://en.wikipedia.org/wiki/Siberian_pipeline_sabotage">Siberian pipeline sabotage</a> (1982)</h3>

<p><strong>History:</strong> Cold war. Soviet Union steal technology for managing gas pipelines from Canada. This
technology intentionally contained the bug (<a href="http://en.wikipedia.org/wiki/Logic_bomb">Logic Bomb</a>), developed by CIA
for sabotage purposes. Bomb triggered.</p>

<p><strong>Consequences:</strong> The greatest non-nuclear explosion in the world.</p>

<p><strong>Reason:</strong> Every microship from stolen technology would
work fine just for 10 million cycles, after that switches to another mode.</p>

<p>They <em>used someone&#8217;s code</em>.</p>

<p><strong>Solution:</strong></p>

<blockquote><p>You shall not steal</p>

<p>&#8211; <a href="http://en.wikipedia.org/wiki/Ten_Commandments">Ten Commandments</a></p></blockquote>

<p>Honestly, if someone&#8217;s technology used for critical areas, like gas
transportation, it must be reviewed and tested. 100 times.</p>

<p>Story can be translated as:</p>

<p>I found memory card on the city dump.
Card contained one shell script <code>please-execute-me.sh</code>.
I <em>executed</em> it. System crashed. Who&#8217;s guilty? Just me.</p>

<p>Use software from trusted sources.</p>

<p>In modern software world, we often use someone&#8217;s libraries, frameworks,
APIs to build our own applications. We <em>expect</em> that code is <em>reviewed</em> and <em>tested</em>.
If not, we can help to do it. How we can be sure these libs without logic bombs?</p>

<p>Trust or review the sources. That&#8217;s why I love open source software.</p>

<p>Logic bomb detection is not that hard. Just find the code that causes error
and see the reason of that error. Again, code review helps <em>to prevent</em> the
logic bomb instead of <em>fixing it</em>. Build application to production only from
version control system (<em>which is controlled, right?</em>)</p>

<p>Just for educational purposes: simple example of time-triggered logic bomb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogicBombRunner</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">LogicBomb</span><span class="o">());</span>
</span><span class='line'>                <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">LogicBomb</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">long</span> <span class="n">toStop</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">TIME_TO_TRIGGER</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">LogicBomb</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">toStop</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="n">TIME_TO_TRIGGER</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">toStop</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;System works fine.&quot;</span><span class="o">);</span>
</span><span class='line'>                                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>                                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                                <span class="o">}</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Logic bomb triggered.&quot;</span><span class="o">);</span>
</span><span class='line'>                                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes. It throws <code>RuntimeException</code> after approximately 100 days from <code>LogicBomb</code> object creation.</p>

<p><strong>Lesson:</strong> Do not steal. Trust to very limited circle of people.</p>

<h3><a href="http://en.wikipedia.org/wiki/Therac-25">Therac-25</a> (1985 - 1987)</h3>

<p><strong>History:</strong> Therac-25 was a medical device for radiation therapy.
It could deliver either beta-particles or X-rays. Unfortunately,
operating system for controling the device was written with error,
that causes sad results.</p>

<p><strong>Consequences:</strong> At least 2 patients died, 4 patients were given overdose,
approximately 100 times intended dose.</p>

<p><strong>Reason:</strong> Investigation concluded the common reason was a
<em>bad software design</em>, <em>development practices</em> and a <em>set of bugs</em>
instead of some particular critical bug.</p>

<p>These bad practices and bugs include:</p>

<ul>
<li>No code review</li>
<li>Poor exception handling</li>
<li>No integration testing until device was assembled in the hospital</li>
<li>Poor hardware design</li>
<li><em>Bad code</em> reuse</li>
<li>Concurrency issues</li>
</ul>


<p><strong>Solution:</strong> Code review its a must. Even if you working
alone in the team, show sources to some your friend (programmer).
Two pair of eyes can spot the mistake two times more.</p>

<p><em>Poor exception handling</em>. If failure occurs, no one knows about that failure.
Never handle exception like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">catch</span> <span class="o">(</span><span class="n">SomeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In 99% there are must be a proper handling. If you don&#8217;t know how
to handle, rethrow it, possible with wrapping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">catch</span> <span class="o">(</span><span class="n">SomeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">throw</span> <span class="k">new</span> <span class="nf">SpecificException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much better to throw responsibility for handling one level up
in method signature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">SomeException</span>
</span></code></pre></td></tr></table></div></figure>


<p>If your real intention to left catch block empty, say this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">catch</span> <span class="o">(</span><span class="n">SomeExcpetion</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// swallowing this exception is intended</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Bad code reuse</em>. <a href="http://en.wikipedia.org/wiki/Code_reuse">Code reuse</a> is a good thing.
Except the case when you reuse something with errors.</p>

<p>For example, I have following method for testing if number is even in some of my
previous projects (<em>yes, look at your code that was written few years ago</em>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isEven</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method returns incorrect result <code>true</code> for all negative odd numbers. Just because
<code>%</code> operator returns <code>-1</code> except <code>1</code> for negative numbers. Better do <em>NOT</em> reuse such method.
Just write new. And replace old method immediately.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isEven</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Concurrency</em>. Software world hardest issues are concurrency issues.</p>

<blockquote><p>You have a problem and decide to use threads.
Two now problems have you.</p>

<p>&#8211; Some guy from internet</p></blockquote>

<br>


<blockquote><p>You have a problem and decide to use locks.
Now you have</p>

<p>&#8211; Some another guy from internet</p></blockquote>

<p>If you know that some object will be shared between threads, one solution to
add <code>synchronized</code> (<a href="http://en.wikipedia.org/wiki/Monitor_%28synchronization%29">Monitor object</a>)
to each read/write state method. It will slow
your work with that object but prevent a lot of unexpected errors.</p>

<p>Although, there are much flexible synchronization mechanisms in java that
plain old <code>synchronized</code> as <a href="http://en.wikipedia.org/wiki/Semaphore_%28programming%29">semaphores</a>,
<a href="http://en.wikipedia.org/wiki/Mutual_exclusion">mutexes</a>,
<a href="http://en.wikipedia.org/wiki/Read_write_lock_pattern">read-write locks</a>.</p>

<p>I reccomend to use java package <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/package-summary.html">java.util.concurrent</a>.
It consists of a lot of concurrency techniques, like <code>Synchronizers</code>, <code>Executors</code>,
<code>Atomics</code>, <code>Concurrent Collections</code>, <code>Futures</code>, <code>Callbacks</code> etc.</p>

<p><strong>As a bonus:</strong> Good books about concurrency in Java:</p>

<ul>
<li><a href="http://www.goodreads.com/book/show/127932.Java_Concurrency_in_Practice">Java Concurrency in Practice</a></li>
<li><a href="http://www.goodreads.com/book/show/629608.Concurrent_Programming_in_Java">Concurrent Programming in Java</a></li>
</ul>


<p><strong>Lesson:</strong> Always handle exceptions. Pay more attention to concurrency issues.</p>

<h3><a href="http://en.wikipedia.org/wiki/MIM-104_Patriot">Patriot Missile</a> (1991)</h3>

<p><strong>History:</strong> In 1991, American battery fired Patriot Missile to intercept Iraq missile.
Interception failed because of system bug in time step calculation.
Iraq missile destroyed an American Army barracks.</p>

<p><strong>Consequences:</strong> 28 soldiers died, 100 injured.</p>

<p><strong>Reason:</strong> Floating point rounding error. System&#8217;s internal clock was calculating
time by 0.1 seconds step (0.1, 0.2, 0.3, &#8230;). As <code>0.1 = 1/10</code> have infinite binary representation
<code>0.0001100110011001100110011001100110011001100110011001100..</code>
and for this calculation 24-bit register was used,
register hold just <code>0.00011001100110011001100</code> introducing truncating error
<code>0.00000000000000000000000110011</code> what is approximately <code>0.0000001</code> in decimal.</p>

<p>Small enough, huh?</p>

<p>Not really, Multiplying this number for 100 hours gives:</p>

<pre><code>0.0000001 * 100 * 60 * 60 * 10 = 0.36 sec
</code></pre>

<p>During that time Iraq missile travels a half kilometer, and was out of tracking radius
for Patriot Missile. Bad things happen.</p>

<p><strong>Solution:</strong> Floats are very error-prone if we don&#8217;t handle them correctly.</p>

<p>Predict the output of the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span> <span class="n">d</span> <span class="o">!=</span> <span class="mf">1.0</span><span class="o">;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">d</span> <span class="o">+</span> <span class="mf">0.1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Iteration&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Infinite loop. The same problem as described above.</p>

<p>One solution is to use float that have exact binary representation.
<code>0.125</code>, <code>0.25</code>, <code>0.5</code> for example.
But this greatly reduces the space of allowed values and give less flexibility.</p>

<p>Another solution to use big decimal or ratio types.
Java, as example, have out-of-the-box <code>BigDecimal</code> class. Loop above rewritten with
that class works as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">BigDecimal</span> <span class="n">init</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&quot;0.0&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">BigDecimal</span> <span class="n">bound</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&quot;1.0&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">BigDecimal</span> <span class="n">step</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="s">&quot;0.1&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">BigDecimal</span> <span class="n">d</span> <span class="o">=</span> <span class="n">init</span><span class="o">;</span> <span class="o">!</span><span class="n">d</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">bound</span><span class="o">);</span> <span class="n">d</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">step</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">d</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One disadvantage it has slower execution than with floats. Consider trade-off
between time and accuracy. If human lives on the stake, it&#8217;s not relevant choice.</p>

<p><code>Ratio</code> class can be defined without any problems and used similar way.</p>

<p><strong>Lesson:</strong> If you need very accurate calculations use big decimals or ratios.</p>

<h3><a href="http://en.wikipedia.org/wiki/Mars_Climate_Orbiter">Mars Climate Orbiter</a> (1998)</h3>

<p><strong>History:</strong> Again about space. In 1998, communication with Mars Climate Orbiter
was lost, because of changed trajectory. Space probe was crashed near Mars.</p>

<p><strong>Consequences:</strong> Money, $327 million</p>

<p><strong>Reason:</strong> Navigation system design was developed by another team.
To represent Force they used <a href="http://en.wikipedia.org/wiki/Pound-force">pound-force</a>
from <a href="http://en.wikipedia.org/wiki/Imperial_units">Imperial units</a>
instead of <a href="http://en.wikipedia.org/wiki/Newton_%28unit%29">Newton</a>
from <a href="http://en.wikipedia.org/wiki/Metric_system">metric system</a>.</p>

<pre><code>1 Newton = 0.22 pound-force
</code></pre>

<p>Without provided conversion between them system failed.</p>

<p>Issue resemble to using dates in different timezones, but much more critical.</p>

<p><strong>Solution:</strong> First of all, at least one science-aware person must perform code review.
At least for code blocks with formulas and calculations. If there are comments about using pound-force,
the problem easy spotted. Second of all, received code must be tested on model
instead of physical machine. This is also, likely, detects the issue.
Developer who wrote that less guilty, but still guilty.</p>

<p>There are different approaches to implement this in java:</p>

<p>very bad approach, we don&#8217;t know what units are used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Force</span><span class="o">(</span><span class="mf">1.533</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>better (still bad) approach to indicate with comment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// force in Newtons!</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Force</span><span class="o">(</span><span class="mf">1.533</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>better (still bad) approach to indicate different constructors for different units:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">ForceInNewtons</span><span class="o">(</span><span class="mf">1.533</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I prefer approach where you specifies a <em>value</em> and <em>unit</em> in the constructor, and
they converted to something common unit (metric) convenient for use in internal representation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">enum</span> <span class="n">ForceUnit</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">NEWTON</span><span class="o">,</span>
</span><span class='line'>  <span class="n">POUND_FORCE</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nf">Force</span><span class="o">(</span><span class="mf">1.533</span><span class="o">,</span> <span class="n">ForceUnit</span><span class="o">.</span><span class="na">NEWTON</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>A bit more code, but it is understandable and easy to use for different unit systems.
Unit conversion method can be defined either at the <code>enum ForceUnit</code> or <code>class Force</code> level.</p>

<p><strong>Lesson:</strong> Always explicitly indicate what units used in your code.</p>

<p><em>To be continued.</em></p>

<h3>Links</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/List_of_software_bugs">List of Software Bugs</a></li>
<li><a href="http://www5.in.tum.de/~huckle/bugse.html">Collection of Software Bugs</a></li>
<li><a href="http://www.wired.com/software/coolapps/news/2005/11/69355?currentPage=all">History&#8217;s Worst Software Bugs</a></li>
<li><a href="http://www.sundoginteractive.com/sunblog/posts/top-ten-most-infamous-software-bugs-of-all-time">Top Ten Most Infamous Software Bugs Of All Time</a></li>
<li><a href="http://nssdc.gsfc.nasa.gov/nmc/spacecraftDisplay.do?id=MARIN1">NASA Mariner 1</a></li>
<li><a href="http://www.wired.com/culture/lifestyle/news/2004/03/62806">Soviets Burned By CIA Hackers?</a></li>
<li><a href="http://courses.cs.vt.edu/cs3604/lib/Therac_25/Therac_1.html">An Investigation of the Therac-25 Accidents</a></li>
<li><a href="http://seeri.etsu.edu/SECodeCases/ethicsC/PatriotMissile.htm">An Analysis of the Patriot Missile System</a></li>
<li><a href="http://www.ima.umn.edu/~arnold/disasters/patriot.html">The Patriot Missile Failure</a></li>
<li><a href="http://www.tysknews.com/Depts/Metrication/mystery_of_orbiter_crash_solved.htm">Mystery of Orbiter Crash Solved</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 011]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-011/"/>
    <updated>2013-01-18T13:45:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-011</id>
    <content type="html"><![CDATA[<blockquote><p>What is the greatest product of four adjacent numbers in the same
direction (up, down, left, right, or diagonally) in the 20 x 20 grid?</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=11">http://projecteuler.net/problem=11</a></p>

<!-- more -->


<blockquote><p>In the 20 x 20 grid below, four numbers along a diagonal
line have been enclosed into square brackets</p></blockquote>

<pre><code>08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10[26]38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95[63]94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17[78]78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35[14]00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
</code></pre>

<blockquote><p>The product of these numbers is 26 * 63 * 78 * 14 = 1788696.</p>

<p>What is the greatest product of four adjacent numbers in the
same direction (up, down, left, right, or diagonally) in the 20 x 20 grid?</p></blockquote>

<p>First step is pretty routine, we need to create such grid representation
in our program from file. For the way how we read files refer
<a href="http://mishadoff.github.com/blog/clojure-euler-problem-008">Clojure Euler: Problem 008</a>, we have
similar problem there.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-matrix</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">Integer/parseInt</span> <span class="p">(</span><span class="nb">apply str </span><span class="nv">%</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">partition</span> <span class="mi">2</span> <span class="mi">2</span> <span class="p">(</span><span class="nb">remove </span><span class="o">#</span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="sc">\n</span><span class="nv">ewline</span> <span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="sc">\ </span><span class="nv">%</span><span class="p">))</span>
</span><span class='line'>                              <span class="p">(</span><span class="nb">seq </span><span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;res/problem011.txt&quot;</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Idea is following: read the file, drop the garbage,
take all two-digit combinations, concat each and transform to the integer.</p>

<p>To make things simple we reading the numbers in one-dimensional list
of size 20 x 20 = 400. We always can use formula to represent two dimensional
indexing for one-dimensional array and vice versa.</p>

<p><em>Example:</em> suppose you need a 3 x 3 matrix <code>A</code></p>

<pre><code>9    2    4
6    1    7
5    3    8
</code></pre>

<p>You can flat it into 1D array <code>B</code></p>

<pre><code>9 2 4 6 1 7 5 3 8
</code></pre>

<p>Now, when you want <code>A[i][j]</code> use the formula <code>i * size_j + j</code>, where <code>size_j</code>
is second matrix dimension. Therefore <code>A[1][2] = B[1 * 3 + 2] = B[5] = 7</code>, what is correct.</p>

<p>Implementing that in clojure gives one indexing function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-at</span> <span class="p">[</span><span class="nv">i</span> <span class="nv">j</span> <span class="nv">matrix</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">i</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">i</span> <span class="mi">20</span><span class="p">)</span> <span class="p">(</span><span class="nb">&gt;= </span><span class="nv">j</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">j</span> <span class="mi">20</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">nth </span><span class="nv">matrix</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">j</span> <span class="p">(</span><span class="nb">* </span><span class="nv">i</span> <span class="mi">20</span><span class="p">)))</span> <span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We check the boundaries of array inside this function, which can be inappropriate
in many cases, but it is good as we use it in one place.</p>

<p>Ok. We have data, we have methods operate this data, now let&#8217;s code logic.
Our good friend - <strong>bruteforce</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">matrix</span> <span class="p">(</span><span class="nf">get-matrix</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">ways</span> <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">20</span><span class="p">)</span> <span class="nv">j</span> <span class="p">(</span><span class="nb">range </span><span class="mi">20</span><span class="p">)]</span>
</span><span class='line'>             <span class="p">[(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-at</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="nv">j</span><span class="p">)</span> <span class="nv">matrix</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-at</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="nv">i</span><span class="p">)</span> <span class="nv">j</span> <span class="nv">matrix</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-at</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="nv">j</span><span class="p">)</span> <span class="nv">matrix</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">get-at</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">j</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">matrix</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">4</span><span class="p">))])]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">reduce max </span><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">reduce * </span><span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce concat </span><span class="nv">ways</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We iterate on all matrix elements as start of 4-element range.</p>

<p>We have 4 conditions, each of them represents some direction.
All these 4 directions represent all possible direction in grid.</p>

<ol>
<li>NORTH -> SOUTH (Up &amp; Down covered)</li>
<li>WEST -> EAST (Left &amp; Right covered)</li>
<li>NW -> SE (backslash diagonals covered)</li>
<li>NE -> SW (slash diagonals covered)</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">S</span>      <span class="nv">S</span> <span class="nb">* * * </span>        <span class="nv">S</span>                  <span class="nv">S</span>
</span><span class='line'><span class="nb">* </span>                      <span class="nb">* </span>               <span class="nv">*</span>
</span><span class='line'><span class="nb">* </span>                       <span class="nb">* </span>             <span class="nv">*</span>
</span><span class='line'><span class="nb">* </span>                        <span class="nb">* </span>           <span class="nv">*</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>S is for start</em></p>

<p>If we obtain all possible 4-element ranges for matrix, just find
maximum of product.</p>

<p>Problem solved!</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem011.clj">github</a></p>

<p><strong>P.S.</strong> Boring problem.
I think it just for introducing matrices computation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOps reactions]]></title>
    <link href="http://mishadoff.github.com/blog/devops-reactions/"/>
    <updated>2013-01-13T18:10:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/devops-reactions</id>
    <content type="html"><![CDATA[<p>Just found blog, that illustrates developer feelings with gif-pictures: <a href="http://devopsreactions.tumblr.com/">DevOps reactions</a></p>

<p>It&#8217;s really cool idea.</p>

<!-- more -->


<p>Here are the most liked</p>

<h3>When you review undocumented code</h3>

<p><img src="http://i209.photobucket.com/albums/bb315/DJ_Napps/omg.gif" alt="" /></p>

<h3>Security hole will not be fixed because Product wants a new feature</h3>

<p><img src="http://i.imgur.com/w3Nbr.gif" alt="" /></p>

<h3>An error notification comes in that is related to code you worked on</h3>

<p><img src="http://i.imgur.com/An059.gif" alt="" /></p>

<h3>Code freeze</h3>

<p><img src="http://media.tumblr.com/c888a5fc6db74ba2ba4f5dcb3d13e95b/tumblr_inline_mfrh8jAexq1raprkq.gif" alt="" /></p>

<h3>Working on the wrong server</h3>

<p><img src="http://i.imgur.com/da25D.gif" alt="" /></p>

<h3>Deciding whether to perform a risky break/fix</h3>

<p><img src="http://i.imgur.com/SvaAv.gif" alt="" /></p>

<h3>Finding an interesting side-issue while dealing with something else</h3>

<p><img src="http://www.ohmagif.com/wp-content/uploads/2012/12/please-wait-i-need-to-play-in-the-puddle.gif" alt="" /></p>

<h3>Reaction difference when something breaks and one is on vacation</h3>

<p><img src="http://i.imgur.com/c9X6n.gif" alt="" /></p>

<h3>Typical lunch break</h3>

<p><img src="http://media.tumblr.com/tumblr_mekc6kZTap1raprkq.gif" alt="" /></p>

<h3>How time feels when participating in a meeting with non-technical people</h3>

<p><img src="http://i.imgur.com/7xpOF.gif" alt="" /></p>

<h3>Bonus: Holy War (Java vs C#)</h3>

<p><img src="http://i.imgur.com/u9CAo.gif" alt="" /></p>

<p><strong>P.S.</strong> Everyone can submit feeling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse Speedup]]></title>
    <link href="http://mishadoff.github.com/blog/eclipse-speedup/"/>
    <updated>2012-12-23T18:00:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/eclipse-speedup</id>
    <content type="html"><![CDATA[<p>Have you been in situation where most of the time in eclipse you were waiting for
some operation to be finished?</p>

<!-- more -->


<p><img src="http://upload.wikimedia.org/wikipedia/en/3/34/Eclipse-logo.png" alt="" /></p>

<p>If you here, probably, the answer is yes. You are bored with that slow functionality and want
to increase eclipse performance to make your development work more comfortable. It is the right thing to do.</p>

<p><em>Warning:</em> Most frequent advice I heard <em>to add more RAM</em>. Probably, you can buy better workstation with better CPU.
Add SSD to make filesystem operations faster. We assume you can&#8217;t afford all that. All you can is setup your
eclipse instance. All preferences based on <code>Eclipse SDK Version: 4.3.0 Build id: I20121031-2000</code> for ubuntu, but
almost everything is identical in other versions for other platforms.</p>

<h3>Eclipse tweaks</h3>

<h4>Plugins</h4>

<p>First time I found the power of plugins I was excited. I installed them more and more until I couldn&#8217;t
work comfortable with eclipse. Probably, you have a lot of plugins, just <strong>disable</strong> on startup ones that not used.
It is not deleting, you always can enable it back.</p>

<pre><code>Window -&gt; Preferences -&gt; General -&gt; Startup and Shutdown
</code></pre>

<p><img src="http://i.imgur.com/kgavA.png" alt="" /></p>

<p>By the way, some plugins appeared due to your experimenting and not used anymore. <strong>Delete</strong> redundant plugins if they
not used at all.</p>

<pre><code>Help -&gt; About Eclipse SDK -&gt; Instalation Details -&gt; &lt;Select plugin&gt; -&gt; Uninstall
</code></pre>

<p><img src="http://i.imgur.com/7wRoR.png" alt="" /></p>

<h4>eclipse.ini</h4>

<p>Following tweaks based on editing <code>eclipse.ini</code> file located in root folder
of your eclipse instalation.</p>

<ul>
<li><strong>Use specific JVM to run eclipse.</strong>
This allows do not take into account system properties which alters your JDK.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-vm
</span><span class='line'>/path/to/your/java</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>Use latest JDK to run eclipse.</strong>
Much better if you point your eclipse to the <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">latest JDK</a>.
<em>Rumors</em> said it has better performance.</p></li>
<li><p><strong>Use Sun JDK to run eclipse.</strong>
The reason behind this has the same explanation.</p></li>
<li><p><strong>Configure VM arguments.</strong>
You can set your own values for virtual machine if you think
they are appropriate
(<a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html#PerformanceTuning">Performance related options</a>)
I use following settings to increase heap size (objects) to <code>768Mb</code> and permgen (classes) to <code>256 Mb</code> on my <code>3Gb</code> RAM machine.</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-vmargs
</span><span class='line'>-Xms768m
</span><span class='line'>-Xmx768m
</span><span class='line'>-XX:PermSize=256m
</span><span class='line'>-XX:MaxPermSize=256m</span></code></pre></td></tr></table></div></figure>


<p>You can also add <code>-Xverify:none</code> that skips validation of loaded clases to JVM. Due to fact it skips one
step of JVM loading you will get performance boost. But it&#8217;s very risky change.</p>

<p>You can also test your eclipse performance  with different Garbage collector strategies, server options,
experimental VM options like (some of these):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-server
</span><span class='line'>-XX:+UnlockExperimentalVMOptions
</span><span class='line'>-XX:+UseG1GC
</span><span class='line'>-XX:+UseParallelGC
</span><span class='line'>-XX:+UseFastAccessorMethods
</span><span class='line'>-Xss2m</span></code></pre></td></tr></table></div></figure>


<p>Check all <a href="http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fmisc%2Fruntime-options.html">Eclipse runtime options</a>
for reference and choose ones that appropriate for you.</p>

<h4>Disable animations</h4>

<p>Animations it&#8217;s cool. But I always disable animations if it possible in all tools.
Also, classic theme is most usable for me.</p>

<pre><code>Window -&gt; Preferences -&gt; General -&gt; Appearance -&gt; Uncheck 'Enable animations'
</code></pre>

<p><img src="http://i.imgur.com/mzLp7.png" alt="" /></p>

<h4>Disable label decorations</h4>

<p>Label decorations are small icons on project, file, class levels that helps
visually indicate some state of file. Like commited it to git or no.
They are provided by various plugins and rarely useful. Just left ones that you want.</p>

<pre><code>Window -&gt; Preferences -&gt; General -&gt; Appearance -&gt; Label Decorations
</code></pre>

<p><img src="http://i.imgur.com/MKZp5.png" alt="" /></p>

<h4>Autocompletion</h4>

<p>Sometimes on slow machines or when you have a lot of classes in your classpath autocompletion performance is terrible.
Small improvement you can get by reducing group of possible proposals. I left only <code>Java Proposals</code> and <code>Template Proposals</code>:</p>

<pre><code>Window -&gt; Preferences -&gt; Java -&gt; Editor -&gt; Content Assist -&gt; Advanced
</code></pre>

<p><img src="http://i.imgur.com/Aa7MY.png" alt="" /></p>

<h4>Uncheck validators</h4>

<p>If you are sure in your competence just suspend all validators. If problem appears, you always
can identify the reason, but you save your development time.</p>

<pre><code>Window -&gt; Preferences -&gt; Validation -&gt; Suspend All Validators
</code></pre>

<p><img src="http://i.imgur.com/n1XQ2.png" alt="" /></p>

<h4>Close unrelated projects</h4>

<p>If you working in context of few projects, better to have all unrelated projects closed. They won&#8217;t appear
in index. You can manually <code>Close unrelated projects</code> in workspace. But I recommend to use <code>Working Set</code>.
You can add any number of projects to one working set, and quickly switch between different working sets
in one workspace.</p>

<pre><code>Right Click on Project -&gt; Assign Working Sets..
</code></pre>

<h4>Close unused tabs in editor</h4>

<p>Big number of tabs in editor can greatly slow down your performance. Just limit them.</p>

<pre><code>Window -&gt; Preferences -&gt; General -&gt; Editors
</code></pre>

<p>Check <code>Close editors automatically</code> and set <code>Number of opened tabs</code> to <code>10</code>.</p>

<p><img src="http://i.imgur.com/gjRd8.png" alt="" /></p>

<h4>Disable spell check</h4>

<p>Are you developer or what? I don&#8217;t see any reason to have <code>spell check</code> enabled.</p>

<pre><code>Window -&gt; Preferences -&gt; General -&gt; Editors -&gt; Text Editors -&gt; Spelling -&gt; Uncheck 'Enable spell checking'
</code></pre>

<h4>Disable autobuild</h4>

<p>Probably, you aware about when you want to build your project and when not.</p>

<pre><code>Project -&gt; Uncheck 'Build Automatically'
Window -&gt; Preferences -&gt; Java -&gt; Compiler -&gt; Building -&gt; Uncheck 'Scrub output folders when cleaning'
Window -&gt; Preferences -&gt; Java -&gt; Compiler -&gt; Building -&gt; Uncheck 'Rebuild class files modified by others'
</code></pre>

<h4>Hotkeys</h4>

<p>It is human-related advice. Even if you working in super-fast IDE and spend 10 actions to perform
single operation, your development process won&#8217;t be fast. Configure most-often used actions
to hotkeys and learn them. You will get a positive feedback after a week of usage.</p>

<pre><code>Windows -&gt; Preferences -&gt; General -&gt; Keys
</code></pre>

<p>To force myself learn all hotkeys I just disabled toolbar.</p>

<pre><code>Window -&gt; Hide Toolbar
</code></pre>

<h3>Useful Links</h3>

<ul>
<li><a href="http://wiki.eclipse.org/Eclipse.ini">http://wiki.eclipse.org/Eclipse.ini</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html">http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html</a></li>
<li><a href="http://www.beyondlinux.com/2011/06/25/speed-up-your-eclipse-as-a-super-fast-ide/">http://www.beyondlinux.com/2011/06/25/speed-up-your-eclipse-as-a-super-fast-ide/</a></li>
<li><a href="http://blog.normation.com/2010/05/24/optimizing-eclipse-performances/">http://blog.normation.com/2010/05/24/optimizing-eclipse-performances/</a></li>
<li><a href="http://stackoverflow.com/questions/142357/what-are-the-best-jvm-settings-for-eclipse/1409590#1409590">http://stackoverflow.com/questions/142357/what-are-the-best-jvm-settings-for-eclipse/1409590#1409590</a></li>
</ul>


<p><strong>P.S.</strong> This article planned to be updatable, other tweaks are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 010]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-010/"/>
    <updated>2012-12-15T00:23:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-010</id>
    <content type="html"><![CDATA[<blockquote><p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</p>

<p>Find the sum of all the primes below two million.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=10">http://projecteuler.net/problem=10</a></p>

<!-- more -->


<p>We have already worked with prime numbers in
<a href="http://mishadoff.github.com/blog/clojure-euler-problem-003/">Problem 003</a> and
<a href="http://mishadoff.github.com/blog/clojure-euler-problem-007/">Problem 007</a>. We also decided that
the best way to work with prime numbers in clojure to use <code>primes</code> lazy-seq
from <code>clojure.contrib.lazy-seqs</code>.</p>

<p>Gentle reminder: Just add proper <code>:use</code> to your file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">clojure.contrib.lazy-seqs</span> <span class="ss">:only</span> <span class="p">(</span><span class="nf">primes</span><span class="p">)])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, the simplest problem solution to use <code>take-while</code> stream and <code>reduce</code> for sum:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">take-while </span><span class="o">#</span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">%</span> <span class="mi">2000000</span><span class="p">)</span> <span class="nv">primes</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, one-line solution. Let&#8217;s run it.</p>

<p>Finding result on my nachine takes ~12 seconds. Small enough, but maybe somehow it can be improved?</p>

<h3>Sieve of Eratosthenes</h3>

<p><a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a> - ancient algorithm
for finding prime numbers. The best explanation how it works with picture from wiki:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="" /></p>

<p>Our first naive implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sieve-1</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">nums</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">cons </span><span class="mi">2</span> <span class="p">(</span><span class="nb">range </span><span class="mi">3</span> <span class="mi">2000000</span> <span class="mi">2</span><span class="p">)))</span> <span class="nv">n</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">n</span> <span class="mi">2000000</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce + </span><span class="nv">nums</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nf">clojure.set/difference</span> <span class="nv">nums</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">range </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">2000000</span> <span class="nv">n</span><span class="p">)))</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note:</em> <a href="http://clojuredocs.org/clojure_core/clojure.set/difference">clojure.set/difference</a> function
find the difference between two sets.</p>

<p>This recursive implementation is even worse than our oneliner, it calculates the result in ~24 seconds.</p>

<p>Primary optimisation is to use <code>(* n n)</code> as recursion base instead of <code>n</code>. Because of there are no prime
numbers if we crossed greater than square root of maximum. Problem evolves.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sieve-2</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">nums</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">cons </span><span class="mi">2</span> <span class="p">(</span><span class="nb">range </span><span class="mi">3</span> <span class="mi">2000000</span> <span class="mi">2</span><span class="p">)))</span> <span class="nv">n</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">2000000</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce + </span><span class="nv">nums</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nf">clojure.set/difference</span> <span class="nv">nums</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">range </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">2000000</span> <span class="nv">n</span><span class="p">)))</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>~21 seconds. Still worse.</p>

<p>Why we increment by 1 on recursion call? If we starting our <code>n</code> value from <code>3</code> we don&#8217;t need
to go over even numbers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sieve-3</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">nums</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">cons </span><span class="mi">2</span> <span class="p">(</span><span class="nb">range </span><span class="mi">3</span> <span class="mi">2000000</span> <span class="mi">2</span><span class="p">)))</span> <span class="nv">n</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">2000000</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce + </span><span class="nv">nums</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nf">clojure.set/difference</span> <span class="nv">nums</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">range </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">2000000</span> <span class="nv">n</span><span class="p">)))</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>~13 seconds. Much better&#8230; than previous, still worse than first version.</p>

<p>If you looked at <code>difference</code> documentation, take a look at its implementation under &#8220;Source&#8221;.
Nothing prevent us to pass sequence as second argument instead of set. Just removing casting to set.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sieve-4</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">nums</span> <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">cons </span><span class="mi">2</span> <span class="p">(</span><span class="nb">range </span><span class="mi">3</span> <span class="mi">2000000</span> <span class="mi">2</span><span class="p">)))</span> <span class="nv">n</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">2000000</span><span class="p">)</span> <span class="p">(</span><span class="nb">reduce + </span><span class="nv">nums</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nf">clojure.set/difference</span> <span class="nv">nums</span> <span class="p">(</span><span class="nb">range </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">2000000</span> <span class="nv">n</span><span class="p">))</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>~6 seconds. Wow! It&#8217;s better than original solution. That means our efforts were not wasteful.</p>

<p>Unfortuantely, we stopped improve our function. But if you want more, other major improvements
can be done in the following areas:</p>

<ul>
<li>Use non-persistent set to save prime numbers. It prevent overhead on new objects.</li>
<li>Use &#8220;wheel trick&#8221; that can be found in the sources of <code>primes</code> from <code>clojure.contrib.lazy-seqs</code>.</li>
<li>Use dynamic step of iteration. We changed <code>(inc n)</code> to <code>(+ n 2)</code>, but probably there is smarter solution.</li>
<li>Do not use <code>(reduce +)</code> because it is linear algorithm. We init <code>nums</code> sequence with some arithmetic progression.
Its sum can be calculated in O(1) by formula. When we compose another sequence (second argument for <code>difference</code>)
its also an arithmetic progression and sum can be calculated in O(1). When doing differencem just subtract second sum
from first sum, and it will be current <code>nums</code> sum.</li>
</ul>


<p>There are much more optimisations can be done to improve prime numbers performace.
If you interested, read nice Christophe Grand&#8217;s post
<a href="http://clj-me.cgrand.net/2009/07/30/everybody-loves-the-sieve-of-eratosthenes/">Everybody Loves The Sieve Of Erathosthenes</a></p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem010.clj">(str &#8220;Git&#8221; &#8220;Hub&#8221;)</a></p>

<p><strong>P.S</strong> Honestly, I am OK with 12 seconds. But 6 seconds is better. We performed improvements
just to show the point <strong>if you want to improve something, probably, you can do it</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 009]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-009/"/>
    <updated>2012-12-11T17:41:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-009</id>
    <content type="html"><![CDATA[<blockquote><p> A Pythagorean triplet is a set of three natural numbers, a &lt; b &lt; c, for which, a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup></p>

<p>For example, 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup></p>

<p>There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=9">http://projecteuler.net/problem=9</a></p>

<!-- more -->


<p>Thinking about clever way to solve it&#8230;</p>

<p>Nothing good came up in your mind? Try bruteforce.</p>

<p>Again, the idea behind bruteforce for this problem to iterate over all possible values
for <code>a</code>, <code>b</code> and <code>c</code>, that sums to <code>1000</code> and compose Pythagorean triplet.
That&#8217;s why we need predicate to test if three numbers compose triplet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">is-triplet?</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">b</span> <span class="nv">b</span><span class="p">))</span> <span class="p">(</span><span class="nb">* </span><span class="nv">c</span> <span class="nv">c</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then our bruteforce solution looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1000</span><span class="p">)</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1000</span><span class="p">)</span> <span class="nv">c</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>             <span class="ss">:when</span> <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">is-triplet?</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span> <span class="mi">1000</span><span class="p">))]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It finds the right solution, in ~45 seconds. Bad enough.</p>

<h3>Trick #1</h3>

<p>Do not iterate on <code>c</code> variable, because knowing <code>a</code> and <code>b</code> we always
can calculate <code>c = 1000 - a - b</code>.</p>

<p>Problem solution transformed into next one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1000</span><span class="p">)</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>             <span class="ss">:let</span> <span class="p">[</span><span class="nv">c</span> <span class="p">(</span><span class="nb">- </span><span class="mi">1000</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)]</span>
</span><span class='line'>             <span class="ss">:when</span> <span class="p">(</span><span class="nf">is-triplet?</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Trick #2</h3>

<p>Use rule <code>a &lt; b &lt; c</code> from problem definition. Then our iteration will be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">1000</span><span class="p">)</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">range </span><span class="nv">a</span> <span class="p">(</span><span class="nb">- </span><span class="mi">1000</span> <span class="nv">a</span><span class="p">))])</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Trick #3</h3>

<p><code>is-triplet?</code> predicate use 3 multiplications, addition and comparison.
We can add to <code>:when</code> section, predicate that compare <code>c</code> to <code>b</code>. This is also
slightly reduce number of <code>is-triplet?</code> execution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="ss">:when</span> <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">c</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nf">is-triplet?</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now solution found in ~45 msecs. 1000 times faster. Not bad.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem009.clj">(apply str (reverse &#8220;buHtiG&#8221;))</a></p>

<p><strong>P.S.</strong> Unfortunately, there was nothing in this problem about new clojure
functions, programming and even problem was not challenging. But you see the way how
we solve it. We tried &#8220;bad&#8221; approach with knowing about all its disadvantages.
One more step and we improved it and got right solution. So it is not that bad
approach to try simple solution, even if it is wrong.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ingress Tricks]]></title>
    <link href="http://mishadoff.github.com/blog/ingress-tricks/"/>
    <updated>2012-12-11T12:00:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/ingress-tricks</id>
    <content type="html"><![CDATA[<p>Ingress - MMORPG with <a href="http://en.wikipedia.org/wiki/Augmented_reality">augmented reality</a> created by Google.
This is very impressive game with capability to run over the city with your friends for capturing portals.</p>

<!-- more -->


<p><img src="http://i.imgur.com/vskNt.jpg?1" alt="" /></p>

<p>The game genre positioned as <strong>MMMMOARG</strong> (<em>massively multiplayer map-based mobile online augmented reality game</em>).
In fact, it&#8217;s just MMORPG. You have character, you play online with other people.</p>

<h2>Brief game overview</h2>

<p><em>skip if you already now what Ingress is</em></p>

<p>There are two fractions in game: <strong>Enlightened</strong> and <strong>Resistance</strong>.
In few words, Enlightened for a progress and big changes, Resistance for conservative being.
<strong>Portals</strong> are famous places like monuments, memorials, sculptures, etc.
Each fraction can capture portals, improve, destroy them, link portals with each other,
and create control field (<em>by linking three portals in triangle</em>). Area under this control field covers
some number of <strong>mind units</strong>. Fraction that have more mind units - more succesful to achieve its goal.</p>

<h2>Some tricks</h2>

<p>If you already a member of Ingress, check these tricks, probably some you know.</p>

<h2><strong>Resonators</strong></h2>

<ul>
<li><strong>Deploy resonator on maximum distance betwen portal.</strong> Because it is much harder for your enemy
to destroy spattered resonators than if they were in one place.</li>
<li><strong>Waste resonators.</strong> If you have no time while running near neutral or low-level
portal, just deploy one resonator of your maximum level. You still can not link it to another portal,
but enemy need to spend enough effort to destroy it.</li>
<li><strong>Upgrade.</strong> Use upgrade menu to improve resonators on portal. If somebody deployed L1 resonator, and you
can change it to L4, it would be good.</li>
<li><strong>Use specific resonators.</strong> By default you deploy only L1 resonators. From upgrade menu you can select
what resonators you want to deploy.</li>
</ul>


<h2><strong>Bursters</strong></h2>

<ul>
<li><strong>Do not waste bursters.</strong> It&#8217;s useless to fire couple bursts if they are not destroying resonators/portals. Just save them.
When you have enough bursters, then you can destroy enemy portal and get XP.</li>
<li><strong>Use bursters from optimal point.</strong> It&#8217;s opposite from previous. Find place where your bursters&#8217; coverage
on enemy resonators will be maximum. Use weighted estimate, you need stand closer to higher level resonators.</li>
<li><strong>Use specific bursters.</strong> By default you fire with you maximum level bursters. If enemy portal not so hard you can
select lower-level burster from weapons menu.</li>
</ul>


<h2><strong>Mods</strong></h2>

<ul>
<li><strong>Deploy portal shields.</strong> For portals that have enough support and high level. Portal shields are relatively rare resources, so don&#8217;t waste them.
Also if you deployed shield on high level portal, much harder for enemy to get resources, and destroy it.</li>
</ul>


<h2><strong>Links</strong></h2>

<ul>
<li><strong>Plan links and fields carefully.</strong> You must not be fast at linking, in case you linking more than 4 portals,
there are possibilities. And you should choose one that gives you maximum number of fields.
To make link between A and B, you need portal A with enough distance to B, and portal key from B.</li>
<li><strong>Build long links.</strong> Long links can prevent other fraction to link something.
Because crossed links are restricted. But if you have time to link something better, think about it.</li>
</ul>


<h2><strong>Resources</strong></h2>

<ul>
<li><strong>Gather resources.</strong> Find place where you can see a lot of high-level portals and hack them. One hour
spent near them gives you a lot of resources.</li>
<li><strong>Share resources.</strong> You can, or better you need to share resources with your friends. It&#8217;s cooperative game.</li>
</ul>


<h2><strong>Area</strong></h2>

<ul>
<li><strong>Distribute area locally.</strong> Communicate with players from your city and plan what territory can be supported by whom.</li>
<li><strong>Strategic portals.</strong> Don&#8217;t plan your strategic portals in common places. They can be simply destroyed. Use for your strategic
portals some strange places, like portal inside building, mountain portals, island portals, etc.</li>
<li><strong>Use Intel Map to plan your trip.</strong> Move only in the way you already know. Don&#8217;t practice <em>blind trips</em>.</li>
</ul>


<h2><strong>Friends</strong></h2>

<ul>
<li><strong>Play with friends.</strong> Preferably, the same level friends. Obviously, you can destroy more, you can capture more.
Also, it&#8217;s more fun to talk with somebody during the moving.</li>
<li><strong>Communication.</strong> If you see somebody playing ingress near you, don&#8217;t hesitate to meet and make friendship. Even he or she from
another fraction. Maybe it&#8217;s your future spouse.</li>
</ul>


<h2><strong>Home playing</strong></h2>

<ul>
<li><strong>Repair portals.</strong> If you are sitting at office, have enough XM, you still can help your fraction.
Just open portal keys and you can repair these portals distantly. Keep in mind that resonator XM reduces by 10% each day.
The trick is also to repair one most valuable resonator.</li>
<li><strong>Solve puzzles.</strong> If you solve some puzzle that appeared on niantic site or in your inventory, you
can help you fraction a lot by posting code in faction channel.</li>
<li><strong>Manage the actions.</strong> You can sit at home with opened Intel Map and guide somebody to do right things.</li>
</ul>


<p>This post planned to be updatable, because all these advices found upon investigation. Check for new updates.
Also, if you have some useful information, other tips and tricks,  post it in comments.</p>

<h2>Links</h2>

<p>More about game and some useful resources here:</p>

<ul>
<li><a href="http://www.ingress.com/">Ingress Official</a></li>
<li><a href="http://www.nianticproject.com/">History and Puzzles</a></li>
<li><a href="http://ingressfieldguide.com/">Tips &amp; Tricks</a></li>
<li><a href="http://www.reddit.com/r/Ingress">Ingress subreddit</a></li>
<li><a href="http://www.ingress.com/intel">Intel Map</a></li>
</ul>


<h2>Bonus: xkcd</h2>

<p><img src="http://imgs.xkcd.com/comics/location.png" alt="" /></p>

<p>Viva la Resistance!</p>

<p><strong>P.S.</strong> Unfornunately game at closed beta right now. Only for Android devices.
Hope it will be released very soon and we will see more people near monuments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is source code?]]></title>
    <link href="http://mishadoff.github.com/blog/what-is-source-code/"/>
    <updated>2012-11-29T23:31:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/what-is-source-code</id>
    <content type="html"><![CDATA[<p>It&#8217;s not just a bunch of <code>ifs</code> and <code>fors</code> you mastering every day.
It&#8217;s not even <code>Factories</code>, <code>Builders</code> and <code>Proxies</code> you learn from <a href="http://en.wikipedia.org/wiki/Design_Patterns">GoF</a>.</p>

<p>I think this term has much wider meaning.</p>

<!-- more -->


<p><em>Almost everything you can create is source code.</em></p>

<p>By creation I mean creation in digital world, not building the house.
Good criteria of source code - is something that may be changed and need to be up-to-date.</p>

<p><a href="https://github.com/WiredEnterprise/Lord-of-the-Files">Article</a> - source code,
<a href="https://github.com/mishadoff/mishadoff.github.com">Blog</a> - source code,
<a href="https://github.com/patmorin/ods">Book</a> - source code,
<a href="https://github.com/magnars/.emacs.d">Configuration</a> - source code,
<a href="https://github.com/bundestag/gesetze">Laws</a> - source code,
<a href="https://github.com/norinori2222/boyfriend_require/blob/master/README-en.md">Dating request</a> is also source code.</p>

<p>The word <code>code</code> can be confusing, but it is not.</p>

<p><strong>Code</strong> - is just a set of instructions that can be processed by <em>processor</em>.</p>

<p>From that point of view, processor is our brain.</p>

<p>And if you really appreciate your <em>source code</em>, choose appropriate control version system for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 008]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-008/"/>
    <updated>2012-11-27T22:53:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-008</id>
    <content type="html"><![CDATA[<blockquote><p>Find the greatest product of five consecutive digits in the 1000-digit number.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=8">http://projecteuler.net/problem=8</a></p>

<p><em>Large number under the cut.</em></p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>73167176531330624919225119674426574742355349194934
</span><span class='line'>96983520312774506326239578318016984801869478851843
</span><span class='line'>85861560789112949495459501737958331952853208805511
</span><span class='line'>12540698747158523863050715693290963295227443043557
</span><span class='line'>66896648950445244523161731856403098711121722383113
</span><span class='line'>62229893423380308135336276614282806444486645238749
</span><span class='line'>30358907296290491560440772390713810515859307960866
</span><span class='line'>70172427121883998797908792274921901699720888093776
</span><span class='line'>65727333001053367881220235421809751254540594752243
</span><span class='line'>52584907711670556013604839586446706324415722155397
</span><span class='line'>53697817977846174064955149290862569321978468622482
</span><span class='line'>83972241375657056057490261407972968652414535100474
</span><span class='line'>82166370484403199890008895243450658541227588666881
</span><span class='line'>16427171479924442928230863465674813919123162824586
</span><span class='line'>17866458359124566529476545682848912883142607690042
</span><span class='line'>24219022671055626321111109370544217506941658960408
</span><span class='line'>07198403850962455444362981230987879927244284909188
</span><span class='line'>84580156166097919133875499200524063689912560717606
</span><span class='line'>05886116467109405077541002256983155200055935729725
</span><span class='line'>71636269561882670428252483600823257530420752963450</span></code></pre></td></tr></table></div></figure>


<p>Idea behind this problem is pretty straightforward:</p>

<ol>
<li>Init <code>maximum</code> with some small value, zero would be good.</li>
<li>Take first 5 digits, calculate the product.</li>
<li>If product is greater than our current <code>maximum</code>, reassign it.</li>
<li>Shift, to take other 5 digits, and back to the step 1.</li>
</ol>


<p>A simple optimization can be applied: if our last element of 5 digit group is zero,
then skip 5 shifts. But it&#8217;s details.</p>

<p>Let&#8217;s make our problem little harder to get more from clojure.</p>

<p>Assume that these digits stored in the file. First thing we need: to read the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">slurp </span><span class="s">&quot;path/to/the/file&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://clojuredocs.org/clojure_core/clojure.core/slurp">slurp</a> is the simplest
function to read file content (<em>In fact, not only files</em>).
It just returns string representation of the whole file.</p>

<p>Then we need to break one large string into symbols.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">seq </span><span class="s">&quot;helloyo&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="sc">\h</span> <span class="sc">\e</span> <span class="sc">\l</span> <span class="sc">\l</span> <span class="sc">\o</span> <span class="sc">\y</span> <span class="sc">\o</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://clojuredocs.org/clojure_core/clojure.core/seq">seq</a> return a sequence with linear access
to collection. If applied to string, return sequence of characters.</p>

<p>But, there are some garbage in the file we don&#8217;t want, new lines for example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">remove </span><span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="sc">\n</span><span class="nv">ewline</span> <span class="nv">%</span><span class="p">)</span> <span class="p">[</span><span class="sc">\h</span> <span class="sc">\e</span> <span class="sc">\l</span> <span class="sc">\l</span> <span class="sc">\o</span> <span class="sc">\n</span><span class="nv">ewline</span> <span class="sc">\y</span> <span class="sc">\o</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<em>slash</em>) + something - represents character in clojure.
<code>\newline</code> is a new line, known as <code>\n</code> in other languages.</p>

<p>Now we have long sequence with all digits from file.
Need to get all consecutive groups with 5 letters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">partition</span> <span class="mi">5</span> <span class="mi">1</span> <span class="p">[</span><span class="sc">\h</span> <span class="sc">\e</span> <span class="sc">\l</span> <span class="sc">\l</span> <span class="sc">\o</span> <span class="sc">\y</span> <span class="sc">\o</span><span class="p">])</span> <span class="nv">=&gt;</span> <span class="p">[[</span><span class="sc">\h</span> <span class="sc">\e</span> <span class="sc">\l</span> <span class="sc">\l</span> <span class="sc">\o</span><span class="p">]</span> <span class="p">[</span><span class="sc">\e</span> <span class="sc">\l</span> <span class="sc">\l</span> <span class="sc">\o</span> <span class="sc">\y</span><span class="p">]</span> <span class="nv">...</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://clojuredocs.org/clojure_core/clojure.core/partition">partition</a>
is an excelent function for such tasks. We specify <code>5</code> - size of partition,
and <code>1</code> shift size. It generates all consecutive groups with 5 elements till the end.</p>

<p>Calulating the product for each group gives us the solution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">reduce * </span><span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not so fast.</p>

<p>You, probably, get <code>ClassCastException</code>.</p>

<p>After reading the file, we just get bunch of characters,
instead of digits in mathematical sense. And applied mathematical operation <code>*</code> to them.
So, simply speaking, <code>\1</code> is not <code>1</code>.</p>

<p>That&#8217;s why we need to transform every digit character to it&#8217;s actual digit value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">int </span><span class="nv">%</span><span class="p">)</span> <span class="mi">48</span><span class="p">)</span> <span class="p">[</span><span class="sc">\1</span> <span class="sc">\2</span> <span class="sc">\3</span><span class="p">])</span> <span class="nv">=&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This awful implementation do the work.</p>

<ul>
<li>Cast each character to int, get the <a href="http://en.wikipedia.org/wiki/ASCII">ASCII</a>
representation for digit.</li>
<li>From each ASCII value we subtract <code>48</code> and get digit value.</li>
</ul>


<p>Applying <code>product</code> of digits defined earlier we get solution to this problem.</p>

<p>Again, full code on <a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem008.clj">GitHub</a>.</p>

<p><strong>P.S.</strong> <code>slurp</code> function very powerful and has may applications. You can specify encoding
for reading as you want or read whole html page by url. But it is also very dangerous function,
because reads all file contents to the memory and can take considerable amount of time. If you have
a large file, say 15GB, read it line by line with buffered reader. Also, note
<a href="http://clojuredocs.org/clojure_core/clojure.core/spit">spit</a> function. It is opposite to <code>slurp</code> -
writes string to the file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pigeon Cipher]]></title>
    <link href="http://mishadoff.github.com/blog/pigeon-cipher/"/>
    <updated>2012-11-24T14:52:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/pigeon-cipher</id>
    <content type="html"><![CDATA[<p>The skeleton of the pigeon was found in England.
There is small red box tied to its leg with the handwritten ciphered message.
Britain cryptographers failed the attempt to decipher the message and it was released in public.
It can be a good puzzle for a weekend.</p>

<!-- more -->


<h3>Input</h3>

<p><img src="http://news.bbcimg.co.uk/media/images/64345000/jpg/_64345866_masons_pigeon_code_07.jpg" alt="" /></p>

<p>The paper consists of some parts <a href="http://i2.cdn.turner.com/cnn/2012/images/11/23/large-pigeon-message-1.pdf">Full PDF scan</a>:</p>

<ul>
<li><strong>Title:</strong> &#8220;Pigeon Service&#8221;</li>
<li><strong>TO:</strong> XO2</li>
<li><strong>Ciphered Message</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AOAKN HVPKD FNFJW YIDDC
</span><span class='line'>RQXSR DJHFP GOVFN MIAPX
</span><span class='line'>PABUZ WYYNP CMPNW HJRZH
</span><span class='line'>NLXKG MEMKK ONOIB AKEEQ
</span><span class='line'>WAOTA RBQRH DJOFM TPZEH
</span><span class='line'>LKXGH RGGHT JRZCQ FNKTQ
</span><span class='line'>KLDTS FQIRW AOAKN 27 1525/6</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Pigeon IDs:</strong> <code>NURP 40 TW 194</code> and <code>NURP 37 OK 76</code>.
There are was two pigeons as we can see from the field <em>Number of copies sent</em>.</li>
<li><strong>LIB 1625</strong></li>
<li><strong>Time of origin:</strong> 1522</li>
<li><strong>Sender&#8217;s signature:</strong> W Stit Sjt</li>
</ul>


<h3>Output</h3>

<p>The most interesting part of this paper is the ciphered message. It consists of 27 5-letter blocks.
At the end of the message we can see number 27, probably some sort of control sum of blocks.
First block <code>AOAKN</code> equals to the last one, so it can be some sort of indicator of the cipher or key used.</p>

<p>From pigeon ids we can know that they were born in <code>1940</code> and <code>1937</code> years respectively, so this cipher from World War II.</p>

<p>Probably, the message was decoded with <a href="http://en.wikipedia.org/wiki/One-time_pad">one time pad</a> cipher, that
has a perfect secrecy. So, maybe this cipher will never be decrypted.</p>

<p><em>Note:</em> It can be decrypted with bruteforce algorithm, but in that case we can obtain any message.</p>

<p>Anyway, if you interested in this topic, try to spend a couple of hours for breaking the cipher,
it is a good workout for your brain.</p>

<h3>Links</h3>

<ol>
<li><a href="http://www.bbc.co.uk/news/uk-20458792">BBC</a></li>
<li><a href="http://edition.cnn.com/2012/11/23/world/europe/uk-wwii-pigeon-mystery/index.html">CNN</a></li>
</ol>


<p><strong>P.S.</strong> Don&#8217;t be addicted, you have a lot things to do instead of breaking this stupid cipher.
Very unlikely, but it can be some sort of a joke.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 007]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-007/"/>
    <updated>2012-11-20T15:37:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-007</id>
    <content type="html"><![CDATA[<blockquote><p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>

<p>What is the 10001st prime number?</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=7">http://projecteuler.net/problem=7</a></p>

<!-- more -->


<p>It&#8217;s also pretty clear problem to make you more familiar with prime numbers.
As I said in <a href="http://mishadoff.github.com/blog/clojure-euler-problem-003">Clojure Euler: Problem 003</a>,
big amount of Project Euler problems devoted to prime numbers so it is <strong>MUST HAVE</strong> (<em>I don&#8217;t like this phrase either</em>)</p>

<p>You need to implement by yourself effective prime number algorithm. And only after that use one from library.
As we do.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">clojure.contrib.lazy-seqs</span> <span class="ss">:only</span> <span class="p">(</span><span class="nf">primes</span><span class="p">)])</span>
</span></code></pre></td></tr></table></div></figure>


<p>This line import just one symbol <code>primes</code> to your namespace. It&#8217;s a prime numbers lazy sequence. Lazy sequences briefly covered
in <a href="http://mishadoff.github.com/blog/clojure-euler-problem-002">Clojure Euler: Problem 002</a> or <a href="http://en.wikipedia.org/wiki/Lazy_evaluation">Wikipedia article</a>,
that&#8217;s enough for now.</p>

<p>Return to question.</p>

<blockquote><p>What is the 10001st prime number?</p></blockquote>

<p>No problem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">last </span><span class="p">(</span><span class="nb">take </span><span class="mi">10001</span> <span class="nv">primes</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Two lines of code: one for import, one for solution. What can be simpler?</p>

<p>Note, that <a href="http://clojuredocs.org/clojure_core/clojure.core/last">last</a> return last element of the sequence and works in linear time.</p>

<p>Another one problem solved in few <strike>seconds</strike> minutes.</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem007.clj">GitHub</a></p>

<p><strong>P.S.</strong> Actually, I lied. In linked solution I use 6 lines of code: namespace declaration, use, <em>empty line</em>,
comment with executing time, function declaration and, finally, solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Magic. Part 3: Finally]]></title>
    <link href="http://mishadoff.github.com/blog/java-magic-part-3-finally/"/>
    <updated>2012-11-18T19:39:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/java-magic-part-3-finally</id>
    <content type="html"><![CDATA[<p>Every experienced java programmer should know that <code>finally</code> block always executed. But is it true?</p>

<!-- more -->


<p>It depends on our definition of program execution. But, generally speaking, <strong>yes</strong>.</p>

<h3>Normal program execution</h3>

<p><em>Aha, look at this</em>, someone might retort:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;I&#39;m here, man&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>You just said, finally block always executed?</em></p>

<p>Well. In that case no, because we speaking about normal flow of program execution.
This is <em>abnormal</em>.</p>

<p>From the <a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/finally.html">official tutorial</a></p>

<blockquote><p>Note: If the JVM exits while the try or catch code is being executed, then the finally block may not execute.</p></blockquote>

<p>Your counter question might be: <em>If second line of that code always exectued?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Line 1&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Line 2&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Line 3&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure, because it&#8217;s linear flow. Nothing can break&#8230;<strong>BANG</strong>&#8230;<code>Electricity unavailable. Program stopped.</code></p>

<p>What about this? It&#8217;s also abnormal program execution, and we can&#8217;t guarantee anything for 100%.
In fact, this is the same as <code>System.exit(1)</code> or <code>reset</code> button on your computer or whatever.</p>

<p>That&#8217;s why, we are talking about <em>normal</em> program execution. Only <em>normal</em>.</p>

<blockquote><p>I said yes? I meant no!</p></blockquote>

<h3>Perpetuum Mobile</h3>

<p>Consider the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;I print here some useful information&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Let me run&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will be the line <em>&#8220;Let me run&#8221;</em> printed? Maybe yes, if printing error to standard output appear. Almost always the answer is no.</p>

<p>In that case, there are no difference between simple statement and finally block. None of them will be executed, throw this example away.</p>

<h3>Threads</h3>

<p>What about threads? We know that execution flow controlled by threads and they can be interrupted.</p>

<p>Assume that we have thread that perform some work, and other thread kills first one right before finally block. Finally wasn&#8217;t executed.</p>

<p>Assume that we have deadlock between two threads, right before finally line. The same thing.</p>

<p>From the <a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/finally.html">same tutorial</a></p>

<blockquote><p>&#8230;if the thread executing the try or catch code is interrupted or killed, the finally block may not execute even though the application as a whole continues.</p></blockquote>

<p>So, we can treat thread like a program, and make one effective rule:</p>

<p><strong>Rule 1</strong>. Finally executes always, except the case where controlling program or thread was aborted.</p>

<h3>Finally we return</h3>

<p>Ok, now we know when finally is not executed. But do we know when finally is executed?</p>

<p>Consider the example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nf">someFunc</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is obviously <code>1</code>. Just because <code>finally</code> is always executed.</p>

<p>Consider, next example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="nf">someFunc</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is <code>1</code> again. And it&#8217;s a problem. We just lose the exception.
Such issue known as <em>exception swallowing</em>. It is very dangerous, because client&#8217;s code expect either exception or some value, but it always get only value.</p>

<p>One more less imaginary example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="nf">deposit</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">DAOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dao</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;OK&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The logic behind <code>finally</code> is to have some default value, and our <code>deposit</code> method throws the <code>DAOException</code> where client code is
responsible for its handling. Unfortunately, perhaps compiler forces you to handle this <code>DAOException</code> it never occurs. And string &#8220;OK&#8221; will be returned.</p>

<p><strong>Rule 2</strong>. Never use <code>return</code> from <code>finally</code> block.</p>

<h3>Instead of conclusion</h3>

<p>A lot of programmers are aware about this common mistake. But some are not.
Maybe these two simple rules give you a tiny light on coward <code>finally</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Euler: Problem 006]]></title>
    <link href="http://mishadoff.github.com/blog/clojure-euler-problem-006/"/>
    <updated>2012-11-17T14:05:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/clojure-euler-problem-006</id>
    <content type="html"><![CDATA[<blockquote><p>The sum of the squares of the first ten natural numbers is,</p>

<p>1<sup>2</sup> + 2<sup>2</sup> + &#8230; + 10<sup>2</sup> = 385</p>

<p>The square of the sum of the first ten natural numbers is,</p>

<p>(1 + 2 + &#8230; + 10)<sup>2</sup> = 55<sup>2</sup> = 3025</p>

<p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.</p>

<p>Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</p></blockquote>

<p>Permalink: <a href="http://projecteuler.net/problem=6">http://projecteuler.net/problem=6</a></p>

<!-- more -->


<p>This problem is very simple, even simpler than previous one, that confirms fact that all Project Euler problems
are <strong>NOT</strong> in increasing complexity order. Ok, let&#8217;s split our problem into two subproblems.</p>

<h3>Sum of the squares</h3>

<p>First, we need a square function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sqr</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span> <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, sum of squares of the first one hundred natural numbers we calculate with common <code>(reduce + list)</code> idiom:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="nv">sqr</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">101</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Square of the sum</h3>

<p>Just take a sum, and square it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">sqr</span> <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">101</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bind all together</h3>

<p>We splitted our problem into two smaller, now is time to bind all. We can just subtract results obtained
but you see, that both of smaller solutions uses common piece of code <code>(range 1 101)</code>. Move it to <code>let</code> form.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">rn</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">101</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">sqr</span> <span class="p">(</span><span class="nb">reduce + </span><span class="nv">rn</span><span class="p">))</span> <span class="p">(</span><span class="nb">reduce + </span><span class="p">(</span><span class="nb">map </span><span class="nv">sqr</span> <span class="nv">rn</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217; all. I&#8217;ve got result in less than millisecond.
Maybe there are some pitfalls in this problem (<em>e.g. integer overflow for larger ranges</em>)
but this most straightforward solution works fine.</p>

<p>Congratulations!</p>

<p><a href="https://github.com/mishadoff/project-euler/blob/master/src/project_euler/problem006.clj">GitHub</a></p>

<p><strong>P.S.</strong> First time I solved this problem and was confused: <em>Where is the trick?</em> Seems nowhere.
That&#8217;s why using most straightforward solution is often the best choice (<em>excluding obvious cases, of course</em>).
It has fast implementation, and if it fails, it fails fast.</p>

<p><strong>Fail Fast, Succeed Faster</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Perl]]></title>
    <link href="http://mishadoff.github.com/blog/learn-perl/"/>
    <updated>2012-11-12T20:38:00+02:00</updated>
    <id>http://mishadoff.github.com/blog/learn-perl</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="p">(</span><span class="nv">$current_tasks</span><span class="p">,</span> <span class="nv">$perl</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$perl</span><span class="p">,</span> <span class="nv">$current_tasks</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Long time learning <a href="http://www.perl.org/">perl</a> was my desire.
Now I pushed back for a little some of my activities, and started with perl.</p>

<!-- more -->


<p>The reason for this was the third launch of <a href="https://class.coursera.org/crypto-004/class/index">Stanford Cryptography</a> class on coursera.</p>

<p>Cryptography is a field that I never know, but would like to. I see a lot of practical applications here,
but, honestly, for me it&#8217;s more <em>just for fun</em>, than anything else. Isn&#8217;t it interesting to (de)cypher something?</p>

<p>First two launches was marked as lack of time for me, so I postponed it. By the way, other interesting courses was <em>in progress</em>.
But now I really hope that I get enough time (<em>and patience</em>) to finish the class and get some good knowledge in this field.</p>

<p><img src="http://imgs.xkcd.com/comics/lisp.jpg" alt="" /></p>

<p>I don&#8217;t know why, but I choose perl as primary language for doing programming assignments.</p>

<p>First of all, I needed some fast scripting language for general-purpose problems. To choose between perl and python, I choose perl.
Because of <em>&#8220;less number of symbols in the name&#8221;</em>, of course. Second of all, I don&#8217;t know perl and it&#8217;s a good reason to learn it <em>in action</em>.
Also, what is important, I did get only positive reviews from my friends who know perl, but all their stories was like a mistery for me.
Thought, that only chosen one can learn perl. I want to dispel this myth. To try, at least.</p>

<blockquote><p>There&#8217;s more than one way to do it</p>

<p>&#8211; Perl motto</p></blockquote>

<p>The book that I choose for learning is a classic book (<em>read Perl Bible</em>) from the creator of perl, <a href="http://en.wikipedia.org/wiki/Larry_Wall">Larry Wall</a>.
There is fresh, 4th edition, available.</p>

<p><a href="http://shop.oreilly.com/product/9780596004927.do"><img src="http://akamaicovers.oreilly.com/images/9780596004927/cat.gif" alt="" /></a></p>

<p>Hope, I won&#8217;t stop at the middle of something and get useful tool for <em>everyday problems</em>.</p>
]]></content>
  </entry>
  
</feed>
