---
layout: post
title: "Clojure Euler: Problem 023"
date: 2014-05-09 23:42
comments: true
categories: [programming, clojure, project-euler]
published: false
---

> Find the sum of all the positive integers
> which cannot be written as the sum of two abundant numbers.

Permalink: [http://projecteuler.net/problem=23](http://projecteuler.net/problem=23)

<!-- more -->

To define abundant number let's revisit `sum-of-proper-divisors` from the [Clojure Euler: Problem 021](/blog/clojure-euler-problem-021)

To implement `abundant` predicate we just follow definition.

``` clojure
(defn abundant? [n]
  (> (sum-of-proper-divisors n) n))
```

The problem is `sum-of-proper-divisors` function
is wrong. Exact square numbers are not handled.
Just add one more condition to handle them.

``` clojure
(defn sum-of-proper-divisors [n]
  (let [divs (filter #(zero? (mod n %)) (range 2 (Math/sqrt n)))]
    (reduce + 1 (set (concat
                      (let [isq (int (Math/sqrt n))]
                        (if (= n (* isq isq)) [isq] []))
                      divs
                      (map #(/ n %) divs))))))
```

Great! Next step is to find all integer numbers which can not be written as the sum of two abundant numbers.

Find all abundant numbers:

``` clojure
(filter abundant? (range 12 28124))
```
